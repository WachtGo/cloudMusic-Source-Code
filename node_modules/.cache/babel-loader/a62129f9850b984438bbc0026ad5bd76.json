{"ast":null,"code":"require(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/web.url.js\");\n\nrequire(\"core-js/modules/web.url-search-params.js\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.string.trim.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\n// import decode from 'safe-decode-uri-component';\n//转换成年月日\nvar transtime = function transtime(millisecond) {\n  if (!millisecond) {\n    return;\n  }\n\n  var year = new Date(millisecond).getFullYear();\n  var month = new Date(millisecond).getMonth() + 1;\n  var date = new Date(millisecond).getDate();\n  return year + '-' + month + '-' + date;\n}; //将歌曲列表歌曲时长转化成分秒\n\n\nvar transMusicTime = function transMusicTime(arr, dt) {\n  for (var i = 0; i < arr.length; i++) {\n    var min = parseInt(arr[i][dt] / 1000 / 60);\n    var sec = parseInt(arr[i][dt] / 1000 % 60);\n\n    if (min < 10) {\n      min = \"0\" + min;\n    }\n\n    if (sec < 10) {\n      sec = \"0\" + sec;\n    }\n\n    arr[i][dt] = min + \":\" + sec;\n  }\n}; //将播放量转换成亿万单位\n\n\nvar transPlayCount = function transPlayCount(arr, playCount) {\n  for (var i = 0; i < arr.length; i++) {\n    if (String(arr[i][playCount]).length > 5 && String(arr[i][playCount]).length < 9) {\n      arr[i][playCount] = String(arr[i][playCount]).substr(0, String(arr[i][playCount]).length - 4) + \"万\";\n    } else if (String(arr[i][playCount]).length == 5) {\n      arr[i][playCount] = String(arr[i][playCount]).substr(0, 1) + \".\" + String(arr[i][playCount]).substr(1, 2) + \"万\";\n    } else if (String(arr[i][playCount]).length == 9) {\n      arr[i][playCount] = String(arr[i][playCount]).substr(0, 1) + \".\" + String(arr[i][playCount]).substr(1, 2) + \"亿\";\n    } else if (String(arr[i][playCount]).length > 9) {\n      arr[i][playCount] = String(arr[i][playCount]).substr(0, String(arr[i][playCount]).length - 8) + \"亿\";\n    }\n  }\n}; //歌曲下载\n\n\nvar download = function download(src, filename) {\n  fetch(src).then(function (res) {\n    return res.blob();\n  }).then(function (blob) {\n    var a = document.createElement('a');\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    var url = window.URL.createObjectURL(blob);\n    a.href = url; //下载地址\n\n    a.download = \"\".concat(filename, \".mp3\"); //下载文件名\n\n    a.click(); //模拟点击，自动下载\n\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  });\n}; //获取当前时间戳\n\n\nvar getTimestamp = function getTimestamp() {\n  return new Date().getTime();\n}; //生成(min,max)之间的随机整数（包含min,不包含max）\n\n\nvar randomRange = function randomRange(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}; // Cookie Parser\n\n\nvar cookieParser = function cookieParser(cookie) {\n  var parserData = {}(cookie || '').split(/;\\s+|(?<!\\s)\\s+$/g).forEach(function (pair) {\n    var crack = pair.indexOf('=');\n    if (crack < 1 || crack == pair.length - 1) return;\n    parserData[decode(pair.slice(0, crack)).trim()] = decode(pair.slice(crack + 1)).trim();\n  });\n  return parserData;\n};\n\nmodule.exports = {\n  transtime: transtime,\n  transMusicTime: transMusicTime,\n  transPlayCount: transPlayCount,\n  download: download,\n  getTimestamp: getTimestamp,\n  randomRange: randomRange,\n  cookieParser: cookieParser\n};","map":{"version":3,"sources":["D:/data/桌面/git/cloudMusic-Source-Code/src/utils/commonApi.js"],"names":["transtime","millisecond","year","Date","getFullYear","month","getMonth","date","getDate","transMusicTime","arr","dt","i","length","min","parseInt","sec","transPlayCount","playCount","String","substr","download","src","filename","fetch","then","res","blob","a","document","createElement","body","appendChild","style","display","url","window","URL","createObjectURL","href","click","removeChild","revokeObjectURL","getTimestamp","getTime","randomRange","max","Math","floor","random","cookieParser","cookie","parserData","split","forEach","pair","crack","indexOf","decode","slice","trim","module","exports"],"mappings":"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","sourcesContent":["// import decode from 'safe-decode-uri-component';\r\n\r\n//转换成年月日\r\nconst transtime = (millisecond) => {\r\n  if (!millisecond) {\r\n    return\r\n  }\r\n  let year = new Date(millisecond).getFullYear();\r\n  let month = new Date(millisecond).getMonth() + 1;\r\n  let date = new Date(millisecond).getDate()\r\n  return year + '-' + month + '-' + date\r\n}\r\n//将歌曲列表歌曲时长转化成分秒\r\nconst transMusicTime = (arr, dt) => {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    let min = parseInt(arr[i][dt] / 1000 / 60);\r\n    let sec = parseInt((arr[i][dt] / 1000) % 60);\r\n    if (min < 10) {\r\n      min = \"0\" + min;\r\n    }\r\n    if (sec < 10) {\r\n      sec = \"0\" + sec;\r\n    }\r\n    arr[i][dt] = min + \":\" + sec;\r\n  }\r\n}\r\n\r\n//将播放量转换成亿万单位\r\n\r\nconst transPlayCount = (arr, playCount) => {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (\r\n      String(arr[i][playCount]).length > 5 &&\r\n      String(arr[i][playCount]).length < 9\r\n    ) {\r\n      arr[i][playCount] =\r\n        String(arr[i][playCount]).substr(\r\n          0,\r\n          String(arr[i][playCount]).length - 4\r\n        ) + \"万\";\r\n    } else if (String(arr[i][playCount]).length == 5) {\r\n      arr[i][playCount] =\r\n        String(arr[i][playCount]).substr(0, 1) +\r\n        \".\" +\r\n        String(arr[i][playCount]).substr(1, 2) +\r\n        \"万\";\r\n    } else if (String(arr[i][playCount]).length == 9) {\r\n      arr[i][playCount] =\r\n        String(arr[i][playCount]).substr(0, 1) +\r\n        \".\" +\r\n        String(arr[i][playCount]).substr(1, 2) +\r\n        \"亿\";\r\n    } else if (String(arr[i][playCount]).length > 9) {\r\n      arr[i][playCount] =\r\n        String(arr[i][playCount]).substr(\r\n          0,\r\n          String(arr[i][playCount]).length - 8\r\n        ) + \"亿\";\r\n    }\r\n  }\r\n}\r\n\r\n//歌曲下载\r\nconst download = (src, filename) => {\r\n  fetch(src).then(res => res.blob()).then(blob => {\r\n    const a = document.createElement('a');\r\n    document.body.appendChild(a)\r\n    a.style.display = 'none'\r\n    const url = window.URL.createObjectURL(blob);\r\n    a.href = url;//下载地址\r\n    a.download = `${filename}.mp3`;//下载文件名\r\n    a.click();//模拟点击，自动下载\r\n    document.body.removeChild(a)\r\n    window.URL.revokeObjectURL(url);\r\n  });\r\n\r\n}\r\n//获取当前时间戳\r\nconst getTimestamp = () => {\r\n  return new Date().getTime()\r\n}\r\n//生成(min,max)之间的随机整数（包含min,不包含max）\r\nconst randomRange = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n// Cookie Parser\r\nconst cookieParser = (cookie) => {\r\n  const parserData = {}\r\n    (cookie || '').split(/;\\s+|(?<!\\s)\\s+$/g).forEach((pair) => {\r\n      let crack = pair.indexOf('=')\r\n      if (crack < 1 || crack == pair.length - 1) return\r\n      parserData[decode(pair.slice(0, crack)).trim()] = decode(\r\n        pair.slice(crack + 1),\r\n      ).trim()\r\n    })\r\n  return parserData\r\n}\r\n\r\n\r\nmodule.exports = {\r\n  transtime,\r\n  transMusicTime,\r\n  transPlayCount,\r\n  download,\r\n  getTimestamp,\r\n  randomRange,\r\n  cookieParser\r\n}"]},"metadata":{},"sourceType":"script"}