{"ast":null,"code":"import axios from 'axios';\nimport { Message, MessageBox } from 'element-ui';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth'; // import { MessageBox, Message } from 'element-ui'\n//创建axois实例\n\nvar service = axios.create({\n  baseURL: 'https://cloud-music-isntafzhs-wachtgo.vercel.app/',\n  changeOrigin: true //解决跨域\n\n}); // request拦截器\n\nservice.interceptors.request.use(function (config) {\n  if (store.getters.token) {\n    config.headers = {\n      'Authorization': \"token \" + getToken('token') //携带权限参数\n\n    };\n  }\n\n  return config;\n}, function (error) {// Promise.reject(error)\n}); // // request拦截器\n// service.interceptors.request.use(config => {\n//     if (store.getters.token) {\n//       config.headers = {\n//         'Authorization' : \"Token \" + getToken('Token'), //携带权限参数\n//        };\n//     }\n//     return config\n//   }, error => {\n//     Promise.reject(error)\n//   })\n// respone拦截器\n//   service.interceptors.response.use(\n//     response => {\n//      /**\n//       * code:200,接口正常返回;\n//       */\n//       const res = response.data\n//       if (res.code !== 200 && res.errCode ) {\n//         Message({\n//           message: res.info,\n//           type: 'error',\n//           duration: 5 * 1000\n//         })\n//         // 根据服务端约定的状态码：5001:非法的token; 5002:其他客户端登录了; 5004:Token 过期了;\n//         if (res.code === 5001 || res.code === 5002 || res.code === 5004) {\n//             MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {\n//               confirmButtonText: '重新登录',\n//               cancelButtonText: '取消',\n//               type: 'warning'\n//             }).then(() => {\n//               store.dispatch('LogOut').then(() => {\n//                 location.reload()// 为了重新实例化vue-router对象 避免bug\n//               })\n//             })\n//         }\n//         return Promise.reject('error')\n//       } else { // res.code === 200,正常返回数据\n//           return response.data\n//       }\n//     },\n//     error => {\n//       Message({\n//         message: error.info,\n//         type: 'error',\n//         duration: 5 * 1000\n//       })\n//       return Promise.reject(error)\n//     }\n//   )\n\nexport default service;","map":{"version":3,"sources":["D:/Desktop/git工作区/cloudMusic-Source-Code/src/utils/request.js"],"names":["axios","Message","MessageBox","store","getToken","service","create","baseURL","changeOrigin","interceptors","request","use","config","getters","token","headers","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,YAApC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB,C,CACA;AACA;;AACA,IAAMC,OAAO,GAAGL,KAAK,CAACM,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAE,mDADgB;AAEzBC,EAAAA,YAAY,EAAE,IAFW,CAEJ;;AAFI,CAAb,CAAhB,C,CAIA;;AACAH,OAAO,CAACI,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CAAiC,UAAAC,MAAM,EAAI;AACzC,MAAIT,KAAK,CAACU,OAAN,CAAcC,KAAlB,EAAyB;AACvBF,IAAAA,MAAM,CAACG,OAAP,GAAiB;AACf,uBAAkB,WAAWX,QAAQ,CAAC,OAAD,CADtB,CACiC;;AADjC,KAAjB;AAGD;;AACD,SAAOQ,MAAP;AACD,CAPD,EAOG,UAAAI,KAAK,EAAI,CACV;AACD,CATD,E,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeX,OAAf","sourcesContent":["import axios from 'axios'\r\nimport { Message, MessageBox } from 'element-ui'\r\nimport store from '@/store'\r\nimport { getToken } from '@/utils/auth'\r\n// import { MessageBox, Message } from 'element-ui'\r\n//创建axois实例\r\nconst service = axios.create({\r\n    baseURL: 'https://cloud-music-isntafzhs-wachtgo.vercel.app/',\r\n    changeOrigin: true,  //解决跨域\r\n});\r\n// request拦截器\r\nservice.interceptors.request.use(config => {\r\n  if (store.getters.token) {\r\n    config.headers = {\r\n      'Authorization' : \"token \" + getToken('token'), //携带权限参数\r\n     };\r\n  }\r\n  return config\r\n}, error => {\r\n  // Promise.reject(error)\r\n})\r\n\r\n// // request拦截器\r\n// service.interceptors.request.use(config => {\r\n//     if (store.getters.token) {\r\n//       config.headers = {\r\n//         'Authorization' : \"Token \" + getToken('Token'), //携带权限参数\r\n//        };\r\n//     }\r\n//     return config\r\n//   }, error => {\r\n//     Promise.reject(error)\r\n//   })\r\n  \r\n  // respone拦截器\r\n//   service.interceptors.response.use(\r\n//     response => {\r\n//      /**\r\n//       * code:200,接口正常返回;\r\n//       */\r\n//       const res = response.data\r\n//       if (res.code !== 200 && res.errCode ) {\r\n//         Message({\r\n//           message: res.info,\r\n//           type: 'error',\r\n//           duration: 5 * 1000\r\n//         })\r\n//         // 根据服务端约定的状态码：5001:非法的token; 5002:其他客户端登录了; 5004:Token 过期了;\r\n//         if (res.code === 5001 || res.code === 5002 || res.code === 5004) {\r\n//             MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {\r\n//               confirmButtonText: '重新登录',\r\n//               cancelButtonText: '取消',\r\n//               type: 'warning'\r\n//             }).then(() => {\r\n//               store.dispatch('LogOut').then(() => {\r\n//                 location.reload()// 为了重新实例化vue-router对象 避免bug\r\n//               })\r\n//             })\r\n//         }\r\n//         return Promise.reject('error')\r\n//       } else { // res.code === 200,正常返回数据\r\n//           return response.data\r\n//       }\r\n//     },\r\n//     error => {\r\n//       Message({\r\n//         message: error.info,\r\n//         type: 'error',\r\n//         duration: 5 * 1000\r\n//       })\r\n//       return Promise.reject(error)\r\n//     }\r\n//   )\r\n\r\nexport default service;"]},"metadata":{},"sourceType":"module"}