{"ast":null,"code":"require(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.regexp.to-string.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/web.url.js\");\n\nrequire(\"core-js/modules/web.url-search-params.js\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.string.trim.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nrequire(\"core-js/modules/es.object.get-own-property-names.js\");\n\nrequire(\"core-js/modules/es.object.freeze.js\");\n\n//随机颜色\nvar randomColor = function randomColor() {\n  return \"#\".concat((Math.random() * 0xffffff << 0).toString(16));\n}; //转换成年月日\n\n\nvar transtime = function transtime(millisecond) {\n  if (!millisecond) {\n    return;\n  }\n\n  var year = new Date(millisecond).getFullYear();\n  var month = new Date(millisecond).getMonth() + 1;\n  var date = new Date(millisecond).getDate();\n  return year + '-' + month + '-' + date;\n}; //将歌曲列表歌曲时长转化成分秒\n\n\nvar transMusicTime = function transMusicTime(arr, dt) {\n  for (var i = 0; i < arr.length; i++) {\n    var min = parseInt(arr[i][dt] / 1000 / 60);\n    var sec = parseInt(arr[i][dt] / 1000 % 60);\n\n    if (min < 10) {\n      min = \"0\" + min;\n    }\n\n    if (sec < 10) {\n      sec = \"0\" + sec;\n    }\n\n    arr[i][dt] = min + \":\" + sec;\n  }\n}; //将播放量转换成亿万单位\n\n\nvar transPlayCount = function transPlayCount(arr, playCount) {\n  for (var i = 0; i < arr.length; i++) {\n    if (String(arr[i][playCount]).length > 5 && String(arr[i][playCount]).length < 9) {\n      arr[i][playCount] = String(arr[i][playCount]).substr(0, String(arr[i][playCount]).length - 4) + \"万\";\n    } else if (String(arr[i][playCount]).length == 5) {\n      arr[i][playCount] = String(arr[i][playCount]).substr(0, 1) + \".\" + String(arr[i][playCount]).substr(1, 2) + \"万\";\n    } else if (String(arr[i][playCount]).length == 9) {\n      arr[i][playCount] = String(arr[i][playCount]).substr(0, 1) + \".\" + String(arr[i][playCount]).substr(1, 2) + \"亿\";\n    } else if (String(arr[i][playCount]).length > 9) {\n      arr[i][playCount] = String(arr[i][playCount]).substr(0, String(arr[i][playCount]).length - 8) + \"亿\";\n    }\n  }\n}; //歌曲下载\n\n\nvar download = function download(src, filename) {\n  //将http改成https，因为前端部署后，https请求http下载时会出现报错和无法下载，但本地前端请求时却可以下载的问题。\n  var httpssrc = src.replace(/^http:\\/\\//i, \"https://\"); //  先下载完成后再弹出浏览器窗口2\n\n  fetch(httpssrc).then(function (res) {\n    return res.blob();\n  }).then(function (blob) {\n    var a = document.createElement('a');\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    var url = window.URL.createObjectURL(blob);\n    a.href = url; //下载地址\n\n    a.download = \"\".concat(filename, \".mp3\"); //下载文件名\n\n    a.click(); //模拟点击，自动下载\n\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  });\n}; //获取当前时间戳\n\n\nvar getTimestamp = function getTimestamp() {\n  return new Date().getTime();\n}; //生成(min,max)之间的随机整数（包含min,不包含max）\n\n\nvar randomRange = function randomRange(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}; // Cookie Parser    将cookie解析\n\n\nvar cookieParser = function cookieParser(cookie) {\n  var parserData = {};\n  (cookie || '').split(/;\\s+|(?<!\\s)\\s+$/g).forEach(function (pair) {\n    var crack = pair.indexOf('=');\n    if (crack < 1 || crack == pair.length - 1) return;\n    parserData[decodeURIComponent(pair.slice(0, crack)).trim()] = decodeURIComponent(pair.slice(crack + 1)).trim();\n  });\n  return [parserData['HTTPOnly;MUSIC_U'], parserData['HTTPOnly;__csrf']];\n  /* \n  // console.log(parserData)\n  {\n    Expires: \"Sat, 17 Mar 2091 18:24:35 GMT\"\n    HTTPOnly;MUSIC_A_T: \"1481119727062\"\n    HTTPOnly;MUSIC_R_T: \"1481119757789\"\n    HTTPOnly;MUSIC_U: \"6bf80db2682091e66db7c358940e6034f555d03d999284f42033476c98e45796993166e004087dd3e30340b48322c4fd7a82616b73ff591e0195ea446a99c0ab92386fc4f57b0915a0d2166338885bd7\"\n    HTTPOnly;__csrf: \"a7ae33e29d089a9e30774e67bfd99367\"\n    MUSIC_A_T: \"1481119727062\"\n    Max-Age: \"2147483647\"\n    Path: \"/api/clientlog\"\n  }\n   */\n  //6bf80db2682091e66db7c358940e6034f555d03d999284f42033476c98e45796993166e004087dd3e30340b48322c4fd7a82616b73ff591e0195ea446a99c0ab92386fc4f57b0915a0d2166338885bd7\n}; //深冻结\n\n\nvar deepFreeze = function deepFreeze(obj) {\n  // 获取所有属性\n  var propNames = Object.getOwnPropertyNames(obj); // 遍历\n\n  propNames.forEach(function (item) {\n    var prop = obj[item]; // 如果某个属性的属性值是对象，则递归调用\n\n    if (prop instanceof Object && prop !== null) {\n      deepFreeze(prop);\n    }\n  }); // 冻结自身\n\n  return Object.freeze(obj);\n};\n\nmodule.exports = {\n  randomColor: randomColor,\n  transtime: transtime,\n  transMusicTime: transMusicTime,\n  transPlayCount: transPlayCount,\n  download: download,\n  getTimestamp: getTimestamp,\n  randomRange: randomRange,\n  cookieParser: cookieParser,\n  deepFreeze: deepFreeze\n};","map":{"version":3,"sources":["D:/data/桌面/代码文件夹/git/cloudMusic-Source-Code-main/cloudMusic-Source-Code-main/src/utils/commonApi.js"],"names":["randomColor","Math","random","toString","transtime","millisecond","year","Date","getFullYear","month","getMonth","date","getDate","transMusicTime","arr","dt","i","length","min","parseInt","sec","transPlayCount","playCount","String","substr","download","src","filename","httpssrc","replace","fetch","then","res","blob","a","document","createElement","body","appendChild","style","display","url","window","URL","createObjectURL","href","click","removeChild","revokeObjectURL","getTimestamp","getTime","randomRange","max","floor","cookieParser","cookie","parserData","split","forEach","pair","crack","indexOf","decodeURIComponent","slice","trim","deepFreeze","obj","propNames","Object","getOwnPropertyNames","item","prop","freeze","module","exports"],"mappings":"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","sourcesContent":["//随机颜色\nconst randomColor = () => {\n  return `#${((Math.random() * 0xffffff) << 0).toString(16)}`;\n}\n\n//转换成年月日\nconst transtime = (millisecond) => {\n  if (!millisecond) {\n    return\n  }\n  let year = new Date(millisecond).getFullYear();\n  let month = new Date(millisecond).getMonth() + 1;\n  let date = new Date(millisecond).getDate()\n  return year + '-' + month + '-' + date\n}\n//将歌曲列表歌曲时长转化成分秒\nconst transMusicTime = (arr, dt) => {\n  for (let i = 0; i < arr.length; i++) {\n    let min = parseInt(arr[i][dt] / 1000 / 60);\n    let sec = parseInt((arr[i][dt] / 1000) % 60);\n    if (min < 10) {\n      min = \"0\" + min;\n    }\n    if (sec < 10) {\n      sec = \"0\" + sec;\n    }\n    arr[i][dt] = min + \":\" + sec;\n  }\n}\n\n//将播放量转换成亿万单位\n\nconst transPlayCount = (arr, playCount) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (\n      String(arr[i][playCount]).length > 5 &&\n      String(arr[i][playCount]).length < 9\n    ) {\n      arr[i][playCount] =\n        String(arr[i][playCount]).substr(\n          0,\n          String(arr[i][playCount]).length - 4\n        ) + \"万\";\n    } else if (String(arr[i][playCount]).length == 5) {\n      arr[i][playCount] =\n        String(arr[i][playCount]).substr(0, 1) +\n        \".\" +\n        String(arr[i][playCount]).substr(1, 2) +\n        \"万\";\n    } else if (String(arr[i][playCount]).length == 9) {\n      arr[i][playCount] =\n        String(arr[i][playCount]).substr(0, 1) +\n        \".\" +\n        String(arr[i][playCount]).substr(1, 2) +\n        \"亿\";\n    } else if (String(arr[i][playCount]).length > 9) {\n      arr[i][playCount] =\n        String(arr[i][playCount]).substr(\n          0,\n          String(arr[i][playCount]).length - 8\n        ) + \"亿\";\n    }\n  }\n}\n\n//歌曲下载\nconst download = (src, filename) => {\n\n  //将http改成https，因为前端部署后，https请求http下载时会出现报错和无法下载，但本地前端请求时却可以下载的问题。\n  let httpssrc = src.replace(/^http:\\/\\//i, \"https://\");\n  //  先下载完成后再弹出浏览器窗口2\n  fetch(httpssrc).then(res => res.blob()).then(blob => {\n    const a = document.createElement('a');\n    document.body.appendChild(a)\n    a.style.display = 'none'\n    const url = window.URL.createObjectURL(blob);\n    a.href = url;//下载地址\n    a.download = `${filename}.mp3`;//下载文件名\n    a.click();//模拟点击，自动下载\n    document.body.removeChild(a)\n    window.URL.revokeObjectURL(url);\n  });\n\n}\n//获取当前时间戳\nconst getTimestamp = () => {\n  return new Date().getTime()\n}\n//生成(min,max)之间的随机整数（包含min,不包含max）\nconst randomRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n// Cookie Parser    将cookie解析\nconst cookieParser = (cookie) => {\n  let parserData = {};\n  (cookie || '').split(/;\\s+|(?<!\\s)\\s+$/g).forEach((pair) => {\n    let crack = pair.indexOf('=')\n    if (crack < 1 || crack == pair.length - 1) return\n    parserData[decodeURIComponent(pair.slice(0, crack)).trim()] = decodeURIComponent(\n      pair.slice(crack + 1),\n    ).trim()\n  })\n  return [parserData['HTTPOnly;MUSIC_U'], parserData['HTTPOnly;__csrf']]\n  /* \n  // console.log(parserData)\n  {\n    Expires: \"Sat, 17 Mar 2091 18:24:35 GMT\"\n    HTTPOnly;MUSIC_A_T: \"1481119727062\"\n    HTTPOnly;MUSIC_R_T: \"1481119757789\"\n    HTTPOnly;MUSIC_U: \"6bf80db2682091e66db7c358940e6034f555d03d999284f42033476c98e45796993166e004087dd3e30340b48322c4fd7a82616b73ff591e0195ea446a99c0ab92386fc4f57b0915a0d2166338885bd7\"\n    HTTPOnly;__csrf: \"a7ae33e29d089a9e30774e67bfd99367\"\n    MUSIC_A_T: \"1481119727062\"\n    Max-Age: \"2147483647\"\n    Path: \"/api/clientlog\"\n  }\n   */\n  //6bf80db2682091e66db7c358940e6034f555d03d999284f42033476c98e45796993166e004087dd3e30340b48322c4fd7a82616b73ff591e0195ea446a99c0ab92386fc4f57b0915a0d2166338885bd7\n}\n\n//深冻结\nconst deepFreeze = (obj) => {\n  // 获取所有属性\n  var propNames = Object.getOwnPropertyNames(obj)\n\n  // 遍历\n  propNames.forEach(item => {\n    var prop = obj[item]\n    // 如果某个属性的属性值是对象，则递归调用\n    if (prop instanceof Object && prop !== null) {\n      deepFreeze(prop)\n    }\n  })\n  // 冻结自身\n  return Object.freeze(obj)\n}\n\nmodule.exports = {\n  randomColor,\n  transtime,\n  transMusicTime,\n  transPlayCount,\n  download,\n  getTimestamp,\n  randomRange,\n  cookieParser,\n  deepFreeze,\n\n}"]},"metadata":{},"sourceType":"script"}