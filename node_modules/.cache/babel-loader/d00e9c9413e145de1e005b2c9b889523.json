{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Wacht/Desktop/git/cloudMusic-Source-Code/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"C:/Users/Wacht/Desktop/git/cloudMusic-Source-Code/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapMutations, mapState } from \"vuex\";\nimport { playMusic, listenMusic } from \"@/utils/musicPlay\";\nimport { getDownloadUrl as _getDownloadUrl } from \"@/api/api\";\nimport { download } from \"@/utils/commonApi\"; // import { Loading } from \"element-ui\";\n\nexport default {\n  data: function data() {\n    return {\n      // 试听歌曲\n      // audition:{\n      //   name: '卡农（经典钢琴版）', //歌曲名\n      //   artist: 'dylanf', //作者\n      //   // url: songUrlAdd,\n      //   url: `https://music.163.com/song/media/outer/url?id=478507889.mp3`,\n      //   cover: 'http://p2.music.126.net/fL7FAeRby1s7JreBqoOKjg==/109951165175371079.jpg',\n      //   // lrc: songlrc,\n      //   id: 478507889,\n      //   timer: true, //试听中添加，防止用户连点消耗性能，在添加播放列表方法中可使用到\n      // }\n      currentMusic: {},\n      //当前播放的音乐\n      aplayerDomLoading: false,\n      //是否正在获取aplayer播放器dom，有效利用资源，用于防卡顿一直获取\n      auditionDomLoading: false\n    };\n  },\n  computed: _objectSpread({}, mapState(\"aplayer\", [\"audio\", \"audition\", \"musicAudioStatu\"])),\n  created: function created() {\n    var _this = this;\n\n    //监听按键\n    window.addEventListener(\"keydown\", this.operaMusic); //每隔几秒钟获取一次当前播放的音乐id\n\n    var playlist = setInterval(function () {\n      //判断上一次是否获取完毕\n      if (!_this.aplayerDomLoading) {\n        _this.aplayerDomLoading = true; // 开始获取状态\n\n        var aplayer = null;\n        _this.musicAudioStatu === 0 ? aplayer = _this.$refs.aplayer : aplayer = _this.$refs.auditions; //判断获取哪个播放器的数据\n\n        var timeout = false; // 初始化超时标志为 false\n        // 设置一个超时定时器\n\n        var timeoutId = setTimeout(function () {\n          timeout = true;\n          _this.aplayerDomLoading = false; // 超时时重置状态\n        }, 1000); // 设置超时时间，单位为毫秒，根据实际情况进行调整\n        // 检查超时标志和获取状态\n\n        if (aplayer && aplayer.currentMusic && !timeout) {\n          _this.currentMusic = aplayer.currentMusic; //同步vuex中的正在播放歌曲的数据\n\n          _this.changeVuexCurrentMusic(aplayer.currentMusic);\n\n          _this.aplayerDomLoading = false;\n          clearTimeout(timeoutId); // 清除超时定时器\n        }\n      }\n    }, 2222);\n  },\n  beforeDestroy: function beforeDestroy() {//销毁按键监听\n    // window.removeEventListener('keydown', this.operaMusic);\n  },\n  methods: _objectSpread(_objectSpread({}, mapMutations(\"aplayer\", [\"deleteMUSIC\", \"deleteAUDITION\", \"changeAPLAYER\", \"changeCurrentPlayMusic\"])), {}, {\n    //播放指定歌曲\n    playMusic: function playMusic(idx) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var aplayer;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(_this2.musicAudioStatu === 1)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _context.next = 3;\n                return _this2.changeAPLAYER(0);\n\n              case 3:\n                aplayer = _this2.$refs.aplayer; //获取当前播放器\n                // console.log(aplayer.currentMusic.id)\n                // console.log(aplayer)\n\n                aplayer.switch(idx); //切换到播放当前下标的歌曲\n\n                aplayer.toggle(); //切换播放/暂停\n\n                _this2.currentMusic = aplayer.currentMusic; //将当前播放的音乐id记录\n                // console.log(this.currentMusicId)\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    //删除歌曲\n    deleteMusic: function deleteMusic(idx) {\n      // this.$store.commit('deleteMusic',idx)\n      this.deleteMUSIC(idx);\n    },\n    //试听的播放/暂停\n    playAudition: function playAudition() {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var auditions;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(_this3.musicAudioStatu === 0)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                _context2.next = 3;\n                return _this3.changeAPLAYER(1);\n\n              case 3:\n                auditions = _this3.$refs.auditions; //获取当前播放器\n                // console.log(auditions)\n                // auditions.switch(0); //切换到播放当前下标的歌曲\n\n                auditions.toggle(); //切换播放/暂停\n\n                _this3.currentMusic = auditions.currentMusic; //将当前播放的音乐记录\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    //按空格键，对音乐进行播放或者暂停\n    operaMusic: function operaMusic(event) {\n      // 首先判断事件目标是否为输入框\n      if (event.target.tagName.toLowerCase() !== \"input\") {\n        if (event.key === \" \") {\n          // console.log('按下了空格')\n          // console.log(this.musicAudioStatu)\n          if (this.musicAudioStatu === 0) {\n            //播放列表\n            var aplayer = this.$refs.aplayer; //获取当前播放器\n\n            aplayer.toggle(); //切换播放/暂停\n          } else {\n            var auditions = this.$refs.auditions; //获取当前播放器\n            // console.log(auditions)\n\n            auditions.toggle(); //切换播放/暂停\n          }\n        }\n      }\n    },\n    //删除试听\n    deleteAudition: function deleteAudition(idx) {\n      this.deleteAUDITION(idx);\n    },\n    //添加到播放列表\n    addListenMusic: function addListenMusic(songDetals) {\n      var that = this;\n      var songDetail = {\n        ar: [{\n          name: songDetals.artist\n        }],\n        al: {\n          picUrl: songDetals.cover\n        },\n        id: songDetals.id,\n        // url: songDetals.url,\n        name: songDetals.name,\n        timer: songDetals.timer\n      };\n      playMusic(songDetail, that);\n    },\n    //重置试听歌曲\n    resetAudition: function resetAudition() {\n      this.$store.commit(\"aplayer/addAUDITION\", {\n        name: \"卡农（经典钢琴版）\",\n        //歌曲名\n        artist: \"dylanf\",\n        //作者\n        // url: songUrlAdd,\n        url: \"https://music.163.com/song/media/outer/url?id=478507889.mp3\",\n        cover: \"http://p2.music.126.net/fL7FAeRby1s7JreBqoOKjg==/109951165175371079.jpg\",\n        // lrc: songlrc,\n        id: 478507889,\n        timer: true //试听中添加，防止用户连点消耗性能，在添加播放列表方法中可使用到\n\n      });\n    },\n    //获取歌曲下载地址\n    getDownloadUrl: function getDownloadUrl(currentMusic) {\n      var musicfilename = currentMusic.name + \" - \" + currentMusic.artist;\n      var that = this;\n      that.$message({\n        type: \"success\",\n        message: \"正在尝试下载\"\n      });\n      var params = {\n        id: currentMusic.id\n      };\n\n      _getDownloadUrl(params).then(function (res) {\n        // console.log('歌曲下载地址：', res.data)\n        // console.log(\"歌曲下载地址：\", res.data.data.url);\n        // download(res.data.data.url, songName)\n        download(res.data.data[0].url, musicfilename);\n        that.$message({\n          type: \"success\",\n          message: \"开始下载了\"\n        });\n      });\n    },\n    //同步vuex正在播放歌曲的数据\n    changeVuexCurrentMusic: function changeVuexCurrentMusic(musicData) {\n      //同步vuex中的正在播放歌曲的数据\n      this.$store.commit(\"aplayer/changeCurrentPlayMusic\", musicData);\n    }\n  })\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;AACA;AACA;AACA,6C,CACA;;AACA;AACAA,MADA,kBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,sBAZA;AAYA;AACAC,8BAbA;AAaA;AACAC;AAdA;AAgBA,GAlBA;AAmBAC,8BACAC,6DADA,CAnBA;AAsBAC,SAtBA,qBAsBA;AAAA;;AACA;AACAC,wDAFA,CAGA;;AACA;AACA;AACA;AACA,uCADA,CACA;;AACA;AACA,sGAHA,CAGA;;AACA,4BAJA,CAIA;AAEA;;AACA;AACAC;AACA,0CAFA,CAEA;AACA,SAHA,EAGA,IAHA,EAPA,CAUA;AAEA;;AACA;AACA,oDADA,CAGA;;AACA;;AAEA;AACAC,kCAPA,CAOA;AACA;AACA;AACA,KAzBA,EAyBA,IAzBA;AA0BA,GApDA;AAqDAC,eArDA,2BAqDA,CACA;AACA;AACA,GAxDA;AAyDAC,2CACAC,yBACA,aADA,EAEA,gBAFA,EAGA,eAHA,EAIA,wBAJA,EADA;AAQA;AACAC,aATA,qBASAC,GATA,EASA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEA,4BAFA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGA,uBAHA;;AAAA;AAKAC,uBALA,GAKA,oBALA,EAKA;AACA;AAEA;;AACAA,oCATA,CASA;;AACAA,iCAVA,CAUA;;AACA,2DAXA,CAWA;AACA;;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA,KAtBA;AAuBA;AACAC,eAxBA,uBAwBAF,GAxBA,EAwBA;AACA;AACA;AACA,KA3BA;AA4BA;AACAG,gBA7BA,0BA6BA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA,4BADA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAEA,uBAFA;;AAAA;AAIAC,yBAJA,GAIA,sBAJA,EAIA;AAEA;AACA;;AACAA,mCARA,CAQA;;AACA,6DATA,CASA;;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA,KAvCA;AAwCA;AACAC,cAzCA,sBAyCAC,KAzCA,EAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAFA,CAEA;;AACAL,6BAHA,CAGA;AACA,WAJA,MAIA;AACA,iDADA,CACA;AACA;;AACAG,+BAHA,CAGA;AACA;AACA;AACA;AACA,KA1DA;AA2DA;AACAG,kBA5DA,0BA4DAP,GA5DA,EA4DA;AACA;AACA,KA9DA;AA+DA;AACAQ,kBAhEA,0BAgEAC,UAhEA,EAgEA;AACA;AACA;AACAC,aACA;AACAC;AADA,SADA,CADA;AAMAC;AACAC;AADA,SANA;AASAC,yBATA;AAUA;AACAH,6BAXA;AAYAI;AAZA;AAcAhB;AACA,KAjFA;AAkFA;AACAiB,iBAnFA,2BAmFA;AACA;AACAL,yBADA;AACA;AACAM,wBAFA;AAEA;AACA;AACAC,0EAJA;AAKAC,eACA,yEANA;AAOA;AACAL,qBARA;AASAC,mBATA,CASA;;AATA;AAWA,KA/FA;AAgGA;AACAK,kBAjGA,0BAiGAjC,YAjGA,EAiGA;AACA;AACA;AACAkC;AACAC,uBADA;AAEAC;AAFA;AAIA;AACAT;AADA;;AAGAM;AACA;AACA;AACA;AACAI;AACAH;AACAC,yBADA;AAEAC;AAFA;AAIA,OATA;AAUA,KArHA;AAuHA;AACAE,0BAxHA,kCAwHAC,SAxHA,EAwHA;AACA;AACA;AACA;AA3HA;AAzDA","names":["data","currentMusic","aplayerDomLoading","auditionDomLoading","computed","mapState","created","window","timeout","clearTimeout","beforeDestroy","methods","mapMutations","playMusic","idx","aplayer","deleteMusic","playAudition","auditions","operaMusic","event","deleteAudition","addListenMusic","songDetals","ar","name","al","picUrl","id","timer","resetAudition","artist","url","cover","getDownloadUrl","that","type","message","download","changeVuexCurrentMusic","musicData"],"sourceRoot":"src/components","sources":["aplayer.vue"],"sourcesContent":["<template>\r\n  <!--music：当前播放的音乐。 list：播放列表 ：showlrc：是否显示歌词-->\r\n  <div id=\"aplayerWrap\" @keydown=\"operaMusic\">\r\n    <ul class=\"musicWrap\">\r\n      <div v-if=\"audio.length !== 0\" class=\"listTitle\">播放列表</div>\r\n      <div class=\"wrapShow\">\r\n        <li\r\n          class=\"musicLi\"\r\n          v-for=\"(item, index) in audio\"\r\n          :key=\"item.id\"\r\n          @click=\"playMusic(index)\"\r\n        >\r\n          <div\r\n            :style=\"{\r\n              color: item.id === currentMusic.id ? 'rgb(29, 236, 167)' : undefined ,\r\n            }\"\r\n          >\r\n            <span>{{ index + 1 }}.</span>&nbsp;\r\n            <span class=\"musicName\">{{ item.name }}</span>\r\n            <span class=\"artist\">{{ item.artist }}</span>\r\n            <span class=\"delete\" @click.stop=\"deleteMusic(index)\"\r\n              ><i class=\"el-icon-delete iconhover\"></i\r\n            ></span>\r\n          </div>\r\n        </li>\r\n      </div>\r\n    </ul>\r\n    <!-- <div class=\"audition\" v-if=\"audition.length !== 0\">\r\n      <div\r\n        class=\"inline-block\"\r\n        style=\"margin: 0 auto\"\r\n        v-for=\"(item, index) in audition\"\r\n        :key=\"item.id\"\r\n      >\r\n        <div class=\"auditionTitle\">正在试听:</div>\r\n        <div class=\"auditionMusic\" @click=\"playAudition(0)\">\r\n          <span class=\"inline-block auditionName\">{{ item.name }}</span>\r\n          <span class=\"inline-block auditionArtist\">{{ item.artist }}</span>\r\n\r\n          <span\r\n            class=\"inline-block auditionDelete\"\r\n            @click.stop=\"deleteAudition(index)\"\r\n            ><i class=\"el-icon-delete iconhover\"></i\r\n          ></span>\r\n          <span\r\n            class=\"inline-block auditionAdd\"\r\n            @click.stop=\"addListenMusic(item)\"\r\n            ><i class=\"el-icon-folder-add iconhover\"></i\r\n          ></span>\r\n        </div>\r\n      </div>\r\n    </div> -->\r\n    <div\r\n      style=\"position: relative\"\r\n      v-if=\"audio.length !== 0 && musicAudioStatu === 0\"\r\n    >\r\n      <aplayer\r\n        autoplay\r\n        ref=\"aplayer\"\r\n        :audio=\"audio\"\r\n        style=\"color: rgb(120, 120, 120)\"\r\n      >\r\n      </aplayer>\r\n      <span class=\"aplayeIcon\" @click=\"getDownloadUrl(currentMusic)\">\r\n        <i class=\"el-icon-download iconhover\"></i\r\n      ></span>\r\n    </div>\r\n\r\n    <div\r\n      style=\"position: relative\"\r\n      v-if=\"audition.length !== 0 && musicAudioStatu === 1\"\r\n    >\r\n      <aplayer\r\n        autoplay\r\n        ref=\"auditions\"\r\n        :audio=\"audition\"\r\n        :liric-type=\"1\"\r\n      ></aplayer>\r\n  \r\n       <span class=\"aplayeIcon\" @click=\"getDownloadUrl(currentMusic)\">\r\n        <i class=\"el-icon-download iconhover\"></i\r\n      ></span>\r\n\r\n      <span class=\"aplayeIcon1\" @click=\"resetAudition\">\r\n        <i class=\"el-icon-magic-stick iconhover\"></i\r\n      ></span>\r\n\r\n      <span class=\"aplayeIcon2\"  @click=\"addListenMusic(currentMusic)\">\r\n        <i class=\"el-icon-folder-add iconhover\"></i\r\n      ></span>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { mapMutations, mapState } from \"vuex\";\r\nimport { playMusic, listenMusic } from \"@/utils/musicPlay\";\r\nimport { getDownloadUrl } from \"@/api/api\";\r\nimport { download } from \"@/utils/commonApi\";\r\n// import { Loading } from \"element-ui\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      // 试听歌曲\r\n      // audition:{\r\n      //   name: '卡农（经典钢琴版）', //歌曲名\r\n      //   artist: 'dylanf', //作者\r\n      //   // url: songUrlAdd,\r\n      //   url: `https://music.163.com/song/media/outer/url?id=478507889.mp3`,\r\n      //   cover: 'http://p2.music.126.net/fL7FAeRby1s7JreBqoOKjg==/109951165175371079.jpg',\r\n      //   // lrc: songlrc,\r\n      //   id: 478507889,\r\n      //   timer: true, //试听中添加，防止用户连点消耗性能，在添加播放列表方法中可使用到\r\n      // }\r\n      currentMusic: {}, //当前播放的音乐\r\n      aplayerDomLoading: false, //是否正在获取aplayer播放器dom，有效利用资源，用于防卡顿一直获取\r\n      auditionDomLoading: false,\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState(\"aplayer\", [\"audio\", \"audition\", \"musicAudioStatu\"]),\r\n  },\r\n  created() {\r\n    //监听按键\r\n    window.addEventListener(\"keydown\", this.operaMusic);\r\n    //每隔几秒钟获取一次当前播放的音乐id\r\n    let playlist = setInterval(() => {\r\n      //判断上一次是否获取完毕\r\n      if (!this.aplayerDomLoading) {\r\n        this.aplayerDomLoading = true; // 开始获取状态\r\n        let aplayer = null;\r\n        this.musicAudioStatu === 0 ? ( aplayer =  this.$refs.aplayer) : (aplayer =  this.$refs.auditions);//判断获取哪个播放器的数据\r\n        let timeout = false; // 初始化超时标志为 false\r\n\r\n        // 设置一个超时定时器\r\n        let timeoutId = setTimeout(() => {\r\n          timeout = true;\r\n          this.aplayerDomLoading = false; // 超时时重置状态\r\n        }, 1000); // 设置超时时间，单位为毫秒，根据实际情况进行调整\r\n\r\n        // 检查超时标志和获取状态\r\n        if (aplayer && aplayer.currentMusic && !timeout) {\r\n          this.currentMusic = aplayer.currentMusic;\r\n          \r\n          //同步vuex中的正在播放歌曲的数据\r\n          this.changeVuexCurrentMusic(aplayer.currentMusic)\r\n\r\n          this.aplayerDomLoading = false;\r\n          clearTimeout(timeoutId); // 清除超时定时器\r\n        }\r\n      }\r\n    }, 2222);\r\n  },\r\n  beforeDestroy() {\r\n    //销毁按键监听\r\n    // window.removeEventListener('keydown', this.operaMusic);\r\n  },\r\n  methods: {\r\n    ...mapMutations(\"aplayer\", [\r\n      \"deleteMUSIC\",\r\n      \"deleteAUDITION\",\r\n      \"changeAPLAYER\",\r\n      \"changeCurrentPlayMusic\",\r\n    ]),\r\n\r\n    //播放指定歌曲\r\n    async playMusic(idx) {\r\n      //await,防止还未切换播放器就开始请求，使得aplayer出现undefine\r\n      if (this.musicAudioStatu === 1) {\r\n        await this.changeAPLAYER(0); //切换播放器\r\n      }\r\n      let aplayer = this.$refs.aplayer; //获取当前播放器\r\n      // console.log(aplayer.currentMusic.id)\r\n\r\n      // console.log(aplayer)\r\n      aplayer.switch(idx); //切换到播放当前下标的歌曲\r\n      aplayer.toggle(); //切换播放/暂停\r\n      this.currentMusic = aplayer.currentMusic; //将当前播放的音乐id记录\r\n      // console.log(this.currentMusicId)\r\n    },\r\n    //删除歌曲\r\n    deleteMusic(idx) {\r\n      // this.$store.commit('deleteMusic',idx)\r\n      this.deleteMUSIC(idx);\r\n    },\r\n    //试听的播放/暂停\r\n    async playAudition() {\r\n      if (this.musicAudioStatu === 0) {\r\n        await this.changeAPLAYER(1); //切换到试听播放器\r\n      }\r\n      let auditions = this.$refs.auditions; //获取当前播放器\r\n\r\n      // console.log(auditions)\r\n      // auditions.switch(0); //切换到播放当前下标的歌曲\r\n      auditions.toggle(); //切换播放/暂停\r\n      this.currentMusic = auditions.currentMusic; //将当前播放的音乐记录\r\n    },\r\n    //按空格键，对音乐进行播放或者暂停\r\n    operaMusic(event) {\r\n      // 首先判断事件目标是否为输入框\r\n      if (event.target.tagName.toLowerCase() !== \"input\") {\r\n        if (event.key === \" \") {\r\n          // console.log('按下了空格')\r\n          // console.log(this.musicAudioStatu)\r\n          if (this.musicAudioStatu === 0) {\r\n            //播放列表\r\n            let aplayer = this.$refs.aplayer; //获取当前播放器\r\n            aplayer.toggle(); //切换播放/暂停\r\n          } else {\r\n            let auditions = this.$refs.auditions; //获取当前播放器\r\n            // console.log(auditions)\r\n            auditions.toggle(); //切换播放/暂停\r\n          }\r\n        }\r\n      }\r\n    },\r\n    //删除试听\r\n    deleteAudition(idx) {\r\n      this.deleteAUDITION(idx);\r\n    },\r\n    //添加到播放列表\r\n    addListenMusic(songDetals) {\r\n      let that = this;\r\n      let songDetail = {\r\n        ar: [\r\n          {\r\n            name: songDetals.artist,\r\n          },\r\n        ],\r\n        al: {\r\n          picUrl: songDetals.cover,\r\n        },\r\n        id: songDetals.id,\r\n        // url: songDetals.url,\r\n        name: songDetals.name,\r\n        timer: songDetals.timer,\r\n      };\r\n      playMusic(songDetail, that);\r\n    },\r\n    //重置试听歌曲\r\n    resetAudition() {\r\n      this.$store.commit(\"aplayer/addAUDITION\", {\r\n        name: \"卡农（经典钢琴版）\", //歌曲名\r\n        artist: \"dylanf\", //作者\r\n        // url: songUrlAdd,\r\n        url: `https://music.163.com/song/media/outer/url?id=478507889.mp3`,\r\n        cover:\r\n          \"http://p2.music.126.net/fL7FAeRby1s7JreBqoOKjg==/109951165175371079.jpg\",\r\n        // lrc: songlrc,\r\n        id: 478507889,\r\n        timer: true, //试听中添加，防止用户连点消耗性能，在添加播放列表方法中可使用到\r\n      });\r\n    },\r\n    //获取歌曲下载地址\r\n    getDownloadUrl(currentMusic) {\r\n      let musicfilename = currentMusic.name + \" - \" + currentMusic.artist;\r\n      var that = this;\r\n      that.$message({\r\n        type: \"success\",\r\n        message: \"正在尝试下载\",\r\n      });\r\n      let params = {\r\n        id: currentMusic.id,\r\n      };\r\n      getDownloadUrl(params).then((res) => {\r\n        // console.log('歌曲下载地址：', res.data)\r\n        // console.log(\"歌曲下载地址：\", res.data.data.url);\r\n        // download(res.data.data.url, songName)\r\n        download(res.data.data[0].url, musicfilename);\r\n        that.$message({\r\n          type: \"success\",\r\n          message: \"开始下载了\",\r\n        });\r\n      });\r\n    },\r\n\r\n    //同步vuex正在播放歌曲的数据\r\n    changeVuexCurrentMusic(musicData) {\r\n      //同步vuex中的正在播放歌曲的数据\r\n          this.$store.commit(\"aplayer/changeCurrentPlayMusic\", musicData);\r\n    }\r\n  },\r\n};\r\n</script>\r\n<style lang=\"less\">\r\n.musicWrap {\r\n  position: fixed;\r\n  width: 400px;\r\n  max-height: 16px;\r\n  top: 0;\r\n  left: 0;\r\n  border-radius: 5px;\r\n  color: #ccc;\r\n  // background: rgba(243, 242, 242, 0.336);\r\n  overflow-x: hidden;\r\n\r\n  .listTitle {\r\n    // position: relative;\r\n    font-size: 13px;\r\n    text-align: center;\r\n    transition: 0.8s;\r\n    text-align: center;\r\n\r\n    &:hover {\r\n      // display: none;\r\n      cursor: default;\r\n      // color: rgb(253, 253, 253);\r\n      transform: scale(1.02);\r\n    }\r\n  }\r\n\r\n  .wrapShow {\r\n    width: 100%;\r\n    // max-height: 17px;\r\n    top: 8%;\r\n    left: 10px;\r\n    border-radius: 5px;\r\n    // color: rgba(48, 46, 46, 0.548) !important;\r\n    background: rgba(160, 160, 160, 0.096);\r\n    overflow-x: hidden;\r\n    transition: 0.8s;\r\n\r\n    &:hover {\r\n      // cursor: pointer;\r\n      max-height: 480px;\r\n      // color: rgb(30, 205, 236) !important;\r\n      // transform: scale(1.03);\r\n    }\r\n\r\n    &::-webkit-scrollbar {\r\n      display: none;\r\n    }\r\n\r\n    .musicLi {\r\n      position: relative;\r\n      padding: 2px 10px;\r\n      transition: 0.3s;\r\n\r\n      &:hover {\r\n        cursor: pointer;\r\n        color: rgb(29, 236, 167);\r\n        transform: scale(1.02);\r\n      }\r\n\r\n      // .musicName,\r\n      // .artist {\r\n      //   &:hover {\r\n      //     color: aquamarine;\r\n      //   }\r\n      // }\r\n      .artist {\r\n        position: absolute;\r\n        right: 35px;\r\n      }\r\n\r\n      .delete {\r\n        position: absolute;\r\n        right: 15px;\r\n      }\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    // cursor: pointer;\r\n    max-height: 500px;\r\n    // color: rgb(30, 205, 236);\r\n    // transform: scale(1.03);\r\n  }\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n}\r\n\r\n.iconhover {\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    color: rgb(238, 160, 57);\r\n  }\r\n}\r\n\r\n.aplayeIcon {\r\n  //播放器上的下载图标\r\n  position: absolute;\r\n  right: 57px;\r\n  top: 20px;\r\n}\r\n.aplayeIcon1 {\r\n  //播放器上的更换卡农歌曲图标\r\n  position: absolute;\r\n  right: 77px;\r\n  top: 20px;\r\n}\r\n.aplayeIcon2 {\r\n  //播放器上的添加到收藏图标\r\n  position: absolute;\r\n  right: 27px;\r\n  top: 40px;\r\n}\r\n\r\n.aplayer {\r\n  margin: 5px;\r\n  height: 66px;\r\n  overflow: hidden;\r\n  border-radius: 39px !important;\r\n  padding: 0 !important;\r\n  background: transparent !important;\r\n  box-shadow: 0 0 15px 5px #739cbdf1;\r\n  font-family: 仓耳渔阳体 !important;\r\n\r\n  .aplayer-body {\r\n    // background-image: url(../static/img/background8.jpeg);\r\n    // background-attachment: fixed;\r\n    // background-size: cover;\r\n\r\n    .aplayer-pic {\r\n      width: 66px;\r\n      height: 66px;\r\n      border-radius: 50% !important;\r\n\r\n      .aplayer-button {\r\n      }\r\n\r\n      .aplayer-play {\r\n      }\r\n    }\r\n\r\n    .aplayer-info {\r\n      // height: 66px;\r\n      border: 0px !important;\r\n\r\n      // background-image: url(../static/img/background8.jpeg);\r\n      .aplayer-music {\r\n        text-align: center;\r\n        font-size: 16px !important;\r\n\r\n        .aplayer-title {\r\n          color: #fff;\r\n        }\r\n\r\n        .aplayer-author {\r\n          color: #fff;\r\n        }\r\n      }\r\n\r\n      .aplayer-lrc {\r\n        .aplayer-lrc-contents {\r\n          .aplayer-lrc-current {\r\n          }\r\n        }\r\n      }\r\n\r\n      .aplayer-controller {\r\n        .aplayer-bar-wrap {\r\n          margin: 0 50px 0 0;\r\n\r\n          .aplayer-bar {\r\n            .aplayer-loaded {\r\n            }\r\n\r\n            .aplayer-played {\r\n              .aplayer-thumb {\r\n                .aplayer-loading-icon {\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        .aplayer-time {\r\n          right: 45px;\r\n\r\n          .aplayer-icon {\r\n            color: aliceblue;\r\n\r\n            path {\r\n              fill: #fff;\r\n            }\r\n          }\r\n\r\n          .aplayer-time-inner {\r\n            color: #fff;\r\n\r\n            .aplayer-ptime {\r\n            }\r\n\r\n            .aplayer-dtime {\r\n            }\r\n          }\r\n\r\n          .aplayer-icon-back {\r\n          }\r\n\r\n          .aplayer-icon-play {\r\n          }\r\n\r\n          .aplayer-icon-forward {\r\n          }\r\n\r\n          .aplayer-volume-wrap {\r\n            .aplayer-icon-volume-down {\r\n            }\r\n\r\n            .aplayer-volume-bar-wrap {\r\n              .aplayer-volume-bar {\r\n                .aplayer-volume {\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          .aplayer-icon-order {\r\n          }\r\n\r\n          .aplayer-icon-loop {\r\n          }\r\n\r\n          .aplayer-icon-menu {\r\n            display: none !important;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .aplayer-notice {\r\n    }\r\n\r\n    .aplayer-miniswitcher {\r\n      .aplayer-icon {\r\n      }\r\n\r\n      .aplayer-icon-miniswitcher {\r\n      }\r\n    }\r\n  }\r\n\r\n  .aplayer-list {\r\n    display: none !important;\r\n\r\n    .aplayer-list-light {\r\n      .aplayer-list-cur {\r\n      }\r\n\r\n      .aplayer-list-index {\r\n      }\r\n\r\n      .aplayer-list-title {\r\n      }\r\n\r\n      .aplayer-list-author {\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}