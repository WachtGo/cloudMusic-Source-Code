{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Wacht/Desktop/git/cloudMusic-Source-Code/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"C:/Users/Wacht/Desktop/git/cloudMusic-Source-Code/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapMutations, mapState } from \"vuex\";\nimport { playMusic, listenMusic } from \"@/utils/musicPlay\";\nimport { getDownloadUrl as _getDownloadUrl } from \"@/api/api\";\nimport { download } from \"@/utils/commonApi\"; // import { Loading } from \"element-ui\";\n\nexport default {\n  data: function data() {\n    return {\n      // 试听歌曲\n      // audition:{\n      //   name: '卡农（经典钢琴版）', //歌曲名\n      //   artist: 'dylanf', //作者\n      //   // url: songUrlAdd,\n      //   url: `https://music.163.com/song/media/outer/url?id=478507889.mp3`,\n      //   cover: 'http://p2.music.126.net/fL7FAeRby1s7JreBqoOKjg==/109951165175371079.jpg',\n      //   // lrc: songlrc,\n      //   id: 478507889,\n      //   timer: true, //试听中添加，防止用户连点消耗性能，在添加播放列表方法中可使用到\n      // }\n      currentMusic: {},\n      //当前播放的音乐\n      aplayerDomLoading: false,\n      //是否正在获取aplayer播放器dom，有效利用资源，用于防卡顿一直获取\n      auditionDomLoading: false\n    };\n  },\n  computed: _objectSpread({}, mapState(\"aplayer\", [\"audio\", \"audition\", \"musicAudioStatu\"])),\n  created: function created() {\n    var _this = this;\n\n    //监听按键\n    window.addEventListener(\"keydown\", this.operaMusic); //每隔几秒钟获取一次当前播放的音乐id\n\n    var playlist = setInterval(function () {\n      //判断上一次是否获取完毕\n      if (!_this.aplayerDomLoading) {\n        _this.aplayerDomLoading = true; // 开始获取状态\n\n        var aplayer = null;\n        _this.musicAudioStatu === 0 ? aplayer = _this.$refs.aplayer : aplayer = _this.$refs.auditions; //判断获取哪个播放器的数据\n\n        var timeout = false; // 初始化超时标志为 false\n        // 设置一个超时定时器\n\n        var timeoutId = setTimeout(function () {\n          timeout = true;\n          _this.aplayerDomLoading = false; // 超时时重置状态\n        }, 1000); // 设置超时时间，单位为毫秒，根据实际情况进行调整\n        // 检查超时标志和获取状态\n\n        if (aplayer && aplayer.currentMusic && !timeout) {\n          _this.currentMusic = aplayer.currentMusic; //同步vuex中的正在播放歌曲的数据\n\n          _this.changeVuexCurrentMusic(aplayer.currentMusic);\n\n          _this.aplayerDomLoading = false;\n          clearTimeout(timeoutId); // 清除超时定时器\n        }\n      }\n    }, 2222);\n  },\n  beforeDestroy: function beforeDestroy() {//销毁按键监听\n    // window.removeEventListener('keydown', this.operaMusic);\n  },\n  methods: _objectSpread(_objectSpread({}, mapMutations(\"aplayer\", [\"deleteMUSIC\", \"deleteAUDITION\", \"changeAPLAYER\", \"changeCurrentPlayMusic\"])), {}, {\n    //播放指定歌曲\n    playMusic: function playMusic(idx) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var aplayer;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(_this2.musicAudioStatu === 1)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _context.next = 3;\n                return _this2.changeAPLAYER(0);\n\n              case 3:\n                aplayer = _this2.$refs.aplayer; //获取当前播放器\n                // console.log(aplayer.currentMusic.id)\n                // console.log(aplayer)\n\n                aplayer.switch(idx); //切换到播放当前下标的歌曲\n\n                aplayer.toggle(); //切换播放/暂停\n\n                _this2.currentMusic = aplayer.currentMusic; //将当前播放的音乐id记录\n                // console.log(this.currentMusicId)\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    //删除歌曲\n    deleteMusic: function deleteMusic(idx) {\n      // this.$store.commit('deleteMusic',idx)\n      this.deleteMUSIC(idx);\n    },\n    //试听的播放/暂停\n    playAudition: function playAudition() {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var auditions;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(_this3.musicAudioStatu === 0)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                _context2.next = 3;\n                return _this3.changeAPLAYER(1);\n\n              case 3:\n                auditions = _this3.$refs.auditions; //获取当前播放器\n                // console.log(auditions)\n                // auditions.switch(0); //切换到播放当前下标的歌曲\n\n                auditions.toggle(); //切换播放/暂停\n\n                _this3.currentMusic = auditions.currentMusic; //将当前播放的音乐记录\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    //按空格键，对音乐进行播放或者暂停\n    operaMusic: function operaMusic(event) {\n      // 首先判断事件目标是否为输入框\n      if (event.target.tagName.toLowerCase() !== \"input\") {\n        if (event.key === \" \") {\n          // console.log('按下了空格')\n          // console.log(this.musicAudioStatu)\n          if (this.musicAudioStatu === 0) {\n            //播放列表\n            var aplayer = this.$refs.aplayer; //获取当前播放器\n\n            aplayer.toggle(); //切换播放/暂停\n          } else {\n            var auditions = this.$refs.auditions; //获取当前播放器\n            // console.log(auditions)\n\n            auditions.toggle(); //切换播放/暂停\n          }\n        }\n      }\n    },\n    //删除试听\n    deleteAudition: function deleteAudition(idx) {\n      this.deleteAUDITION(idx);\n    },\n    //添加到播放列表\n    addListenMusic: function addListenMusic(songDetals) {\n      var that = this;\n      var songDetail = {\n        ar: [{\n          name: songDetals.artist\n        }],\n        al: {\n          picUrl: songDetals.cover\n        },\n        id: songDetals.id,\n        // url: songDetals.url,\n        name: songDetals.name,\n        timer: songDetals.timer\n      };\n      playMusic(songDetail, that);\n    },\n    //重置试听歌曲\n    resetAudition: function resetAudition() {\n      this.$store.commit(\"aplayer/addAUDITION\", {\n        name: \"卡农（经典钢琴版）\",\n        //歌曲名\n        artist: \"dylanf\",\n        //作者\n        // url: songUrlAdd,\n        url: \"https://music.163.com/song/media/outer/url?id=478507889.mp3\",\n        cover: \"http://p2.music.126.net/fL7FAeRby1s7JreBqoOKjg==/109951165175371079.jpg\",\n        // lrc: songlrc,\n        id: 478507889,\n        timer: true //试听中添加，防止用户连点消耗性能，在添加播放列表方法中可使用到\n\n      });\n    },\n    //获取歌曲下载地址\n    getDownloadUrl: function getDownloadUrl(currentMusic) {\n      var musicfilename = currentMusic.name + \" - \" + currentMusic.artist;\n      var that = this;\n      that.$message({\n        type: \"success\",\n        message: \"正在尝试下载\"\n      });\n      var params = {\n        id: currentMusic.id\n      };\n\n      _getDownloadUrl(params).then(function (res) {\n        // console.log('歌曲下载地址：', res.data)\n        // console.log(\"歌曲下载地址：\", res.data.data.url);\n        // download(res.data.data.url, songName)\n        download(res.data.data[0].url, musicfilename);\n        that.$message({\n          type: \"success\",\n          message: \"开始下载了\"\n        });\n      });\n    },\n    //同步vuex正在播放歌曲的数据\n    changeVuexCurrentMusic: function changeVuexCurrentMusic(musicData) {\n      //同步vuex中的正在播放歌曲的数据\n      this.$store.commit(\"aplayer/changeCurrentPlayMusic\", musicData);\n    }\n  })\n};","map":null,"metadata":{},"sourceType":"module"}