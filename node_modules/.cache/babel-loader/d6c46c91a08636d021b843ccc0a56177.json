{"ast":null,"code":"import _asyncToGenerator from \"D:/data/\\u684C\\u9762/git/cloudMusic-Source-Code/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"D:/data/\\u684C\\u9762/git/cloudMusic-Source-Code/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport QRCode from \"qrcode\";\nimport { getqrKey, getqrImg, getqrStatus as _getqrStatus, getloginStatus as _getloginStatus, loginOut as _loginOut } from \"@/api/login\";\nimport { mapMutations, mapState } from \"vuex\";\nimport { getuserDetail as _getuserDetail, getAccount } from \"@/api/user\";\nimport { cookieParser, getTimestamp } from \"@/utils/commonApi\";\nimport { getCookie, removeCookie, setCookie } from \"@/utils/cookie\";\nexport default {\n  name: \"Login\",\n  data: function data() {\n    return {\n      // loginWrapShow: false, //展示登录窗口\n      qrStatus: \"\",\n      qrtimer: null,\n      key: \"\",\n      user: {\n        avatarUrl: \"\",\n        nickname: \"\"\n      } // loginStatus: false,\n\n    };\n  },\n  computed: _objectSpread({}, mapState(\"login\", [\"loginWrapShow\", \"loginStatus\"])),\n  watch: {\n    loginWrapShow: function () {\n      var _loginWrapShow = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var that, adom;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                that = this;\n\n                if (!that.loginWrapShow) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                console.log(document);\n                _context2.next = 5;\n                return document.getElementById(\"qrStatus\");\n\n              case 5:\n                adom = _context2.sent;\n                console.log(\"adom\", adom);\n                that.qrtimer = setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return adom.click();\n\n                        case 2:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })), 1000);\n                _context2.next = 12;\n                break;\n\n              case 10:\n                clearInterval(that.qrtimer);\n                console.log(\"扫码登录成功\");\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loginWrapShow() {\n        return _loginWrapShow.apply(this, arguments);\n      }\n\n      return loginWrapShow;\n    }()\n  },\n  mounted: function mounted() {\n    this.getloginStatus();\n  },\n  methods: _objectSpread(_objectSpread({}, mapMutations(\"login\", [\"loginWrapOnOff\", \"loginStatusOnOff\"])), {}, {\n    ceshi: function ceshi() {\n      var a = \"MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/api/feedback; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/neapi/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/api/clientlog; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/wapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/wapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/api/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/weapi/clientlog; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/neapi/clientlog; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/openapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/neapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/eapi/clientlog; HTTPOnly;MUSIC_SNS=; Max-Age=0; Expires=Mon, 27 Feb 2023 15:10:28 GMT; Path=/;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/weapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/openapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/wapi/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/neapi/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/weapi/feedback; HTTPOnly;__csrf=a7ae33e29d089a9e30774e67bfd99367; Max-Age=1296010; Expires=Tue, 14 Mar 2023 15:10:38 GMT; Path=/;;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/eapi/clientlog; HTTPOnly;MUSIC_U=6bf80db2682091e66db7c358940e6034f555d03d999284f42033476c98e45796993166e004087dd3e30340b48322c4fd7a82616b73ff591e0195ea446a99c0ab92386fc4f57b0915a0d2166338885bd7; Max-Age=15552000; Expires=Sat, 26 Aug 2023 15:10:28 GMT; Path=/; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/wapi/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/eapi/feedback; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/eapi/feedback; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/weapi/feedback; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/api/clientlog; HTTPOnly\";\n      var cookies = cookieParser(a); //两个都设置上才能请求成功\n\n      setCookie(\"MUSIC_U\", cookies[0]);\n      setCookie(\"__csrf\", cookies[1]);\n    },\n    goLogin: function goLogin() {\n      //点击登录，获取二维码\n      this.loginWrapOnOff(true);\n      this.refreshQr();\n    },\n    //生成二维码\n    getQRCode: function getQRCode(qrurl) {\n      var opts = {\n        errorCorrectionLevel: \"H\",\n        //容错级别\n        type: \"image/png\",\n        //生成的二维码类型\n        quality: 0.3,\n        //二维码质量\n        margin: 5,\n        //二维码留白边距\n        width: 180,\n        //宽\n        height: 180,\n        //高\n        text: \"\",\n        //二维码内容\n        color: {\n          dark: \"#333333\",\n          //前景色\n          light: \"#fff\" //背景色\n\n        }\n      };\n      this.QRCodeMsg = qrurl; //生成的二维码为URL地址js\n\n      var msg = document.getElementById(\"QRCode_header\"); // 将获取到的数据（val）画到msg（canvas）上\n\n      QRCode.toCanvas(msg, this.QRCodeMsg, opts, function (error) {// console.log(error)\n      });\n    },\n    //  获取/刷新二维码\n    refreshQr: function refreshQr() {\n      var _this = this;\n\n      var params = {\n        timestamp: getTimestamp()\n      }; // console.log(params.timestamp)\n\n      getqrKey(params).then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(res) {\n          var params;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return res.data.data.unikey;\n\n                case 2:\n                  _this.key = _context3.sent;\n                  params = {\n                    key: res.data.data.unikey // timestamp: getTimestamp()\n\n                  };\n                  getqrImg(params).then(function (res) {\n                    // console.log(res.data.data.qrurl);\n                    _this.getQRCode(res.data.data.qrurl);\n                  });\n\n                case 5:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n    // 二维码状态\n    getqrStatus: function getqrStatus() {\n      var _this2 = this;\n\n      var params = {\n        key: this.key,\n        timestamp: getTimestamp()\n      };\n\n      _getqrStatus(params).then( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(res) {\n          var cookies;\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return res.data.message;\n\n                case 2:\n                  _this2.qrStatus = _context5.sent;\n\n                  // console.log(this.qrStatus);\n                  if (res.data.code === 803) {\n                    _this2.qrStatus += \",1s后自动关闭\"; // console.log(\"登录成功：--\", res);、\n                    // this.$store.commit(\"setTOKEN\", res.data.cookie);\n\n                    cookies = cookieParser(res.data.cookie); //两个都设置上才能请求成功\n\n                    setCookie(\"MUSIC_U\", cookies[0]);\n                    setCookie(\"__csrf\", cookies[1]);\n                    setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n                      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                        while (1) {\n                          switch (_context4.prev = _context4.next) {\n                            case 0:\n                              _context4.next = 2;\n                              return _this2.loginWrapOnOff(false);\n\n                            case 2:\n                            case \"end\":\n                              return _context4.stop();\n                          }\n                        }\n                      }, _callee4);\n                    })), 1000);\n\n                    _this2.getloginStatus();\n                  } else if (res.data.code === 800) {\n                    _this2.qrStatus += \",请刷新获取\";\n                  }\n\n                case 4:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function (_x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    },\n    //获取登录状态\n    getloginStatus: function getloginStatus() {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _this3.loginWrapOnOff(true);\n\n                console.log(_this3.loginWrapShow);\n\n                _this3.loginStatusOnOff(true);\n\n                console.log(_this3.loginStatusOnOff); // let cookie =\n                //   \"MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/api/feedback; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/neapi/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/api/clientlog; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/wapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/wapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/api/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/weapi/clientlog; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/neapi/clientlog; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/openapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/neapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/eapi/clientlog; HTTPOnly;MUSIC_SNS=; Max-Age=0; Expires=Mon, 27 Feb 2023 15:10:28 GMT; Path=/;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/weapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/openapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/wapi/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/neapi/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/weapi/feedback; HTTPOnly;__csrf=a7ae33e29d089a9e30774e67bfd99367; Max-Age=1296010; Expires=Tue, 14 Mar 2023 15:10:38 GMT; Path=/;;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/eapi/clientlog; HTTPOnly;MUSIC_U=6bf80db2682091e66db7c358940e6034f555d03d999284f42033476c98e45796993166e004087dd3e30340b48322c4fd7a82616b73ff591e0195ea446a99c0ab92386fc4f57b0915a0d2166338885bd7; Max-Age=15552000; Expires=Sat, 26 Aug 2023 15:10:28 GMT; Path=/; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/wapi/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/eapi/feedback; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/eapi/feedback; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/weapi/feedback; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/api/clientlog; HTTPOnly\";\n                // let parserData = cookieParser(cookie);\n                // Cookies.set(\"MUSIC_U\", parserData, { expires: 1 }); //1天有效期\n\n                if (!(getCookie(\"MUSIC_U\") && getCookie(\"__csrf\"))) {\n                  _context7.next = 11;\n                  break;\n                }\n\n                _context7.next = 7;\n                return _this3.loginStatusOnOff(true);\n\n              case 7:\n                console.log(_this3.loginWrapShow);\n\n                _this3.$message({\n                  type: \"success\",\n                  message: \"已登录\"\n                });\n\n                _context7.next = 14;\n                break;\n\n              case 11:\n                _this3.$message({\n                  type: \"error\",\n                  message: \"当前未登录\"\n                });\n\n                _this3.loginStatusOnOff(false);\n\n                _this3.user = {};\n\n              case 14:\n                _context7.next = 16;\n                return getAccount().then(function (res) {});\n\n              case 16:\n                _getloginStatus().then( /*#__PURE__*/function () {\n                  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(res) {\n                    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n                      while (1) {\n                        switch (_context6.prev = _context6.next) {\n                          case 0:\n                            if (!res.data.profile) {\n                              _context6.next = 5;\n                              break;\n                            }\n\n                            _context6.next = 3;\n                            return res.data.data.profile;\n\n                          case 3:\n                            _this3.user = _context6.sent;\n\n                            _this3.loginStatusOnOff(true);\n\n                          case 5:\n                          case \"end\":\n                            return _context6.stop();\n                        }\n                      }\n                    }, _callee6);\n                  }));\n\n                  return function (_x3) {\n                    return _ref5.apply(this, arguments);\n                  };\n                }());\n\n              case 17:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }))();\n    },\n    //退出登录\n    loginOut: function loginOut() {\n      var _this4 = this;\n\n      _loginOut().then(function (res) {\n        // this.$store.commit(\"removeTOKEN\", \"token\");\n        _this4.loginStatusOnOff(false);\n\n        removeCookie(\"MUSIC_U\");\n        removeCookie(\"__csrf\");\n\n        _this4.getloginStatus(); //获取登陆状态\n\n      });\n    },\n    //获取账户信息-需要与获取登陆状态api都调用，才会真实的刷新登陆状态\n    // getAccount() {\n    //   getAccount().then((res) => {\n    //     console.log(\"账号信息---：\", res.data.profile);\n    //   });\n    // },\n    // 获取用户详情\n    getuserDetail: function getuserDetail() {\n      // 374598092 Wacht丶T\n      _getuserDetail({\n        uid: 374598092\n      }).then(function (res) {\n        console.log(\"用户详情---：\", res);\n      });\n    }\n  })\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AACA,SACAA,QADA,EAEAC,QAFA,EAGAC,2BAHA,EAIAC,iCAJA,EAKAC,qBALA,QAMA,aANA;AAOA;AACA;AACA;AACA;AAEA;AACAC,eADA;AAEAC,MAFA,kBAEA;AACA;AACA;AACAC,kBAFA;AAGAC,mBAHA;AAIAC,aAJA;AAKAC;AACAC,qBADA;AAEAC;AAFA,OALA,CASA;;AATA;AAWA,GAdA;AAeAC,8BACAC,mDADA,CAfA;AAkBAC;AACAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAC,oBADA,GACA,IADA;;AAAA,qBAEAA,kBAFA;AAAA;AAAA;AAAA;;AAGAC;AAHA;AAAA,uBAIAC,mCAJA;;AAAA;AAIAC,oBAJA;AAKAF;AACAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACAG,YADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGA,IAHA;AANA;AAAA;;AAAA;AAWAC;AACAH;;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADA,GAlBA;AAmCAI,SAnCA,qBAmCA;AACA;AACA,GArCA;AAsCAC,2CACAC,6DADA;AAEAC,SAFA,mBAEA;AACA,cACA,q4FADA;AAGA,oCAJA,CAKA;;AACAC;AACAA;AACA,KAVA;AAWAC,WAXA,qBAWA;AACA;AACA;AACA;AACA,KAfA;AAgBA;AACAC,aAjBA,qBAiBAC,KAjBA,EAiBA;AACA;AACAC,iCADA;AACA;AACAC,yBAFA;AAEA;AACAC,oBAHA;AAGA;AACAC,iBAJA;AAIA;AACAC,kBALA;AAKA;AACAC,mBANA;AAMA;AACAC,gBAPA;AAOA;AACAC;AACAC,yBADA;AACA;AACAC,uBAFA,CAEA;;AAFA;AARA;AAaA,6BAdA,CAcA;;AACA,yDAfA,CAgBA;;AACAC,mEACA;AACA,OAFA;AAGA,KArCA;AAsCA;AACAC,aAvCA,uBAuCA;AAAA;;AACA;AACAC;AADA,QADA,CAIA;;AACA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACA2C,oBADA;;AAAA;AACA,2BADA;AAEAC,wBAFA,GAEA;AACAnC,6CADA,CAEA;;AAFA,mBAFA;AAMAR;AACA;AACA;AACA,mBAHA;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWA,KAvDA;AAwDA;AACAC,eAzDA,yBAyDA;AAAA;;AACA;AACAO,qBADA;AAEAiC;AAFA;;AAIAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEAyC,gBAFA;;AAAA;AAEA,iCAFA;;AAGA;AACA;AACA,kDADA,CAGA;AACA;;AACAE,2BALA,GAKAC,6BALA,EAMA;;AACApB;AACAA;AACAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCACA,4BADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEA,IAFA;;AAGA;AACA,mBAbA,MAaA;AACA;AACA;;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAqBA,KAnFA;AAqFA;AACA5C,kBAtFA,4BAsFA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACAe;;AACA;;AACAA,qDAJA,CAKA;AACA;AACA;AACA;;AARA,sBASA8B,2CATA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAUA,6BAVA;;AAAA;AAWA9B;;AACA;AACAa,iCADA;AAEAkB;AAFA;;AAZA;AAAA;;AAAA;AAiBA;AACAlB,+BADA;AAEAkB;AAFA;;AAIA;;AACA;;AAtBA;AAAA;AAAA,uBAyBAC,oCAzBA;;AAAA;AA0BA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAEAwC,gBAFA;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAGAA,qBAHA;;AAAA;AAGA,uCAHA;;AAIA;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiCA,KAvHA;AAwHA;AACAvC,YAzHA,sBAyHA;AAAA;;AACAA;AACA;AACA;;AACA+C;AACAA;;AACA,gCALA,CAKA;;AACA,OANA;AAOA,KAjIA;AAkIA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,iBAzIA,2BAyIA;AACA;AACAA;AAAAC;AAAA;AACAnC;AACA,OAFA;AAGA;AA9IA;AAtCA","names":["getqrKey","getqrImg","getqrStatus","getloginStatus","loginOut","name","data","qrStatus","qrtimer","key","user","avatarUrl","nickname","computed","mapState","watch","loginWrapShow","that","console","document","adom","clearInterval","mounted","methods","mapMutations","ceshi","setCookie","goLogin","getQRCode","qrurl","errorCorrectionLevel","type","quality","margin","width","height","text","color","dark","light","QRCode","refreshQr","timestamp","res","params","cookies","cookieParser","setTimeout","getCookie","message","getAccount","removeCookie","getuserDetail","uid"],"sourceRoot":"src/components/login","sources":["index.vue"],"sourcesContent":["<template>\r\n  <!-- 暂时开启该功能 -->\r\n  <div>\r\n    <div v-if=\"!loginStatus\" class=\"login\" @click=\"goLogin\">登录</div>\r\n    <div v-if=\"loginStatus\" class=\"user\">\r\n      <img class=\"userAvatar\" :src=\"user.avatarUrl\" alt=\"\" /><span>{{\r\n        user.nickname\r\n      }}</span>\r\n    </div>\r\n    <el-button style=\"color: black\" @click=\"getloginStatus\"\r\n      >登录状态获取</el-button\r\n    >\r\n    <button @click=\"ceshi\">登录,测试</button>\r\n    <el-button style=\"color: black\" @click=\"loginOut\">退出登录</el-button>\r\n    <el-button style=\"color: black\" @click=\"getuserDetail\"\r\n      >获取用户详情</el-button\r\n    >\r\n    <!-- <el-button style=\"color: black\" @click=\"getAccount\">获取账号信息</el-button> -->\r\n    <div class=\"loginWrap\" v-show=\"loginWrapShow\">\r\n      <p class=\"loginClose\" @click=\"loginWrapOnOff(false)\">\r\n        <i class=\"el-icon-close\"></i>\r\n      </p>\r\n      <div class=\"imgWrap\">\r\n        <canvas id=\"QRCode_header\"></canvas>\r\n      </div>\r\n      <p class=\"refreshQr\"><span @click=\"refreshQr\">刷新二维码</span></p>\r\n      <p id=\"qrStatus\" @click=\"getqrStatus\">{{ qrStatus }}</p>\r\n      <p class=\"enter\" @click=\"getqrStatus\">扫码确认登录后，点击此处进入</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport QRCode from \"qrcode\";\r\nimport {\r\n  getqrKey,\r\n  getqrImg,\r\n  getqrStatus,\r\n  getloginStatus,\r\n  loginOut,\r\n} from \"@/api/login\";\r\nimport { mapMutations, mapState } from \"vuex\";\r\nimport { getuserDetail, getAccount } from \"@/api/user\";\r\nimport { cookieParser, getTimestamp } from \"@/utils/commonApi\";\r\nimport { getCookie, removeCookie, setCookie } from \"@/utils/cookie\";\r\n\r\nexport default {\r\n  name: \"Login\",\r\n  data() {\r\n    return {\r\n      // loginWrapShow: false, //展示登录窗口\r\n      qrStatus: \"\",\r\n      qrtimer: null,\r\n      key: \"\",\r\n      user: {\r\n        avatarUrl: \"\",\r\n        nickname: \"\",\r\n      },\r\n      // loginStatus: false,\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState(\"login\", [\"loginWrapShow\", \"loginStatus\"]),\r\n  },\r\n  watch: {\r\n    loginWrapShow: async function () {\r\n      var that = this;\r\n      if (that.loginWrapShow) {\r\n        console.log(document);\r\n        let adom = await document.getElementById(\"qrStatus\");\r\n        console.log(\"adom\", adom);\r\n        that.qrtimer = setInterval(async () => {\r\n          await adom.click();\r\n          // console.log(\"刷新\");\r\n        }, 1000);\r\n      } else {\r\n        clearInterval(that.qrtimer);\r\n        console.log(\"扫码登录成功\");\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.getloginStatus();\r\n  },\r\n  methods: {\r\n    ...mapMutations(\"login\", [\"loginWrapOnOff\", \"loginStatusOnOff\"]),\r\n    ceshi() {\r\n      let a =\r\n        \"MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/api/feedback; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/neapi/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/api/clientlog; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/wapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/wapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/api/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/weapi/clientlog; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/neapi/clientlog; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/openapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/neapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/eapi/clientlog; HTTPOnly;MUSIC_SNS=; Max-Age=0; Expires=Mon, 27 Feb 2023 15:10:28 GMT; Path=/;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/weapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/openapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/wapi/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/neapi/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/weapi/feedback; HTTPOnly;__csrf=a7ae33e29d089a9e30774e67bfd99367; Max-Age=1296010; Expires=Tue, 14 Mar 2023 15:10:38 GMT; Path=/;;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/eapi/clientlog; HTTPOnly;MUSIC_U=6bf80db2682091e66db7c358940e6034f555d03d999284f42033476c98e45796993166e004087dd3e30340b48322c4fd7a82616b73ff591e0195ea446a99c0ab92386fc4f57b0915a0d2166338885bd7; Max-Age=15552000; Expires=Sat, 26 Aug 2023 15:10:28 GMT; Path=/; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/wapi/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/eapi/feedback; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/eapi/feedback; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/weapi/feedback; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/api/clientlog; HTTPOnly\";\r\n\r\n      let cookies = cookieParser(a);\r\n      //两个都设置上才能请求成功\r\n      setCookie(\"MUSIC_U\", cookies[0]);\r\n      setCookie(\"__csrf\", cookies[1]);\r\n    },\r\n    goLogin() {\r\n      //点击登录，获取二维码\r\n      this.loginWrapOnOff(true);\r\n      this.refreshQr();\r\n    },\r\n    //生成二维码\r\n    getQRCode(qrurl) {\r\n      let opts = {\r\n        errorCorrectionLevel: \"H\", //容错级别\r\n        type: \"image/png\", //生成的二维码类型\r\n        quality: 0.3, //二维码质量\r\n        margin: 5, //二维码留白边距\r\n        width: 180, //宽\r\n        height: 180, //高\r\n        text: \"\", //二维码内容\r\n        color: {\r\n          dark: \"#333333\", //前景色\r\n          light: \"#fff\", //背景色\r\n        },\r\n      };\r\n      this.QRCodeMsg = qrurl; //生成的二维码为URL地址js\r\n      let msg = document.getElementById(\"QRCode_header\");\r\n      // 将获取到的数据（val）画到msg（canvas）上\r\n      QRCode.toCanvas(msg, this.QRCodeMsg, opts, function (error) {\r\n        // console.log(error)\r\n      });\r\n    },\r\n    //  获取/刷新二维码\r\n    refreshQr() {\r\n      let params = {\r\n        timestamp: getTimestamp(),\r\n      };\r\n      // console.log(params.timestamp)\r\n      getqrKey(params).then(async (res) => {\r\n        this.key = await res.data.data.unikey;\r\n        let params = {\r\n          key: res.data.data.unikey,\r\n          // timestamp: getTimestamp()\r\n        };\r\n        getqrImg(params).then((res) => {\r\n          // console.log(res.data.data.qrurl);\r\n          this.getQRCode(res.data.data.qrurl);\r\n        });\r\n      });\r\n    },\r\n    // 二维码状态\r\n    getqrStatus() {\r\n      let params = {\r\n        key: this.key,\r\n        timestamp: getTimestamp(),\r\n      };\r\n      getqrStatus(params).then(async (res) => {\r\n        // console.log(res);\r\n        this.qrStatus = await res.data.message;\r\n        // console.log(this.qrStatus);\r\n        if (res.data.code === 803) {\r\n          this.qrStatus += \",1s后自动关闭\";\r\n\r\n          // console.log(\"登录成功：--\", res);、\r\n          // this.$store.commit(\"setTOKEN\", res.data.cookie);\r\n          let cookies = cookieParser(res.data.cookie);\r\n          //两个都设置上才能请求成功\r\n          setCookie(\"MUSIC_U\", cookies[0]);\r\n          setCookie(\"__csrf\", cookies[1]);\r\n          setTimeout(async () => {\r\n            await this.loginWrapOnOff(false); //关闭登录窗口\r\n          }, 1000);\r\n          this.getloginStatus();\r\n        } else if (res.data.code === 800) {\r\n          this.qrStatus += \",请刷新获取\";\r\n        }\r\n      });\r\n    },\r\n\r\n    //获取登录状态\r\n    async getloginStatus() {\r\n      this.loginWrapOnOff(true);\r\n      console.log(this.loginWrapShow);\r\n      this.loginStatusOnOff(true);\r\n      console.log(this.loginStatusOnOff);\r\n      // let cookie =\r\n      //   \"MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/api/feedback; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/neapi/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/api/clientlog; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/wapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/wapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/api/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/weapi/clientlog; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/neapi/clientlog; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/openapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/neapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/eapi/clientlog; HTTPOnly;MUSIC_SNS=; Max-Age=0; Expires=Mon, 27 Feb 2023 15:10:28 GMT; Path=/;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/weapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/openapi/clientlog; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/wapi/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/neapi/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/weapi/feedback; HTTPOnly;__csrf=a7ae33e29d089a9e30774e67bfd99367; Max-Age=1296010; Expires=Tue, 14 Mar 2023 15:10:38 GMT; Path=/;;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/eapi/clientlog; HTTPOnly;MUSIC_U=6bf80db2682091e66db7c358940e6034f555d03d999284f42033476c98e45796993166e004087dd3e30340b48322c4fd7a82616b73ff591e0195ea446a99c0ab92386fc4f57b0915a0d2166338885bd7; Max-Age=15552000; Expires=Sat, 26 Aug 2023 15:10:28 GMT; Path=/; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/wapi/feedback; HTTPOnly;MUSIC_A_T=1481119727062; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/eapi/feedback; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/eapi/feedback; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/weapi/feedback; HTTPOnly;MUSIC_R_T=1481119757789; Max-Age=2147483647; Expires=Sat, 17 Mar 2091 18:24:35 GMT; Path=/api/clientlog; HTTPOnly\";\r\n      // let parserData = cookieParser(cookie);\r\n      // Cookies.set(\"MUSIC_U\", parserData, { expires: 1 }); //1天有效期\r\n      if (getCookie(\"MUSIC_U\") && getCookie(\"__csrf\")) {\r\n        await this.loginStatusOnOff(true);\r\n        console.log(this.loginWrapShow);\r\n        this.$message({\r\n          type: \"success\",\r\n          message: \"已登录\",\r\n        });\r\n      } else {\r\n        this.$message({\r\n          type: \"error\",\r\n          message: \"当前未登录\",\r\n        });\r\n        this.loginStatusOnOff(false);\r\n        this.user = {};\r\n      }\r\n      //(获取账户信息-获取登陆状态)api需要都调用，才会真实的刷新登陆状态,所以不管第一个的结果怎么样，第二个调用的api结果一定为真实\r\n      await getAccount().then((res) => {});\r\n      getloginStatus().then(async (res) => {\r\n        // console.log(res.data);\r\n        if (res.data.profile) {\r\n          this.user = await res.data.data.profile;\r\n          this.loginStatusOnOff(true);\r\n        }\r\n      });\r\n    },\r\n    //退出登录\r\n    loginOut() {\r\n      loginOut().then((res) => {\r\n        // this.$store.commit(\"removeTOKEN\", \"token\");\r\n        this.loginStatusOnOff(false);\r\n        removeCookie(\"MUSIC_U\");\r\n        removeCookie(\"__csrf\");\r\n        this.getloginStatus(); //获取登陆状态\r\n      });\r\n    },\r\n    //获取账户信息-需要与获取登陆状态api都调用，才会真实的刷新登陆状态\r\n    // getAccount() {\r\n    //   getAccount().then((res) => {\r\n    //     console.log(\"账号信息---：\", res.data.profile);\r\n    //   });\r\n    // },\r\n    // 获取用户详情\r\n    getuserDetail() {\r\n      // 374598092 Wacht丶T\r\n      getuserDetail({ uid: 374598092 }).then((res) => {\r\n        console.log(\"用户详情---：\", res);\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.login,\r\n.user {\r\n  position: absolute;\r\n  right: 10px;\r\n  color: rgba(238, 238, 238, 0.61);\r\n  text-align: center;\r\n  // background: rgb(161, 145, 139);\r\n  &:hover {\r\n    cursor: pointer;\r\n    color: #eee;\r\n  }\r\n\r\n  .userAvatar {\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 50%;\r\n  }\r\n}\r\n.loginWrap {\r\n  z-index: 999;\r\n  position: fixed;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  margin: auto;\r\n  width: 500px;\r\n  height: 300px;\r\n  background-color: rgba(51, 73, 128, 0.856);\r\n\r\n  .loginClose {\r\n    position: absolute;\r\n    height: 20px;\r\n    top: 5px;\r\n    right: 5px;\r\n    /deep/ .el-icon-close {\r\n      font-size: 20px;\r\n\r\n      &:hover {\r\n        cursor: pointer;\r\n      }\r\n    }\r\n  }\r\n  .imgWrap {\r\n    // display: inline-block;\r\n    margin: 50px auto 0;\r\n    width: 180px;\r\n    height: 180px;\r\n    #QRCode_header {\r\n      margin: auto;\r\n    }\r\n  }\r\n  #qrStatus {\r\n    color: #eee;\r\n    text-align: center;\r\n    // background-color: #eee;\r\n  }\r\n  .refreshQr {\r\n    color: rgba(255, 255, 255, 0.808);\r\n    margin-bottom: 20px;\r\n    text-align: center;\r\n    transition: 0.2s;\r\n    span {\r\n      font-size: 15px;\r\n      &:hover {\r\n        color: rgb(228, 74, 74);\r\n        cursor: pointer;\r\n      }\r\n    }\r\n  }\r\n  .enter {\r\n    position: absolute;\r\n    bottom: 0;\r\n    right: 5px;\r\n    font-size: 14px;\r\n    color: rgba(221, 191, 152, 0.788);\r\n    transition: 0.2s;\r\n    &:hover {\r\n      color: rgba(221, 191, 152);\r\n      cursor: pointer;\r\n    }\r\n  }\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}