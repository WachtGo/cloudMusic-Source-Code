{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport aplayer from \"./aplayer\";\nimport homePage from \"./homePage\";\nimport musicPlayList from \"./musicPlayList\";\nimport login from \"./login\";\nimport createPersistedState from \"vuex-persistedstate\"; //状态持久化，将vuex资源保存在localStorage中\n\nimport { getToken, setToken, removeToken } from \"@/utils/token\";\nimport { getStorage, setStorage, removeStorage } from \"@/utils/storage\";\nVue.use(Vuex);\nexport default new Vuex.Store({\n  // 歌曲生成周期\n  plugins: [createPersistedState({\n    key: 'userState',\n    // 默认值vuex\n    storage: window.localStorage,\n    // 缓存的介质localStorage、sessionStorage\n    // storage: window.sessionStorage,\n    whiteList: ['token', 'user'] // 白名单 要缓存的数据，刷新不会丢失，重新打开也不会丢失\n    // blackList: [], // 黑名单 不缓存的数据，刷新丢失\n\n  })],\n  state: {\n    token: null,\n    user: null\n  },\n  mutations: {\n    setTOKEN: function setTOKEN(state, value) {\n      //登录后设置token\n      state.token = value;\n      setToken(value);\n    },\n    removeTOKEN: function removeTOKEN(state) {\n      removeToken();\n      state.token = null;\n      state.user = null;\n    },\n    setUSER: function setUSER(state, user) {\n      //登录后将用户信息存在vuex\n      state.user = user;\n    },\n    setSTORAGE: function setSTORAGE(state, obj) {\n      //设置本地存储\n      setStorage(obj.name, obj.value);\n    }\n  },\n  actions: {\n    getTOKEN: function getTOKEN() {\n      //获取token值\n      return getToken();\n    }\n  },\n  modules: {\n    aplayer: aplayer,\n    homePage: homePage,\n    musicPlayList: musicPlayList,\n    login: login\n  }\n}); // export default new Vuex.Store({\n// state: {\n//   // 获取token\n//   // token:getToken(),\n//   //获取本地token\n//   // token_storage:getStorage(),\n// },\n// //mutations用于修改state\n// //Async 异步\n// mutations: {//将方法名改成大写，防止在其他组件中出现同名冲突（无法生效）\n//   //将token保存在本地存储\n//   // setSTORAGE(state,tokenName,tokenContent){\n//   //   setStorage(tokenName,tokenContent)\n//   // }\n//   // ,\n//   // //保存token\n//   // setTOKEN(state,token){\n//   //   setToken(token)\n//   //   this._vm.$message({\n//   //     type: 'success',\n//   //     message: 'cookie设置成功',\n//   //   });\n//   // },\n//   // removeTOKEN(state){\n//   //   state.token = null\n//   //   removeToken()\n//   //   this._vm.$message({\n//   //     type: 'success',\n//   //     message: '成功退出登录',\n//   //   });\n//   // },\n//   //播放器添加歌曲\n//   // //刷新音频播放器\n//   // alplayReload(state,change){\n//   //   if(change){\n//   //      state.alplayShow = false\n//   //   setTimeout(()=>{\n//   //     state.alplayShow = true\n//   //   },1000)\n//   //   }\n//   // }\n// },\n// //actions专门用来做异步处理\n// actions: {\n// }\n// })","map":{"version":3,"sources":["D:/data/桌面/代码文件夹/git/cloudMusic-Source-Code-main/cloudMusic-Source-Code-main/src/store/index.js"],"names":["Vue","Vuex","aplayer","homePage","musicPlayList","login","createPersistedState","getToken","setToken","removeToken","getStorage","setStorage","removeStorage","use","Store","plugins","key","storage","window","localStorage","whiteList","state","token","user","mutations","setTOKEN","value","removeTOKEN","setUSER","setSTORAGE","obj","name","actions","getTOKEN","modules"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,oBAAP,MAAiC,qBAAjC,C,CAAuD;;AACvD,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,WAA7B,QAAgD,eAAhD;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,aAAjC,QAAsD,iBAAtD;AACAZ,GAAG,CAACa,GAAJ,CAAQZ,IAAR;AACA,eAAe,IAAIA,IAAI,CAACa,KAAT,CAAe;AAC5B;AACAC,EAAAA,OAAO,EAAE,CACPT,oBAAoB,CAAC;AACnBU,IAAAA,GAAG,EAAE,WADc;AACD;AAClBC,IAAAA,OAAO,EAAEC,MAAM,CAACC,YAFG;AAEY;AAC/B;AACAC,IAAAA,SAAS,EAAE,CAAC,OAAD,EAAU,MAAV,CAJQ,CAIY;AAC/B;;AALmB,GAAD,CADb,CAFmB;AAW5BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,IADF;AAELC,IAAAA,IAAI,EAAE;AAFD,GAXqB;AAe5BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,QADS,oBACAJ,KADA,EACOK,KADP,EACc;AAAE;AACvBL,MAAAA,KAAK,CAACC,KAAN,GAAcI,KAAd;AACAlB,MAAAA,QAAQ,CAACkB,KAAD,CAAR;AACD,KAJQ;AAKTC,IAAAA,WALS,uBAKGN,KALH,EAKU;AACjBZ,MAAAA,WAAW;AACXY,MAAAA,KAAK,CAACC,KAAN,GAAc,IAAd;AACAD,MAAAA,KAAK,CAACE,IAAN,GAAa,IAAb;AACD,KATQ;AAUTK,IAAAA,OAVS,mBAUDP,KAVC,EAUME,IAVN,EAUY;AAAC;AACpBF,MAAAA,KAAK,CAACE,IAAN,GAAaA,IAAb;AACD,KAZQ;AAaTM,IAAAA,UAbS,sBAaER,KAbF,EAaSS,GAbT,EAac;AAAC;AACtBnB,MAAAA,UAAU,CAACmB,GAAG,CAACC,IAAL,EAAWD,GAAG,CAACJ,KAAf,CAAV;AACD;AAfQ,GAfiB;AAiC5BM,EAAAA,OAAO,EAAE;AACPC,IAAAA,QADO,sBACI;AAAC;AACV,aAAO1B,QAAQ,EAAf;AACD;AAHM,GAjCmB;AAsC5B2B,EAAAA,OAAO,EAAE;AACPhC,IAAAA,OAAO,EAAPA,OADO;AAEPC,IAAAA,QAAQ,EAARA,QAFO;AAGPC,IAAAA,aAAa,EAAbA,aAHO;AAIPC,IAAAA,KAAK,EAALA;AAJO;AAtCmB,CAAf,CAAf,C,CA8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport aplayer from \"./aplayer\";\nimport homePage from \"./homePage\";\nimport musicPlayList from \"./musicPlayList\";\nimport login from \"./login\"\nimport createPersistedState from \"vuex-persistedstate\";//状态持久化，将vuex资源保存在localStorage中\nimport { getToken, setToken, removeToken } from \"@/utils/token\"\nimport { getStorage, setStorage, removeStorage } from \"@/utils/storage\"\nVue.use(Vuex);\nexport default new Vuex.Store({\n  // 歌曲生成周期\n  plugins: [\n    createPersistedState({\n      key: 'userState', // 默认值vuex\n      storage: window.localStorage,  // 缓存的介质localStorage、sessionStorage\n      // storage: window.sessionStorage,\n      whiteList: ['token', 'user'],  // 白名单 要缓存的数据，刷新不会丢失，重新打开也不会丢失\n      // blackList: [], // 黑名单 不缓存的数据，刷新丢失\n    }),\n  ],\n  state: {\n    token: null,\n    user: null,\n  },\n  mutations: {\n    setTOKEN(state, value) { //登录后设置token\n      state.token = value\n      setToken(value)\n    },\n    removeTOKEN(state) {\n      removeToken()\n      state.token = null\n      state.user = null\n    },\n    setUSER(state, user) {//登录后将用户信息存在vuex\n      state.user = user\n    },\n    setSTORAGE(state, obj) {//设置本地存储\n      setStorage(obj.name, obj.value)\n    },\n\n  },\n  actions: {\n    getTOKEN() {//获取token值\n      return getToken()\n    }\n  },\n  modules: {\n    aplayer,\n    homePage,\n    musicPlayList,\n    login\n  },\n\n});\n// export default new Vuex.Store({\n// state: {\n//   // 获取token\n//   // token:getToken(),\n//   //获取本地token\n//   // token_storage:getStorage(),\n// },\n// //mutations用于修改state\n// //Async 异步\n// mutations: {//将方法名改成大写，防止在其他组件中出现同名冲突（无法生效）\n\n//   //将token保存在本地存储\n//   // setSTORAGE(state,tokenName,tokenContent){\n//   //   setStorage(tokenName,tokenContent)\n//   // }\n//   // ,\n//   // //保存token\n//   // setTOKEN(state,token){\n//   //   setToken(token)\n//   //   this._vm.$message({\n//   //     type: 'success',\n//   //     message: 'cookie设置成功',\n//   //   });\n//   // },\n//   // removeTOKEN(state){\n//   //   state.token = null\n//   //   removeToken()\n//   //   this._vm.$message({\n//   //     type: 'success',\n//   //     message: '成功退出登录',\n//   //   });\n//   // },\n//   //播放器添加歌曲\n\n//   // //刷新音频播放器\n//   // alplayReload(state,change){\n//   //   if(change){\n//   //      state.alplayShow = false\n//   //   setTimeout(()=>{\n//   //     state.alplayShow = true\n//   //   },1000)\n//   //   }\n//   // }\n\n// },\n// //actions专门用来做异步处理\n// actions: {\n\n// }\n// })\n"]},"metadata":{},"sourceType":"module"}