{"ast":null,"code":"import _asyncToGenerator from \"D:/data/\\u684C\\u9762/git/cloudMusic-Source-Code/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getSuggestPlayList as _getSuggestPlayList } from '@/api/api';\nimport { transPlayCount } from '@/utils/commonApi';\nexport default {\n  data: function data() {\n    return {\n      limit: 10,\n      recPlayList: []\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.getSuggestPlayList();\n\n            case 2:\n              _context.next = 4;\n              return _this.$nextTick(function () {\n                console.log(6);\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    getSuggestPlayList: function getSuggestPlayList() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var that, params;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                //获取推荐歌单\n                that = _this2;\n                params = {\n                  limit: that.limit\n                };\n                _context2.next = 4;\n                return _getSuggestPlayList(params).then(function (res) {\n                  console.log(\"推荐歌单：---\", res.data);\n                  that.recPlayList = res.data.result; // console.log(\"推荐歌单：--\", res.data.result);\n                  //将播放量转成亿,万单位\n\n                  // console.log(\"推荐歌单：--\", res.data.result);\n                  //将播放量转成亿,万单位\n                  transPlayCount(that.recPlayList, 'playCount');\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    goSongList: function goSongList(songListId) {\n      //传入歌单id进入歌曲列表\n      var that = this;\n      that.$router.push({\n        name: 'playListDetails',\n        params: {\n          songListId: songListId\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACAA,MADA,kBACA;AACA;AACAC,eADA;AAEAC;AAFA;AAIA,GANA;AAOAC,SAPA,qBAOA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACA,0BADA;;AAAA;AAAA;AAAA,qBAEA;AACAC;AACA,eAFA,CAFA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,GAZA;AAaAC;AACAC,sBADA,gCACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACAC,oBAFA,GAEA,MAFA;AAGAC,sBAHA,GAGA;AACAP;AADA,iBAHA;AAAA;AAAA,uBAMAK;AACAF;AACAG,qDAFA,CAGA;AACA;;AADA;AACA;AACAE;AACA,iBANA,CANA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA,KAdA;AAeAC,cAfA,sBAeAC,UAfA,EAeA;AACA;AACA;AACAJ;AACAK,+BADA;AAEAJ;AAAAG;AAAA;AAFA;AAIA;AAtBA;AAbA","names":["data","limit","recPlayList","mounted","console","methods","getSuggestPlayList","that","params","transPlayCount","goSongList","songListId","name"],"sourceRoot":"src/views/recommend","sources":["RecPlaylist.vue"],"sourcesContent":["<template>\r\n  <!-- 推荐歌单 -->\r\n  <div>\r\n    <h3 class=\"h2title\">推荐歌单 :</h3>\r\n    <div class=\"recPlay Ocenter\">\r\n      <ul class=\"recPlaywrap\">\r\n        <li class=\"recPlayList\"\r\n            v-for=\"(item, index) in recPlayList\"\r\n            :key=\"index\">\r\n          <div class=\"image\">\r\n            <img :src=\"item.picUrl\"\r\n                 alt=\"\"\r\n                 title=\"\"\r\n                 @click=\"goSongList(item.id)\" />\r\n            <span class=\"playCount\"><i class=\"el-icon-video-play\"\r\n                 style=\"margin-right: 1px\"></i>{{ item.playCount }}</span>\r\n          </div>\r\n          <p class=\"List-title\"\r\n             @click=\"goSongList(item.id)\">\r\n            <span>{{ item.name }}</span>\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getSuggestPlayList } from '@/api/api'\r\nimport { transPlayCount } from '@/utils/commonApi'\r\nexport default {\r\n  data() {\r\n    return {\r\n      limit: 10,\r\n      recPlayList: [],\r\n    }\r\n  },\r\n async mounted() {\r\n    await this.getSuggestPlayList()\r\n    await this.$nextTick(()=>{\r\n      console.log(6)\r\n    })\r\n  },\r\n  methods: {\r\n   async getSuggestPlayList() {\r\n      //获取推荐歌单\r\n      var that = this\r\n      let params = {\r\n        limit: that.limit,\r\n      }\r\n     await getSuggestPlayList(params).then((res) => {\r\n        console.log(\"推荐歌单：---\",res.data);\r\n        that.recPlayList = res.data.result\r\n        // console.log(\"推荐歌单：--\", res.data.result);\r\n        //将播放量转成亿,万单位\r\n        transPlayCount(that.recPlayList, 'playCount')\r\n      })\r\n    },\r\n    goSongList(songListId) {\r\n      //传入歌单id进入歌曲列表\r\n      var that = this\r\n      that.$router.push({\r\n        name: 'playListDetails',\r\n        params: { songListId: songListId },\r\n      })\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.recPlay {\r\n  // max-height: 550px;\r\n  overflow-x: hidden;\r\n  // background: rgba(95, 158, 160, 0.11);\r\n  // &::-webkit-scrollbar {\r\n  //   display: none;\r\n  // }\r\n\r\n  .recPlaywrap {\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    flex-wrap: wrap; //根据宽度限制一行的盒子个数\r\n    margin: 10px 0;\r\n    width: 100%;\r\n    // overflow-x: hidden;\r\n\r\n    .recPlayList {\r\n      // margin-bottom: 10px;\r\n      width: 205px;\r\n      height: 260px;\r\n      box-sizing: border-box;\r\n\r\n      .image {\r\n        position: relative;\r\n        margin-bottom: 10px;\r\n        width: 200px;\r\n        height: 200px;\r\n        border-radius: 10px;\r\n        overflow: hidden;\r\n        transition: 0.2s;\r\n\r\n        &:hover {\r\n          transform: scale(1.05);\r\n          cursor: pointer;\r\n          // height: 210px;\r\n        }\r\n        img {\r\n          position: absolute;\r\n          width: 100%;\r\n          height: 100%;\r\n        }\r\n\r\n        .playCount {\r\n          position: absolute;\r\n          z-index: 99;\r\n          right: 10px;\r\n          background: transparent;\r\n        }\r\n      }\r\n\r\n      p {\r\n        font-size: 15px;\r\n        padding: 0 10px;\r\n        // width: 100%;\r\n        transition: 0.2s;\r\n        overflow: hidden; /*必须结合的属性,当内容溢出元素框时发生的事情*/\r\n        text-overflow: ellipsis; /*可以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本 。*/\r\n        display: -webkit-box; /*必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。*/\r\n        -webkit-line-clamp: 2; /*用来限制在一个块元素显示的文本的行数。*/\r\n        -webkit-box-orient: vertical; /*必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。*/\r\n        span {\r\n          &:hover {\r\n            color: rgb(145, 245, 228);\r\n            cursor: pointer;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n.h2title {\r\n  margin-top: 10px;\r\n  text-align: left;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}