{"ast":null,"code":"import _asyncToGenerator from \"D:/data/\\u684C\\u9762/\\u4EE3\\u7801\\u6587\\u4EF6\\u5939/git/cloudMusic-Source-Code-main/cloudMusic-Source-Code-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport QRCode from \"qrcode\";\nimport { getqrKey, getqrImg, getqrStatus as _getqrStatus, getloginStatus as _getloginStatus, loginOut as _loginOut } from \"@/api/login\";\nimport { cookieParser, getTimestamp } from \"@/utils/commonApi\";\nexport default {\n  name: \"Login\",\n  data: function data() {\n    return {\n      loginWrapShow: false,\n      //展示登录窗口\n      qrStatus: \"\",\n      qrtimer: null,\n      qrshowed: false,\n      key: \"\",\n      qrloading: false //点击判断是否已经授权时的加载图标状态\n\n    };\n  },\n  computed: {\n    user: function user() {\n      return this.$store.state.user;\n    }\n  },\n  created: function created() {// if (localStorage.getItem(\"user\")) {\n    //   this.user = JSON.parse(localStorage.getItem(\"user\"));\n    // }\n    // this.getloginStatus();\n  },\n  methods: {\n    goLogin: function goLogin() {\n      //点击登录，获取二维码\n      // this.loginWrapOnOff(true);\n      this.loginWrapShow = true;\n      this.refreshQr();\n    },\n    //生成二维码\n    getQRCode: function getQRCode(qrurl) {\n      var opts = {\n        errorCorrectionLevel: \"H\",\n        //容错级别\n        type: \"image/png\",\n        //生成的二维码类型\n        quality: 0.3,\n        //二维码质量\n        margin: 5,\n        //二维码留白边距\n        width: 180,\n        //宽\n        height: 180,\n        //高\n        text: \"\",\n        //二维码内容\n        color: {\n          dark: \"#333333\",\n          //前景色\n          light: \"#fff\" //背景色\n\n        }\n      };\n      this.QRCodeMsg = qrurl; //生成的二维码为URL地址js\n\n      var msg = document.getElementById(\"QRCode_header\"); // 将获取到的数据（val）画到msg（canvas）上\n\n      QRCode.toCanvas(msg, qrurl, opts, function (error) {// console.log(error)\n      });\n      this.qrshowed = true;\n    },\n    //  获取/刷新二维码\n    refreshQr: function refreshQr() {\n      var _this = this;\n\n      this.qrshowed = false;\n      var params = {\n        timestamp: getTimestamp()\n      }; // console.log(params.timestamp)\n\n      getqrKey(params).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(res) {\n          var params;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return res.data.data.unikey;\n\n                case 2:\n                  _this.key = _context.sent;\n                  params = {\n                    key: res.data.data.unikey\n                  };\n                  getqrImg(params).then(function (res) {\n                    _this.getQRCode(res.data.data.qrurl);\n                  });\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    // 二维码状态\n    getqrStatus: function getqrStatus() {\n      var _this2 = this;\n\n      this.qrloading = true;\n      var params = {\n        key: this.key\n      };\n\n      _getqrStatus(params).then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(res) {\n          var cookies;\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return res.data.message;\n\n                case 2:\n                  _this2.qrStatus = _context2.sent;\n\n                  if (res.data.code === 803) {\n                    // clearInterval(this.qrtimer);\n                    // console.log(\"扫码登录成功\");\n                    cookies = cookieParser(res.data.cookie);\n\n                    _this2.$store.commit(\"setTOKEN\", cookies[1]); //设置好了token\n\n\n                    setTimeout(function () {\n                      _this2.loginWrapShow = false; //关闭登录窗口\n\n                      _this2.$message.success(\"已登录\");\n                    }, 500);\n\n                    _this2.getloginStatus();\n                  } else if (res.data.code === 800) {\n                    _this2.qrStatus += \",请刷新获取\";\n                  } else if (res.data.code === 400) {\n                    _this2.qrStatus = \"请求错误\";\n                  }\n\n                  _this2.qrloading = false;\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n    //获取登录状态\n    getloginStatus: function getloginStatus() {\n      var _this3 = this;\n\n      _getloginStatus().then( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(res) {\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  // console.log(res.data.data.profile);\n                  if (res.data.data.profile) {\n                    _this3.$store.commit(\"setUSER\", {\n                      avatarUrl: res.data.data.profile.avatarUrl,\n                      nickname: res.data.data.profile.nickname,\n                      userId: res.data.data.profile.userId,\n                      userType: res.data.data.profile.userType\n                    });\n                  }\n\n                case 1:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    },\n    //退出登录\n    loginOut: function loginOut() {\n      var _this4 = this;\n\n      var loading = this.$loading({\n        background: \"rgba(255,255,255,0.1)\"\n      });\n\n      _loginOut().then(function (res) {\n        _this4.$nextTick(function () {\n          loading.close();\n        });\n\n        _this4.$store.commit(\"removeTOKEN\");\n\n        _this4.$message.success(\"已退出登录\"); // this.getloginStatus(); //获取登陆状态\n\n      }).catch(function (err) {\n        _this4.$nextTick(function () {\n          loading.close();\n        });\n      });\n    },\n    golike: function golike() {\n      console.log(this.user);\n      this.$router.push({\n        name: \"myPlayList\",\n        params: {\n          id: this.user.userId\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA;AACA,SACAA,QADA,EAEAC,QAFA,EAGAC,2BAHA,EAIAC,iCAJA,EAKAC,qBALA,QAMA,aANA;AAOA;AAEA;AACAC,eADA;AAEAC,MAFA,kBAEA;AACA;AACAC,0BADA;AACA;AACAC,kBAFA;AAGAC,mBAHA;AAIAC,qBAJA;AAKAC,aALA;AAMAC,sBANA,CAMA;;AANA;AAQA,GAXA;AAYAC;AACAC,QADA,kBACA;AACA;AACA;AAHA,GAZA;AAiBAC,SAjBA,qBAiBA,CACA;AACA;AACA;AACA;AACA,GAtBA;AAuBAC;AACAC,WADA,qBACA;AACA;AACA;AACA;AACA;AACA,KANA;AAOA;AACAC,aARA,qBAQAC,KARA,EAQA;AACA;AACAC,iCADA;AACA;AACAC,yBAFA;AAEA;AACAC,oBAHA;AAGA;AACAC,iBAJA;AAIA;AACAC,kBALA;AAKA;AACAC,mBANA;AAMA;AACAC,gBAPA;AAOA;AACAC;AACAC,yBADA;AACA;AACAC,uBAFA,CAEA;;AAFA;AARA;AAaA,6BAdA,CAcA;;AACA,yDAfA,CAgBA;;AACAC,0DACA;AACA,OAFA;AAGA;AACA,KA7BA;AA8BA;AACAC,aA/BA,uBA+BA;AAAA;;AACA;AACA;AACAC;AADA,QAFA,CAKA;;AACAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACAiC,oBADA;;AAAA;AACA,2BADA;AAEAC,wBAFA,GAEA;AACAvB;AADA,mBAFA;AAKAV;AACA;AACA,mBAFA;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASA,KA9CA;AA+CA;AACAC,eAhDA,yBAgDA;AAAA;;AACA;AACA;AACAS;AADA;;AAGAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACA+B,gBADA;;AAAA;AACA,iCADA;;AAEA;AACA;AACA;AACAE,2BAHA,GAGAC,6BAHA;;AAIA,iEAJA,CAIA;;;AACAC;AACA,mDADA,CACA;;AACA;AACA,qBAHA,EAGA,GAHA;;AAIA;AACA,mBAVA,MAUA;AACA;AACA,mBAFA,MAEA;AACA;AACA;;AACA;;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAmBA,KAxEA;AA0EA;AACAlC,kBA3EA,4BA2EA;AAAA;;AACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACAmC,gEADA;AAEAC,8DAFA;AAGAC,0DAHA;AAIAC;AAJA;AAMA;;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWA,KAvFA;AAwFA;AACArC,YAzFA,sBAyFA;AAAA;;AACA;AACAsC;AADA;;AAGAtC,kBACAuC,IADA,CACA;AACA;AACAC;AACA,SAFA;;AAGA;;AACA,yCALA,CAMA;;AACA,OARA,EASAC,KATA,CASA;AACA;AACAD;AACA,SAFA;AAGA,OAbA;AAcA,KA3GA;AA4GAE,UA5GA,oBA4GA;AACAC;AACA;AACA1C,0BADA;AAEA6B;AACAc;AADA;AAFA;AAMA;AApHA;AAvBA","names":["getqrKey","getqrImg","getqrStatus","getloginStatus","loginOut","name","data","loginWrapShow","qrStatus","qrtimer","qrshowed","key","qrloading","computed","user","created","methods","goLogin","getQRCode","qrurl","errorCorrectionLevel","type","quality","margin","width","height","text","color","dark","light","QRCode","refreshQr","timestamp","res","params","cookies","cookieParser","setTimeout","avatarUrl","nickname","userId","userType","background","then","loading","catch","golike","console","id"],"sourceRoot":"src/components/login","sources":["index.vue"],"sourcesContent":["<template>\n  <!-- 暂时开启该功能 -->\n  <div>\n    <div v-if=\"!user\" class=\"login\" @click=\"goLogin\">登录</div>\n    <div v-if=\"user\" class=\"user\">\n      <img class=\"userAvatar\" :src=\"user.avatarUrl\" alt=\" \" /><span class=\"nickName\">{{ user.nickname }}</span>\n      <ul>\n        <li class=\"logined-li\" @click=\"golike\">我的歌单</li>\n        <li class=\"logined-li\" @click=\"loginOut\">退出登录</li>\n      </ul>\n    </div>\n    <!-- <li class=\"logined-li\" @click=\"loginOut\">退出登录</li> -->\n    <!-- <el-button style=\"color: black\" @click=\"getloginStatus\"\n      >登录状态获取</el-button\n    >\n    <button @click=\"ceshi\">登录,测试</button>\n    <el-button style=\"color: black\" @click=\"getuserDetail\"\n      >获取用户详情</el-button\n    > -->\n    <!-- <el-button style=\"color: black\" @click=\"getAccount\">获取账号信息</el-button> -->\n    <div class=\"loginWrap\" v-show=\"loginWrapShow\">\n      <!-- 关闭窗口 -->\n      <div class=\"loginClose_wrap\">\n        <p class=\"loginClose\" @click=\"loginWrapShow = false; qrshowed = false\">\n          <i class=\"el-icon-close\"></i>\n        </p>\n      </div>\n      <!-- 二维码 -->\n      <div class=\"imgWrap\">\n        <div v-show=\"!qrshowed\" class=\"qrloading_wrap\">\n          <div class=\"qrloading absolute_center\">\n            <i class=\" el-icon-loading \" style=\" font-size: 45px;color:#eee\"></i>\n          </div>\n        </div>\n        <div v-show=\"qrshowed\">\n          <canvas id=\"QRCode_header\"></canvas>\n        </div>\n      </div>\n      <!-- 二维码刷新 -->\n      <p class=\"refreshQr\">\n        <span @click=\"refreshQr\">刷新二维码</span>\n      </p>\n      <p id=\"qrStatus\">\n        {{ qrStatus }}<i v-if=\"qrloading\" class=\"el-icon-loading\"></i>\n      </p>\n      <p class=\"enter\" @click=\"\n        getqrStatus();\n      qrloading = true;\n                                        \">\n        <span>使用网易云音乐app进行扫码,可能会有所延迟,不用多次扫码,手动点击此处进入</span>\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport QRCode from \"qrcode\";\nimport {\n  getqrKey,\n  getqrImg,\n  getqrStatus,\n  getloginStatus,\n  loginOut,\n} from \"@/api/login\";\nimport { cookieParser, getTimestamp } from \"@/utils/commonApi\";\n\nexport default {\n  name: \"Login\",\n  data() {\n    return {\n      loginWrapShow: false, //展示登录窗口\n      qrStatus: \"\",\n      qrtimer: null,\n      qrshowed: false,\n      key: \"\",\n      qrloading: false, //点击判断是否已经授权时的加载图标状态\n    };\n  },\n  computed: {\n    user() {\n      return this.$store.state.user;\n    },\n  },\n  created() {\n    // if (localStorage.getItem(\"user\")) {\n    //   this.user = JSON.parse(localStorage.getItem(\"user\"));\n    // }\n    // this.getloginStatus();\n  },\n  methods: {\n    goLogin() {\n      //点击登录，获取二维码\n      // this.loginWrapOnOff(true);\n      this.loginWrapShow = true;\n      this.refreshQr();\n    },\n    //生成二维码\n    getQRCode(qrurl) {\n      let opts = {\n        errorCorrectionLevel: \"H\", //容错级别\n        type: \"image/png\", //生成的二维码类型\n        quality: 0.3, //二维码质量\n        margin: 5, //二维码留白边距\n        width: 180, //宽\n        height: 180, //高\n        text: \"\", //二维码内容\n        color: {\n          dark: \"#333333\", //前景色\n          light: \"#fff\", //背景色\n        },\n      };\n      this.QRCodeMsg = qrurl; //生成的二维码为URL地址js\n      let msg = document.getElementById(\"QRCode_header\");\n      // 将获取到的数据（val）画到msg（canvas）上\n      QRCode.toCanvas(msg, qrurl, opts, function (error) {\n        // console.log(error)\n      });\n      this.qrshowed = true\n    },\n    //  获取/刷新二维码\n    refreshQr() {\n      this.qrshowed = false\n      let params = {\n        timestamp: getTimestamp(),\n      };\n      // console.log(params.timestamp)\n      getqrKey(params).then(async (res) => {\n        this.key = await res.data.data.unikey;\n        let params = {\n          key: res.data.data.unikey,\n        };\n        getqrImg(params).then((res) => {\n          this.getQRCode(res.data.data.qrurl);\n        });\n      });\n    },\n    // 二维码状态\n    getqrStatus() {\n      this.qrloading = true;\n      let params = {\n        key: this.key,\n      };\n      getqrStatus(params).then(async (res) => {\n        this.qrStatus = await res.data.message;\n        if (res.data.code === 803) {\n          // clearInterval(this.qrtimer);\n          // console.log(\"扫码登录成功\");\n          let cookies = cookieParser(res.data.cookie);\n          this.$store.commit(\"setTOKEN\", cookies[1]); //设置好了token\n          setTimeout(() => {\n            this.loginWrapShow = false; //关闭登录窗口\n            this.$message.success(\"已登录\");\n          }, 500);\n          this.getloginStatus();\n        } else if (res.data.code === 800) {\n          this.qrStatus += \",请刷新获取\";\n        } else if (res.data.code === 400) {\n          this.qrStatus = \"请求错误\";\n        }\n        this.qrloading = false;\n      });\n    },\n\n    //获取登录状态\n    getloginStatus() {\n      getloginStatus().then(async (res) => {\n        // console.log(res.data.data.profile);\n        if (res.data.data.profile) {\n          this.$store.commit(\"setUSER\", {\n            avatarUrl: res.data.data.profile.avatarUrl,\n            nickname: res.data.data.profile.nickname,\n            userId: res.data.data.profile.userId,\n            userType: res.data.data.profile.userType,\n          });\n        }\n      });\n    },\n    //退出登录\n    loginOut() {\n      const loading = this.$loading({\n        background: \"rgba(255,255,255,0.1)\",\n      });\n      loginOut()\n        .then((res) => {\n          this.$nextTick(() => {\n            loading.close();\n          });\n          this.$store.commit(\"removeTOKEN\");\n          this.$message.success(\"已退出登录\");\n          // this.getloginStatus(); //获取登陆状态\n        })\n        .catch((err) => {\n          this.$nextTick(() => {\n            loading.close();\n          });\n        });\n    },\n    golike() {\n      console.log(this.user);\n      this.$router.push({\n        name: \"myPlayList\",\n        params: {\n          id: this.user.userId,\n        },\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"less\" scoped>\n.login,\n.user {\n  position: absolute;\n  // width: 150px;\n  height: 30px;\n  top: 0;\n  right: 10px;\n  color: rgba(238, 238, 238, 0.61);\n  text-align: center;\n  overflow: hidden;\n  transition: 0.2s;\n\n  // background: rgb(161, 145, 139);\n  &:hover {\n    height: 96px; //每次添加一个列表这里加32px\n    transform: scale(1.01);\n  }\n\n  .userAvatar {\n    vertical-align: top;\n    margin-right: 10px;\n    width: 28px;\n    height: 28px;\n    border-radius: 50%;\n  }\n\n  .nickName {\n    display: inline-block;\n    font-size: 13px;\n    height: 30px;\n    line-height: 30px;\n  }\n\n  .logined-li {\n    height: 32px;\n    line-height: 32px;\n    font-size: 13px;\n    transition: 0.2s;\n    padding: 0 10px;\n    background: rgba(160, 160, 160, 0.041);\n\n    &:hover {\n      cursor: pointer;\n      color: rgb(39, 177, 131);\n      transform: scale(1.01);\n    }\n  }\n}\n\n.login {\n  &:hover {\n    cursor: pointer;\n    color: rgb(187, 145, 90);\n  }\n}\n\n.loginWrap {\n  z-index: 999;\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n  width: 500px;\n  height: 300px;\n  border-radius: 15px;\n  background: url(@/static/img/background8.jpeg);\n\n  .loginClose_wrap {\n    position: relative;\n    width: 100%;\n    height: 45px;\n\n    .loginClose {\n      position: absolute;\n      width: 30px;\n      height: 30px;\n      top: 15px;\n      right: 15px;\n\n      color: rgb(221, 191, 151);\n      transition: 0.2s;\n\n      &:hover {\n          cursor: pointer;\n          background-color: #094f779a;\n        }\n      /deep/ .el-icon-close {\n        font-size: 30px;\n\n        &:hover {\n          cursor: pointer;\n          color: rgb(187, 145, 90);\n        }\n      }\n    }\n  }\n\n\n  .imgWrap {\n    // display: inline-block;\n    margin: 0 auto;\n    width: 180px;\n    height: 180px;\n\n    .qrloading_wrap{\n      position: relative;\n      // background-color: #fff;\n      width: 180px;\n      height: 180px;\n    }\n    .qrloading {\n      // position: absolute;\n      width: 45px;\n      height: 45px;\n      // background-color: #694646;\n    }\n\n    #QRCode_header {\n      margin: auto;\n    }\n\n  }\n\n  #qrStatus {\n    color: #eee;\n    text-align: center;\n    // background-color: #eee;\n  }\n\n  .refreshQr {\n    padding: 5px;\n    color: rgba(255, 255, 255, 0.808);\n\n    text-align: center;\n    transition: 0.2s;\n\n    span {\n      font-size: 15px;\n      transition: 0.2s;\n\n      &:hover {\n        color: rgba(221, 191, 152);\n        cursor: pointer;\n      }\n    }\n  }\n\n  .enter {\n    position: absolute;\n    bottom: 5px;\n    right: 5px;\n    font-size: 14px;\n    color: rgba(221, 191, 152, 0.788);\n    transition: 0.2s;\n\n    &:hover {\n      color: rgba(221, 191, 152);\n      cursor: pointer;\n    }\n  }\n}\n</style>"]},"metadata":{},"sourceType":"module"}