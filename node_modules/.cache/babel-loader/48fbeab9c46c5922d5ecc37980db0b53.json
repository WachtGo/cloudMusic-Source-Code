{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/data/\\u684C\\u9762/git/cloudMusic-Source-Code/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"D:/data/\\u684C\\u9762/git/cloudMusic-Source-Code/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getPlaylistDetail as _getPlaylistDetail, getSongList as _getSongList, getPlayListComment } from \"@/api/api\";\nimport { collectPlaylist as _collectPlaylist, deletePlayList as _deletePlayList } from \"@/api/needLogin/musicOperate\";\nimport { transMusicTime } from \"@/utils/commonApi\";\nimport songlist from \"@/components/songlist.vue\";\nexport default {\n  components: {\n    songlist: songlist\n  },\n  data: function data() {\n    return {\n      //歌单id\n      songListId: \"\",\n      //评论分页\n      currentPage: 1,\n      // 歌曲数组\n      musicList: [],\n      //下载音乐的地址\n      DownloadSongUrl: \"\",\n      //mv地址\n      mvUrl: \"\",\n      //搜索歌曲总数\n      count: \"\",\n      playListComment: [{\n        user: {\n          avatarUrl: \"\"\n        }\n      }],\n      // commentCount: \"\",\n      //MV\n      songMV: [],\n      //歌单详情\n      playListDetail: {\n        name: \"\",\n        coverImgUrl: \"\",\n        trackCount: \"\",\n        creator: {\n          avatarUrl: \"\",\n          nickname: \"\",\n          signature: \"\"\n        },\n        tags: [],\n        description: \"\"\n      } //userId: \"\", //用户id，用于鉴别歌单是否由用户自己创建的\n\n    };\n  },\n  computed: {\n    userId: function userId() {\n      return this.$store.state.user.userId;\n    }\n  },\n  mounted: function mounted() {\n    //缓存id,解决params数据在刷新页面后丢失，导致无法获取到歌单id\n    if (this.$route.params.playListDetail) {\n      localStorage.setItem(\"playListDetail\", JSON.stringify(this.$route.params.playListDetail)); //存储对象类型需要转换成字符串\n    } // 判断是否使用缓存\n\n\n    this.$route.params.playListDetail ? this.playListDetail = this.$route.params.playListDetail : this.playListDetail = JSON.parse(localStorage.getItem(\"playListDetail\")); //将字符串转成对象\n\n    this.getSongList();\n    this.getPlaylistDetail(); // this.getPlayListComment();\n  },\n  methods: {\n    /* //切换歌单评论\n    playListHandleCurrentChange(currentPage) {\n      var that = this;\n      that.currentPage = currentPage;\n      that.getPlayListComment();\n    }, */\n\n    /* //获取歌单评论\n    getPlayListComment() {\n      var that = this;\n      let params = {\n        id: that.playListDetail.id,\n        limit: 7,\n        offset: (that.currentPage - 1) * 7,\n      };\n      getPlayListComment(params).then(async (res) => {\n        // console.log(\"歌单评论：\", res.data);\n        this.playListComment = await res.data.comments;\n        that.commentCount = await res.data.total;\n        // console.log(\"歌曲评论：\", res.data);\n      });\n    }, */\n    //分页\n    handleCurrentChange: function handleCurrentChange(currentPage) {\n      // console.log(`当前页: ${currentPage}`);\n      this.currentPage = currentPage;\n      var that = this;\n      that.getPlaylistDetail(currentPage);\n    },\n    getPlaylistDetail: function getPlaylistDetail() {\n      //传入歌单id获取歌曲id和歌单详情\n      var that = this;\n      var params = {\n        id: that.playListDetail.id\n      };\n\n      _getPlaylistDetail(params).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(res) {\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return res.data.playlist;\n\n                case 2:\n                  that.playListDetail = _context.sent;\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    getSongList: function getSongList() {\n      //获取歌单所有歌曲\n      var that = this;\n      var params = {\n        id: that.playListDetail.id\n      };\n\n      _getSongList(params).then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(res) {\n          var _iterator, _step, item;\n\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return res.data.songs;\n\n                case 2:\n                  that.musicList = _context2.sent;\n                  //给每个列表添加一个防抖\n                  _iterator = _createForOfIteratorHelper(that.musicList);\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      item = _step.value;\n                      that.$set(item, \"timer\", true);\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n\n                  transMusicTime(that.musicList, \"dt\");\n\n                case 6:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n    //收藏/取消收藏歌单\n    collectPlaylist: function collectPlaylist(t) {\n      var _this = this;\n\n      var loading = this.$loading({\n        target: \"#list_detail\",\n        background: \"rgba(255,255,255,0.1)\"\n      });\n      var params = {\n        t: t,\n        id: this.playListDetail.id\n      };\n\n      _collectPlaylist(params).then(function (res) {\n        _this.$nextTick(function () {\n          loading.close();\n        }); // console.log(res, \"收藏返回\");\n\n\n        if (res.data.code === 200) {\n          if (t === \"1\") {\n            _this.$message({\n              type: \"success\",\n              message: \"收藏成功-可在网易云音乐中查看\"\n            });\n\n            return;\n          } else if (t === \"2\") {\n            _this.$message({\n              type: \"success\",\n              message: \"已取消收藏\"\n            });\n          }\n        }\n      }).catch(function (err) {\n        _this.$nextTick(function () {\n          loading.close();\n        }); //如果不写catch,请求拦截器拦截后这里会报错\n\n      });\n    },\n    //删除歌单（自己的）\n    deletePlayList: function deletePlayList(id) {\n      var _this2 = this;\n\n      var loading = this.$loading({\n        target: \"#list_detail\",\n        background: \"rgba(255,255,255,0.1)\"\n      });\n\n      _deletePlayList({\n        id: id\n      }).then(function (res) {\n        _this2.$nextTick(function () {\n          loading.close();\n        });\n\n        if (res.data.code === 200) {\n          _this2.$message.success(\"已从我的歌单删除\");\n\n          _this2.$router.go(-1);\n        }\n      }).catch(function (err) {\n        _this2.$nextTick(function () {\n          loading.close();\n        });\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6HA;AACA;AACA;AACA;AACA;AACAA;AACAC;AADA,GADA;AAIAC,MAJA,kBAIA;AACA;AACA;AACAC,oBAFA;AAGA;AACAC,oBAJA;AAKA;AACAC,mBANA;AAOA;AACAC,yBARA;AASA;AACAC,eAVA;AAWA;AACAC,eAZA;AAaAC,wBACA;AACAC;AACAC;AADA;AADA,OADA,CAbA;AAoBA;AACA;AACAC,gBAtBA;AAuBA;AACAC;AACAC,gBADA;AAEAC,uBAFA;AAGAC,sBAHA;AAIAC;AAAAN;AAAAO;AAAAC;AAAA,SAJA;AAKAC,gBALA;AAMAC;AANA,OAxBA,CAgCA;;AAhCA;AAkCA,GAvCA;AAwCAC;AACAC,UADA,oBACA;AACA;AACA;AAHA,GAxCA;AA6CAC,SA7CA,qBA6CA;AACA;AACA;AACAC,2BACA,gBADA,EAEAC,iDAFA,EADA,CAIA;AACA,KAPA,CAQA;;;AACA,wCACA,uDADA,GAEA,iCACAD,sCADA,CAFA,CATA,CAaA;;AACA;AACA,6BAfA,CAgBA;AACA,GA9DA;AA+DAE;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAC;AACA;AACA;AACA;AACAC;AACA,KA7BA;AA+BAC,qBA/BA,+BA+BA;AACA;AACA;AACA;AACAC;AADA;;AAGAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAGAE,iBAHA;;AAAA;AAGAH,qCAHA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMA,KA3CA;AA4CAI,eA5CA,yBA4CA;AACA;AACA;AACA;AACAF;AADA;;AAGAE;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACAD,cADA;;AAAA;AACAH,gCADA;AAEA;AAFA,yDAGAA,cAHA;;AAAA;AAGA;AAAAK;AACAL;AACA;AALA;AAAA;AAAA;AAAA;AAAA;;AAMAM;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQA,KA1DA;AA2DA;AACAC,mBA5DA,2BA4DAC,CA5DA,EA4DA;AAAA;;AACA;AACAC,8BADA;AAEAC;AAFA;AAIA;AACAF,YADA;AAEAN;AAFA;;AAIAK,+BACAI,IADA,CACA;AACA;AACAC;AACA,SAFA,EADA,CAKA;;;AACA;AACA;AACA;AACAC,6BADA;AAEAC;AAFA;;AAIA;AACA,WANA,MAMA;AACA;AACAD,6BADA;AAEAC;AAFA;AAIA;AACA;AACA,OArBA,EAsBAC,KAtBA,CAsBA;AACA;AACAH;AACA,SAFA,EADA,CAIA;;AACA,OA3BA;AA4BA,KAjGA;AAkGA;AACAI,kBAnGA,0BAmGAd,EAnGA,EAmGA;AAAA;;AACA;AACAO,8BADA;AAEAC;AAFA;;AAIAM;AAAAd;AAAA,SACAS,IADA,CACA;AACA;AACAC;AACA,SAFA;;AAGA;AACA;;AACA;AACA;AACA,OATA,EAUAG,KAVA,CAUA;AACA;AACAH;AACA,SAFA;AAGA,OAdA;AAeA;AAvHA;AA/DA","names":["components","songlist","data","songListId","currentPage","musicList","DownloadSongUrl","mvUrl","count","playListComment","user","avatarUrl","songMV","playListDetail","name","coverImgUrl","trackCount","creator","nickname","signature","tags","description","computed","userId","mounted","localStorage","JSON","methods","handleCurrentChange","that","getPlaylistDetail","id","res","getSongList","item","transMusicTime","collectPlaylist","t","target","background","then","loading","type","message","catch","deletePlayList"],"sourceRoot":"src/views","sources":["playListDetails.vue"],"sourcesContent":["<template>\n  <div class=\"list-wrap\">\n    <div class=\"pageName\">歌单详情</div>\n    <div class=\"descript\"></div>\n    <div>\n      <div class=\"wrap2\">\n        <!-- 歌单信息 -->\n        <div class=\"details\" id=\"list_detail\">\n          <div class=\"details-img\">\n            <img :src=\"playListDetail.coverImgUrl\" alt=\" \" />\n          </div>\n          <div class=\"detailsRight\">\n            <h3 style=\"margin-left: 0px; text-align: left; font-size: 20px\">\n              {{ playListDetail.name }}\n\n              <div\n                style=\"display: inline-block\"\n                v-if=\"playListDetail.creator.userId === userId\"\n              >\n                <button\n                  class=\"my-button\"\n                  @click=\"deletePlayList(playListDetail.id)\"\n                >\n                  删除歌单\n                </button>\n              </div>\n              <div\n                style=\"display: inline-block\"\n                v-if=\"playListDetail.creator.userId !== userId\"\n              >\n                <button class=\"my-button\" @click=\"collectPlaylist('1')\">\n                  收藏</button\n                ><button class=\"my-button\" @click=\"collectPlaylist('2')\">\n                  取消收藏\n                </button>\n              </div>\n            </h3>\n            <div class=\"playListCreator\">\n              <img :src=\"playListDetail.creator.avatarUrl\" alt=\" \" />\n              <span class=\"playListNickName\"\n                >&nbsp;&nbsp;&nbsp;&nbsp;{{\n                  playListDetail.creator.nickname\n                }}&nbsp;&nbsp;</span\n              ><span v-if=\"playListDetail.creator.signature\"\n                >&nbsp;&nbsp;-&nbsp;&nbsp;{{\n                  playListDetail.creator.signature\n                }}</span\n              >\n            </div>\n            <div class=\"playListTag\" v-if=\"playListDetail.tags.length !== 0\">\n              <span>标签:&nbsp;&nbsp;</span\n              ><span v-for=\"(tag, index) in playListDetail.tags\" :key=\"index\"\n                >{{ tag }}&nbsp;</span\n              >\n            </div>\n            <p class=\"playListIntro\">\n              {{ playListDetail.description }}\n            </p>\n\n            <!-- <i class=\"iFont el-icon-star-off\" @click=\"collectPlaylist\"></i> -->\n          </div>\n        </div>\n        <!-- 歌单歌曲列表 -->\n        <div class=\"countLine\">\n          歌曲：\n          <!-- <span v-if=\"musicList.length === 0\"\n            ><i class=\"el-icon-loading\"></i\n          ></span> -->\n          <!-- <span v-else>{{ musicList.length }}</span> -->\n          <span>{{ playListDetail.trackCount }}</span>\n        </div>\n        <!-- 歌单歌曲列表 -->\n        <ul class=\"wrap-center\">\n          <div v-if=\"musicList.length === 0\" class=\"loading\">\n            <i class=\"el-icon-loading\"></i>\n          </div>\n          <songlist :songlist=\"musicList\"></songlist>\n        </ul>\n        <!-- 歌单评论 -->\n        <!-- <div style=\"padding: 0px 50px\">\n          <div class=\"countLine\">评论({{ commentCount }}条)</div>\n          <div\n            class=\"hoverBackColor\"\n            v-for=\"item in playListComment\"\n            :key=\"item.id\"\n          >\n            <img\n              :src=\"item.user.avatarUrl\"\n              style=\"width: 50px; border-radius: 25px\"\n            />\n            <span\n              style=\"display: inline-block; margin-left: 10px; font-size: 15px\"\n              >{{ item.user.nickname }}&nbsp;&nbsp;:&nbsp;&nbsp;</span\n            >\n            <span style=\"margin-left: 20px; width: 750px\">\n              {{ item.content }}\n            </span>\n            <div style=\"height: 30px\">\n              <span style=\"float: right; width: 130px\"\n                >&nbsp;&nbsp;时间：{{ item.timeStr }}</span\n              ><span style=\"float: right\"\n                >{{ item.likedCount }} 赞&nbsp;&nbsp;&nbsp;</span\n              >\n            </div>\n          </div>\n\n          <div style=\"text-align: center\">\n            <el-pagination\n              v-if=\"commentCount != 0\"\n              @current-change=\"playListHandleCurrentChange\"\n              :current-page.sync=\"currentPage\"\n              :page-size=\"7\"\n              layout=\"prev, pager, next, jumper\"\n              :total=\"commentCount\"\n              :background=\"true\"\n            >\n            </el-pagination>\n          </div>\n        </div> -->\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getPlaylistDetail, getSongList, getPlayListComment } from \"@/api/api\";\nimport { collectPlaylist, deletePlayList } from \"@/api/needLogin/musicOperate\";\nimport { transMusicTime } from \"@/utils/commonApi\";\nimport songlist from \"@/components/songlist.vue\";\nexport default {\n  components: {\n    songlist,\n  },\n  data() {\n    return {\n      //歌单id\n      songListId: \"\",\n      //评论分页\n      currentPage: 1,\n      // 歌曲数组\n      musicList: [],\n      //下载音乐的地址\n      DownloadSongUrl: \"\",\n      //mv地址\n      mvUrl: \"\",\n      //搜索歌曲总数\n      count: \"\",\n      playListComment: [\n        {\n          user: {\n            avatarUrl: \"\",\n          },\n        },\n      ],\n      // commentCount: \"\",\n      //MV\n      songMV: [],\n      //歌单详情\n      playListDetail: {\n        name: \"\",\n        coverImgUrl: \"\",\n        trackCount: \"\",\n        creator: { avatarUrl: \"\", nickname: \"\", signature: \"\" },\n        tags: [],\n        description: \"\",\n      },\n      //userId: \"\", //用户id，用于鉴别歌单是否由用户自己创建的\n    };\n  },\n  computed: {\n    userId() {\n      return this.$store.state.user.userId;\n    },\n  },\n  mounted() {\n    //缓存id,解决params数据在刷新页面后丢失，导致无法获取到歌单id\n    if (this.$route.params.playListDetail) {\n      localStorage.setItem(\n        \"playListDetail\",\n        JSON.stringify(this.$route.params.playListDetail)\n      ); //存储对象类型需要转换成字符串\n    }\n    // 判断是否使用缓存\n    this.$route.params.playListDetail\n      ? (this.playListDetail = this.$route.params.playListDetail)\n      : (this.playListDetail = JSON.parse(\n          localStorage.getItem(\"playListDetail\")\n        )); //将字符串转成对象\n    this.getSongList();\n    this.getPlaylistDetail();\n    // this.getPlayListComment();\n  },\n  methods: {\n    /* //切换歌单评论\n    playListHandleCurrentChange(currentPage) {\n      var that = this;\n      that.currentPage = currentPage;\n      that.getPlayListComment();\n    }, */\n    /* //获取歌单评论\n    getPlayListComment() {\n      var that = this;\n      let params = {\n        id: that.playListDetail.id,\n        limit: 7,\n        offset: (that.currentPage - 1) * 7,\n      };\n      getPlayListComment(params).then(async (res) => {\n        // console.log(\"歌单评论：\", res.data);\n        this.playListComment = await res.data.comments;\n        that.commentCount = await res.data.total;\n        // console.log(\"歌曲评论：\", res.data);\n      });\n    }, */\n\n    //分页\n    handleCurrentChange: function (currentPage) {\n      // console.log(`当前页: ${currentPage}`);\n      this.currentPage = currentPage;\n      var that = this;\n      that.getPlaylistDetail(currentPage);\n    },\n\n    getPlaylistDetail() {\n      //传入歌单id获取歌曲id和歌单详情\n      var that = this;\n      let params = {\n        id: that.playListDetail.id,\n      };\n      getPlaylistDetail(params).then(async (res) => {\n        // console.log(\"----------------:\", res.data.privileges); //歌单歌曲\n        // console.log(\"--歌单详情-------:\", res.data.playlist); //歌单歌曲\n        that.playListDetail = await res.data.playlist;\n        // that.musicList = that.playListDetail.tracks;\n      });\n    },\n    getSongList() {\n      //获取歌单所有歌曲\n      var that = this;\n      let params = {\n        id: that.playListDetail.id,\n      };\n      getSongList(params).then(async (res) => {\n        that.musicList = await res.data.songs;\n        //给每个列表添加一个防抖\n        for (let item of that.musicList) {\n          that.$set(item, \"timer\", true);\n        }\n        transMusicTime(that.musicList, \"dt\");\n      });\n    },\n    //收藏/取消收藏歌单\n    collectPlaylist(t) {\n      const loading = this.$loading({\n        target: \"#list_detail\",\n        background: \"rgba(255,255,255,0.1)\",\n      });\n      let params = {\n        t: t,\n        id: this.playListDetail.id,\n      };\n      collectPlaylist(params)\n        .then((res) => {\n          this.$nextTick(() => {\n            loading.close();\n          });\n\n          // console.log(res, \"收藏返回\");\n          if (res.data.code === 200) {\n            if (t === \"1\") {\n              this.$message({\n                type: \"success\",\n                message: \"收藏成功-可在网易云音乐中查看\",\n              });\n              return;\n            } else if (t === \"2\") {\n              this.$message({\n                type: \"success\",\n                message: \"已取消收藏\",\n              });\n            }\n          }\n        })\n        .catch((err) => {\n          this.$nextTick(() => {\n            loading.close();\n          });\n          //如果不写catch,请求拦截器拦截后这里会报错\n        });\n    },\n    //删除歌单（自己的）\n    deletePlayList(id) {\n      const loading = this.$loading({\n        target: \"#list_detail\",\n        background: \"rgba(255,255,255,0.1)\",\n      });\n      deletePlayList({ id: id })\n        .then((res) => {\n          this.$nextTick(() => {\n            loading.close();\n          });\n          if (res.data.code === 200) {\n            this.$message.success(\"已从我的歌单删除\");\n            this.$router.go(-1);\n          }\n        })\n        .catch((err) => {\n          this.$nextTick(() => {\n            loading.close();\n          });\n        });\n    },\n  },\n};\n</script>\n\n<style lang=\"less\" scoped>\n.descript {\n  display: flex;\n  justify-content: space-between;\n  color: aliceblue;\n  font-weight: bolder;\n  padding: 10px 20px;\n  border-radius: 20px 20px 0 0;\n  background: rgba(95, 158, 160, 0.11);\n  box-sizing: border-box;\n}\n\n.list-wrap {\n  margin: 10px auto 0;\n  padding: 0 20px 10px;\n  width: 1120px;\n  border-radius: 20px;\n  background: rgba(95, 158, 160, 0.11);\n  box-sizing: border-box;\n\n  .wrap2 {\n    height: 680px;\n    border-radius: 0 0 10px 10px;\n    background: rgba(95, 158, 160, 0.11);\n    overflow-x: hidden;\n\n    &::-webkit-scrollbar {\n      display: none;\n    }\n\n    .details {\n      display: flex;\n      justify-content: space-between;\n      margin: 0 auto;\n      padding: 10px;\n      width: 98%;\n      height: 200px;\n      // border: 1px solid rgb(97, 226, 183);\n      border-radius: 10px;\n      background: rgba(34, 173, 197, 0.055);\n      box-sizing: border-box;\n\n      .details-img {\n        display: inline-block;\n        // width: 180px;\n        // height: 180px;\n        border-radius: 10px;\n\n        img {\n          width: 180px;\n          height: 180px;\n          border-radius: 10px;\n          transition: 0.2s;\n\n          &:hover {\n            transform: scale(1.03);\n          }\n        }\n      }\n\n      .detailsRight {\n        position: relative;\n        width: 820px;\n        height: 180px;\n\n        // background: rgb(181, 209, 152);\n        .playListCreator {\n          padding: 5px 0;\n          height: 30px;\n          font-size: 14px;\n          overflow: hidden;\n\n          img {\n            width: 30px;\n            height: 30px;\n            border-radius: 15px;\n          }\n        }\n\n        .playListTag {\n          padding: 5px 0;\n          height: 20px;\n          overflow: hidden;\n        }\n\n        .playListIntro {\n          padding: 5px 0;\n          width: 100%;\n          max-height: 65px;\n          font-size: 14px;\n          overflow-x: hidden;\n          text-indent: 1.5em;\n          &::-webkit-scrollbar {\n            display: none;\n          }\n        }\n\n        .playListNickName {\n          color: antiquewhite;\n        }\n      }\n    }\n\n    .wrap-center {\n      max-height: 500px;\n      overflow-x: hidden;\n      // border-top: 1px exclusion chocolate;\n\n      &::-webkit-scrollbar {\n        display: none;\n      }\n\n      .music-list {\n        position: relative;\n        display: flex;\n        margin: 5px auto;\n        padding: 0 10px;\n        width: 96%;\n        height: 30px;\n        line-height: 30px;\n        overflow: hidden;\n        color: rgba(255, 255, 255, 1);\n        font-weight: bolder;\n        -o-text-overflow: ellipsis;\n        text-overflow: ellipsis;\n        border-radius: 5px;\n        background: rgba(59, 165, 168, 0.048);\n        transition: 0.2s;\n\n        .music-list-span {\n          display: inline-block;\n          width: 270px;\n          text-align: center;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n        }\n\n        .option {\n          position: absolute;\n          padding-left: 150px;\n          width: 240px;\n          right: 10px;\n          box-sizing: border-box;\n\n          span {\n            display: inline-block;\n            width: 30px;\n\n            &:hover {\n              cursor: pointer;\n            }\n          }\n        }\n\n        &:hover {\n          color: aquamarine;\n          transform: scale(1.01);\n          // background: rgba(146, 240, 243, 0.247);\n        }\n      }\n    }\n  }\n}\n\n/deep/ .el-pager {\n  height: 30px !important;\n  background: none !important;\n}\n\n/deep/ .number,\n/deep/ .btn-prev,\n/deep/ .btn-quicknext,\n/deep/ .btn-next,\n/deep/ .el-input__inner,\n/deep/ .more {\n  color: #f2fff7 !important;\n  background: transparent !important;\n}\n\n/deep/ .number:hover,\n/deep/ .btn-prev:hover,\n/deep/ .btn-quicknext:hover,\n/deep/ .btn-next:hover,\n/deep/ .el-input__inner:hover,\n/deep/ .more:hover {\n  color: #f7a588 !important;\n}\n\n/deep/ .active {\n  color: #f7a588 !important;\n}\n\n/deep/ .el-input__inner {\n  border: none;\n}\n\n/deep/ .el-pagination__jump {\n  color: #f7dd88 !important;\n}\n\n//   btn-quickprev el-icon-more\n.iconhover {\n  transition: 0.2s;\n\n  &:hover {\n    color: rgb(247, 243, 45);\n  }\n}\n\n// .iFont {\n//   position: absolute;\n//   top: 0;\n//   right: 5px;\n//   font-size: 25px;\n//   &:hover {\n//     cursor: pointer;\n//     color: rgb(215, 233, 57);\n//   }\n// }\n</style>\n"]},"metadata":{},"sourceType":"module"}