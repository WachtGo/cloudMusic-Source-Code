{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Desktop/git\\u5DE5\\u4F5C\\u533A/cloudMusic-Source-Code/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAlbumContent as _getAlbumContent, getDownloadUrl as _getDownloadUrl, playMusicUrl, getSongLyric, getSongDetails } from '@/api/api';\nimport { download } from '@/api/download';\nimport { transMusicTime } from '@/api/commonApi.js';\nexport default {\n  // props: ['albumId'],\n  data: function data() {\n    return {\n      listen: [],\n      albumId: '',\n      albumSongs: [],\n      albumDesc: {}\n    };\n  },\n  mounted: function mounted() {\n    //缓存id,解决params数据在刷新页面后丢失，导致无法获取到歌单id\n    if (this.$route.params.albumId) {\n      localStorage.setItem('albumId', this.$route.params.albumId);\n    } // 判断是否使用缓存\n\n\n    this.$route.params.albumId ? this.albumId = this.$route.params.albumId : this.albumId = localStorage.getItem('albumId');\n    this.getAlbumContent();\n  },\n  methods: {\n    getAlbumContent: function getAlbumContent() {\n      var that = this;\n      var params = {\n        id: that.albumId\n      };\n\n      _getAlbumContent(params).then(function (res) {\n        // console.log(\"专辑信息---：\", res.data.album);\n        // console.log(\"专辑歌曲---：\", res.data.songs);\n        that.albumDesc = res.data.album;\n        that.albumSongs = res.data.songs; //给每个列表添加一个防抖\n\n        var _iterator = _createForOfIteratorHelper(that.albumSongs),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n            that.$set(item, \"timer\", true);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        var dt = \"dt\";\n        transMusicTime(that.albumSongs, dt);\n      });\n    },\n    //获取歌曲下载地址\n    getDownloadUrl: function getDownloadUrl(songId, songName) {\n      var that = this;\n      var params = {\n        id: songId\n      };\n\n      _getDownloadUrl(params).then(function (res) {\n        // console.log(\"歌曲下载地址：\", res.data.data.url);\n        download(res.data.data.url, songName);\n        that.$message({\n          type: \"success\",\n          message: \"开始下载了\"\n        });\n      });\n    },\n    listenMusic: function listenMusic(id, fee, index) {\n      //获取播放音乐链接\n      var that = this;\n\n      if (that.albumSongs[index].timer) {\n        if (fee == 1) {\n          that.$message({\n            message: \"VIP歌曲 - 只能试听30s\",\n            type: \"warning\"\n          });\n        }\n\n        playMusicUrl({\n          id: id\n        }).then(function (res) {\n          // console.log(\"播放音乐链接\", res.data.data[0].url);\n          if (res.data.data[0].url) {\n            that.songUrlAdd = res.data.data[0].url;\n          } else {\n            that.$message({\n              message: \"不好意思这首歌暂无版权\",\n              type: \"error\"\n            });\n            that.albumSongs[index].timer = false;\n            setTimeout(function () {\n              that.albumSongs[index].timer = true;\n            }, 3000);\n            return;\n          }\n        }), // 获取歌词\n        getSongLyric({\n          id: id\n        }).then(function (res) {\n          that.songlrc = res.data.lrc.lyric;\n        }), // 获取歌曲信息\n        getSongDetails({\n          ids: id\n        }).then(function (res) {\n          if (that.songUrlAdd != null) {\n            that.listen = [];\n            that.listen.push({\n              name: res.data.songs[0].name,\n              //歌曲名\n              artist: res.data.songs[0].ar[0].name,\n              //作者\n              url: that.songUrlAdd,\n              cover: res.data.songs[0].al.picUrl,\n              lrc: that.songlrc\n            }); // console.log(that.listen);\n\n            that.songUrlAdd = null;\n            that.songlrc = \"\";\n          }\n        });\n      }\n    },\n    //将歌曲添加到播放列表或者播放\n    playMusic: function playMusic(id, fee, index) {\n      //获取播放音乐链接\n      var that = this;\n\n      if (that.albumSongs[index].timer) {\n        if (fee == 1) {\n          that.$message({\n            message: \"VIP歌曲 - 只能试听30s\",\n            type: \"warning\"\n          });\n        }\n\n        playMusicUrl({\n          id: id\n        }).then(function (res) {\n          // console.log(\"播放音乐链接\", res.data.data[0].url);\n          if (res.data.data[0].url) {\n            that.songUrlAdd = res.data.data[0].url;\n          } else {\n            that.$message({\n              message: \"抱歉，这首歌暂无版权\",\n              type: \"error\"\n            });\n            that.albumSongs[index].timer = false;\n            setTimeout(function () {\n              that.albumSongs[index].timer = true;\n            }, 3000);\n            return;\n          }\n        }), // 获取歌词\n        getSongLyric({\n          id: id\n        }).then(function (res) {\n          that.songlrc = res.data.lrc.lyric;\n        }), // 获取歌曲信息\n        getSongDetails({\n          ids: id\n        }).then(function (res) {\n          // console.log(\"获取歌曲信息，添加到播放器：\", res.data.songs);\n          if (that.songUrlAdd != null) {\n            that.$store.commit(\"addSONG\", {\n              name: res.data.songs[0].name,\n              //歌曲名\n              artist: res.data.songs[0].ar[0].name,\n              //作者\n              url: that.songUrlAdd,\n              cover: res.data.songs[0].al.picUrl,\n              lrc: that.songlrc // theme: that.randomColor(),\n\n            }); // console.log(\n            //   that.$store.state.audio,\n            //   \"添加歌曲后的歌曲播放列表-----\"\n            // );\n\n            that.songUrlAdd = null;\n            that.songlrc = \"\";\n            that.albumSongs[index].timer = false;\n            setTimeout(function () {\n              that.albumSongs[index].timer = true;\n            }, 3000);\n          }\n        });\n      }\n    },\n    //跳转到歌曲详情\n    goSongDetails: function goSongDetails(ids) {\n      this.$router.push({\n        name: \"songDetails\",\n        params: {\n          songId: ids\n        }\n      });\n    },\n    //跳转到播放MV页面\n    playMV: function playMV(mvId) {\n      //获取mv播放链接\n      this.$router.push({\n        name: \"mvPlay\",\n        params: {\n          mvId: mvId\n        }\n      });\n    },\n    goMv: function goMv(mvId) {\n      this.$router.push({\n        name: \"mvPlay\",\n        params: {\n          mvId: mvId\n        }\n      });\n    },\n    //根据主题更换播放器颜色\n    randomColor: function randomColor() {\n      return \"#\".concat((Math.random() * 0xffffff << 0).toString(16));\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["getAlbumContent","getDownloadUrl","playMusicUrl","getSongLyric","getSongDetails","data","listen","albumId","albumSongs","albumDesc","mounted","localStorage","methods","id","that","transMusicTime","songId","songName","download","type","message","listenMusic","fee","index","then","setTimeout","ids","name","artist","url","cover","lrc","playMusic","goSongDetails","params","playMV","mvId","goMv","randomColor"],"sourceRoot":"src/views/albumDetail","sources":["albumDetail.vue"],"sourcesContent":["<style lang=\"less\" scoped>\r\nh3 {\r\n  height: 30px;\r\n  line-height: 30px;\r\n  text-align: center;\r\n}\r\n.descript {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  color: aliceblue;\r\n  font-weight: bolder;\r\n  padding: 10px 20px;\r\n  border-radius: 20px 20px 0 0;\r\n  background: rgba(221, 239, 243, 0.05);\r\n  box-sizing: border-box;\r\n}\r\n.list-wrap {\r\n  margin: 10px auto;\r\n  padding: 0 20px 10px;\r\n  width: 1120px;\r\n  border-radius: 20px;\r\n  background: rgba(221, 239, 243, 0.05);\r\n  box-sizing: border-box;\r\n\r\n  .ul {\r\n    height: 630px;\r\n    border-radius: 0 0 10px 10px;\r\n    background: rgba(221, 239, 243, 0.05);\r\n    overflow-x: hidden;\r\n\r\n    &::-webkit-scrollbar {\r\n      display: none;\r\n    }\r\n    .albumDetails {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      margin: 0 auto 10px;\r\n      padding: 10px;\r\n      width: 96%;\r\n      height: 170px;\r\n      // border: 1px solid rgb(97, 226, 183);\r\n      border-radius: 10px;\r\n      background: rgba(221, 239, 243, 0.05);\r\n      box-sizing: border-box;\r\n\r\n      .playListImg {\r\n        display: inline-block;\r\n        // width: 180px;\r\n        // height: 180px;\r\n        border-radius: 10px;\r\n\r\n        img {\r\n          width: 150px;\r\n          height: 150px;\r\n          border-radius: 10px;\r\n          transition: 0.2s;\r\n\r\n          &:hover {\r\n            transform: scale(1.03);\r\n          }\r\n        }\r\n      }\r\n\r\n      .detailsRight {\r\n        position: relative;\r\n        width: 820px;\r\n        height: 150px;\r\n        // background: rgb(181, 209, 152);\r\n\r\n        .option {\r\n          position: absolute;\r\n          bottom: 0;\r\n\r\n          .flexBetween {\r\n            .inline-block {\r\n              display: inline-block;\r\n              margin-right: 40px;\r\n              transition: 0.2s;\r\n              .musicSize {\r\n                color: rgb(193, 243, 226);\r\n                transition: 0.2s;\r\n                &:hover {\r\n                  color: rgb(109, 247, 201);\r\n                }\r\n              }\r\n\r\n              &:hover {\r\n                cursor: pointer;\r\n                // color: rgb(246, 255, 119);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        .songTns {\r\n          width: 100%;\r\n          font-size: 14px;\r\n          overflow-x: hidden;\r\n\r\n          &::-webkit-scrollbar {\r\n            display: none;\r\n          }\r\n        }\r\n        .aliasClass {\r\n          position: absolute;\r\n          top: 69px;\r\n        }\r\n        .artistPic {\r\n          margin-right: 10px;\r\n          width: 30px;\r\n          height: 30px;\r\n          border-radius: 15px;\r\n        }\r\n        .playListNickName {\r\n          display: inline-block;\r\n          margin-right: 20px;\r\n        }\r\n\r\n        .musicSize {\r\n          color: rgb(170, 240, 240);\r\n        }\r\n      }\r\n    }\r\n    #singleSongs {\r\n      background: rgba(221, 239, 243, 0.05);\r\n    }\r\n    .music-list {\r\n      display: flex;\r\n      padding: 10px 10px;\r\n      width: 1080px;\r\n      overflow: hidden;\r\n      color: rgba(255, 255, 255, 1);\r\n      font-weight: bolder;\r\n      -o-text-overflow: ellipsis;\r\n      text-overflow: ellipsis;\r\n      background: rgba(95, 158, 160, 0.322);\r\n      transition: 0.2s;\r\n\r\n      .music-list-span {\r\n        display: inline-block;\r\n        width: 270px;\r\n        text-align: center;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        white-space: nowrap;\r\n      }\r\n      .option {\r\n        display: inline-block;\r\n        width: 250px;\r\n        text-align: center;\r\n\r\n        span {\r\n          display: inline-block;\r\n          width: 30px;\r\n          &:hover {\r\n            cursor: pointer;\r\n          }\r\n        }\r\n      }\r\n\r\n      &:hover {\r\n        background: rgba(76, 152, 155, 0.527);\r\n      }\r\n    }\r\n  }\r\n}\r\n.pagination {\r\n  text-align: center;\r\n  background: none !important;\r\n}\r\n/deep/ .el-pager {\r\n  background: none !important;\r\n}\r\n/deep/ .number,\r\n/deep/ .btn-prev,\r\n/deep/ .btn-quicknext,\r\n/deep/ .btn-next,\r\n/deep/ .el-input__inner,\r\n/deep/ .more {\r\n  color: #f2fff7 !important;\r\n  background: transparent !important;\r\n}\r\n/deep/ .number:hover,\r\n/deep/ .btn-prev:hover,\r\n/deep/ .btn-quicknext:hover,\r\n/deep/ .btn-next:hover,\r\n/deep/ .el-input__inner:hover,\r\n/deep/ .more:hover {\r\n  color: #f7a588 !important;\r\n}\r\n/deep/ .active {\r\n  color: #f7a588 !important;\r\n}\r\n/deep/ .el-input__inner {\r\n  border: none;\r\n}\r\n/deep/ .el-pagination__jump {\r\n  color: #f7dd88 !important;\r\n}\r\n.iconhover {\r\n  transition: 0.2s;\r\n  &:hover {\r\n    color: rgb(247, 243, 45);\r\n  }\r\n}\r\n</style>\r\n\r\n<template>\r\n  <div class=\"list-wrap\">\r\n    <h3>专辑详情</h3>\r\n    <div class=\"descript\"></div>\r\n    <div>\r\n      <div class=\"ul\">\r\n        <div class=\"albumDetails\">\r\n          <div class=\"playListImg\">\r\n            <img :src=\"albumDesc.blurPicUrl\"\r\n                 alt=\"\" />\r\n          </div>\r\n          <div class=\"detailsRight\">\r\n            <h3 style=\"margin-left: 0px; text-align: left; font-size: 20px\">\r\n              {{ albumDesc.name }}\r\n            </h3>\r\n            <div style=\"font-size: 14px\">\r\n              <div class=\"aliasClass\">\r\n                <img class=\"artistPic\"\r\n                     :src=\"albumDesc.artist.img1v1Url\"\r\n                     alt=\"\" />-\r\n                <span class=\"playListNickName\">{{\r\n                  albumDesc.artist.name\r\n                }}</span>\r\n              </div>\r\n\r\n              <!-- <div class=\"option\">\r\n                <div class=\"flexBetween\">\r\n                  <span\r\n                    class=\"inline-block\"\r\n                    @click=\"getSingerSongList('songSwitch')\"\r\n                    >收藏：<span class=\"musicSize\">{{\r\n                      albumDesc.musicSize\r\n                    }}</span></span\r\n                  >\r\n                  <span class=\"inline-block\"\r\n                    >专辑：<span class=\"musicSize\">{{\r\n                      albumDesc.albumSize\r\n                    }}</span>\r\n                  </span>\r\n                  <span\r\n                    class=\"inline-block\"\r\n                    @click=\"getSingerMvList('mvSwitch')\"\r\n                    >MV：<span class=\"musicSize\">{{ albumDesc.mvSize }}</span>\r\n                  </span>\r\n                </div>\r\n              </div> -->\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <!-- <div class=\"singerDetail\" v-if=\"tagSwitch.detailSwitch\">\r\n          <h3 style=\"font-size: 15px\">简介：</h3>\r\n          <p>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{ albumDesc.briefDesc }}\r\n          </p>\r\n        </div> -->\r\n        <div id=\"singleSongs\">\r\n          <h3>专辑歌曲：{{ albumSongs.length }}首</h3>\r\n          <div class=\"SingsList\"\r\n               v-for=\"(item, index) in albumSongs\"\r\n               :key=\"index\">\r\n            <span class=\"song-list\"\r\n                  style=\"width: 20px\">{{ index + 1 }}.</span>\r\n            <div @dblclick=\"goSongDetails(item.id)\">\r\n              <span class=\"song-list\"\r\n                    style=\"width: 350px\">\r\n                {{ item.name }}\r\n              </span>\r\n              <span class=\"song-list\"\r\n                    style=\"width: 250px; text-align: center\">\r\n                {{ item.ar[0].name }}\r\n              </span>\r\n              <span class=\"song-list\"\r\n                    style=\"width: 230px\">\r\n                {{ item.dt }}\r\n              </span>\r\n              <span class=\"song-list\"\r\n                    style=\"width: 150px\">\r\n              </span>\r\n            </div>\r\n            <span class=\"song-list song-list-option\">\r\n              <span @click.stop=\"listenMusic(item.id, item.fee, index)\"><i class=\"el-icon-headset iconhover\"></i></span>\r\n              <!-- 添加到播放列表 -->\r\n              <span v-if=\"item.fee == 0 || item.fee == 8\"\r\n                    @click.stop=\"playMusic(item.id, item.fee, index)\"><i class=\"el-icon-folder-add iconhover\"></i>\r\n              </span>\r\n              <span v-if=\"Boolean(item.mv)\"\r\n                    @click.stop=\"playMV(item.mv)\"><i class=\"el-icon-video-camera iconhover\"></i>\r\n              </span>\r\n              <span v-if=\"item.fee == 0\"\r\n                    @click.stop=\"getDownloadUrl(item.id, item.name)\"><i class=\"el-icon-download iconhover\"></i>\r\n              </span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-show=\"false\">\r\n      <aplayer :autoplay=\"true\"\r\n               :fixed=\"true\"\r\n               :audio=\"listen\"\r\n               :liric-type=\"1\">\r\n      </aplayer>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  getAlbumContent,\r\n  getDownloadUrl,\r\n  playMusicUrl,\r\n  getSongLyric,\r\n  getSongDetails,\r\n} from '@/api/api';\r\nimport { download } from '@/api/download';\r\nimport { transMusicTime } from '@/api/commonApi.js'\r\n\r\nexport default {\r\n  // props: ['albumId'],\r\n  data () {\r\n    return {\r\n      listen: [],\r\n      albumId: '',\r\n      albumSongs: [],\r\n      albumDesc: {},\r\n    };\r\n  },\r\n  mounted () {\r\n    //缓存id,解决params数据在刷新页面后丢失，导致无法获取到歌单id\r\n    if (this.$route.params.albumId) { localStorage.setItem('albumId', this.$route.params.albumId) }\r\n    // 判断是否使用缓存\r\n    this.$route.params.albumId ? this.albumId = this.$route.params.albumId : this.albumId = localStorage.getItem('albumId')\r\n    this.getAlbumContent();\r\n  },\r\n  methods: {\r\n\r\n    getAlbumContent () {\r\n      var that = this;\r\n      let params = {\r\n        id: that.albumId,\r\n      };\r\n      getAlbumContent(params).then((res) => {\r\n        // console.log(\"专辑信息---：\", res.data.album);\r\n        // console.log(\"专辑歌曲---：\", res.data.songs);\r\n        that.albumDesc = res.data.album;\r\n        that.albumSongs = res.data.songs;\r\n        //给每个列表添加一个防抖\r\n        for (let item of that.albumSongs) {\r\n          that.$set(item, \"timer\", true);\r\n        }\r\n        let dt = \"dt\";\r\n        transMusicTime(that.albumSongs, dt);\r\n      });\r\n    },\r\n\r\n    //获取歌曲下载地址\r\n    getDownloadUrl (songId, songName) {\r\n      var that = this;\r\n      let params = {\r\n        id: songId,\r\n      };\r\n      getDownloadUrl(params).then((res) => {\r\n        // console.log(\"歌曲下载地址：\", res.data.data.url);\r\n        download(res.data.data.url, songName);\r\n        that.$message({\r\n          type: \"success\",\r\n          message: \"开始下载了\",\r\n        });\r\n      });\r\n    },\r\n    listenMusic (id, fee, index) {\r\n      //获取播放音乐链接\r\n      var that = this;\r\n      if (that.albumSongs[index].timer) {\r\n        if (fee == 1) {\r\n          that.$message({\r\n            message: \"VIP歌曲 - 只能试听30s\",\r\n            type: \"warning\",\r\n          });\r\n        }\r\n        playMusicUrl({\r\n          id: id,\r\n        }).then((res) => {\r\n          // console.log(\"播放音乐链接\", res.data.data[0].url);\r\n          if (res.data.data[0].url) {\r\n            that.songUrlAdd = res.data.data[0].url;\r\n          } else {\r\n            that.$message({\r\n              message: \"不好意思这首歌暂无版权\",\r\n              type: \"error\",\r\n            });\r\n            that.albumSongs[index].timer = false;\r\n            setTimeout(() => {\r\n              that.albumSongs[index].timer = true;\r\n            }, 3000);\r\n            return;\r\n          }\r\n        }),\r\n          // 获取歌词\r\n          getSongLyric({\r\n            id: id,\r\n          }).then((res) => {\r\n            that.songlrc = res.data.lrc.lyric;\r\n          }),\r\n          // 获取歌曲信息\r\n          getSongDetails({\r\n            ids: id,\r\n          }).then((res) => {\r\n            if (that.songUrlAdd != null) {\r\n              that.listen = [];\r\n              that.listen.push({\r\n                name: res.data.songs[0].name, //歌曲名\r\n                artist: res.data.songs[0].ar[0].name, //作者\r\n                url: that.songUrlAdd,\r\n                cover: res.data.songs[0].al.picUrl,\r\n                lrc: that.songlrc,\r\n              });\r\n              // console.log(that.listen);\r\n              that.songUrlAdd = null;\r\n              that.songlrc = \"\";\r\n            }\r\n          });\r\n      }\r\n    },\r\n    //将歌曲添加到播放列表或者播放\r\n    playMusic (id, fee, index) {\r\n      //获取播放音乐链接\r\n      var that = this;\r\n      if (that.albumSongs[index].timer) {\r\n        if (fee == 1) {\r\n          that.$message({\r\n            message: \"VIP歌曲 - 只能试听30s\",\r\n            type: \"warning\",\r\n          });\r\n        }\r\n        playMusicUrl({\r\n          id: id,\r\n        }).then((res) => {\r\n          // console.log(\"播放音乐链接\", res.data.data[0].url);\r\n          if (res.data.data[0].url) {\r\n            that.songUrlAdd = res.data.data[0].url;\r\n          } else {\r\n            that.$message({\r\n              message: \"抱歉，这首歌暂无版权\",\r\n              type: \"error\",\r\n            });\r\n            that.albumSongs[index].timer = false;\r\n            setTimeout(() => {\r\n              that.albumSongs[index].timer = true;\r\n            }, 3000);\r\n            return;\r\n          }\r\n        }),\r\n          // 获取歌词\r\n          getSongLyric({\r\n            id: id,\r\n          }).then((res) => {\r\n            that.songlrc = res.data.lrc.lyric;\r\n          }),\r\n          // 获取歌曲信息\r\n          getSongDetails({\r\n            ids: id,\r\n          }).then((res) => {\r\n            // console.log(\"获取歌曲信息，添加到播放器：\", res.data.songs);\r\n            if (that.songUrlAdd != null) {\r\n              that.$store.commit(\"addSONG\", {\r\n                name: res.data.songs[0].name, //歌曲名\r\n                artist: res.data.songs[0].ar[0].name, //作者\r\n                url: that.songUrlAdd,\r\n                cover: res.data.songs[0].al.picUrl,\r\n                lrc: that.songlrc,\r\n                // theme: that.randomColor(),\r\n              });\r\n              // console.log(\r\n              //   that.$store.state.audio,\r\n              //   \"添加歌曲后的歌曲播放列表-----\"\r\n              // );\r\n              that.songUrlAdd = null;\r\n              that.songlrc = \"\";\r\n              that.albumSongs[index].timer = false;\r\n              setTimeout(() => {\r\n                that.albumSongs[index].timer = true;\r\n              }, 3000);\r\n            }\r\n          });\r\n      }\r\n    },\r\n    //跳转到歌曲详情\r\n    goSongDetails (ids) {\r\n      this.$router.push({\r\n        name: \"songDetails\",\r\n        params: {\r\n          songId: ids,\r\n        },\r\n      });\r\n    },\r\n    //跳转到播放MV页面\r\n    playMV (mvId) {\r\n      //获取mv播放链接\r\n      this.$router.push({\r\n        name: \"mvPlay\",\r\n        params: { mvId: mvId },\r\n      });\r\n    },\r\n    goMv (mvId) {\r\n      this.$router.push({\r\n        name: \"mvPlay\",\r\n        params: {\r\n          mvId: mvId,\r\n        },\r\n      });\r\n    },\r\n    //根据主题更换播放器颜色\r\n    randomColor () {\r\n      return `#${((Math.random() * 0xffffff) << 0).toString(16)}`;\r\n    },\r\n  },\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module"}