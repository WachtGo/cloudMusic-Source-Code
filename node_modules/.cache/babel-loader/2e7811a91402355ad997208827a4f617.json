{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getDownloadUrl, getSongDetails, getSongComment } from '@/api/api';\nimport { download } from \"@/utils/commonApi\";\nexport default {\n  // props: ['songId'],\n  data() {\n    return {\n      //评论分页\n      currentPage: 1,\n      songUrlAdd: null,\n      songId: '',\n      //接收的歌曲id\n      songDetails: {\n        al: {\n          picUrl: ''\n        }\n      },\n      //歌曲详情\n      songComment: [],\n      commentCount: 0,\n      //搜索歌曲总数\n      count: ''\n    };\n  },\n\n  mounted() {\n    ////缓存id,解决params数据在刷新页面后丢失，导致无法获取到歌手id\n    if (this.$route.params.songId) {\n      localStorage.setItem('songId', this.$route.params.songId);\n    } //判断是否使用缓存\n\n\n    this.$route.params.songId ? this.songId = this.$route.params.songId : this.songId = localStorage.getItem('songId');\n    this.getSongDetails();\n    this.getSongComment();\n  },\n\n  methods: {\n    // 分页\n    songhandleCurrentChange(currentPage) {\n      var that = this;\n      that.currentPage = currentPage;\n      that.getSongComment();\n    },\n\n    //获取歌曲详情\n    getSongDetails() {\n      var that = this;\n      let params = {\n        ids: that.songId\n      };\n      getSongDetails(params).then(res => {\n        that.songDetails = res.data.songs[0];\n        that.$set(that.songDetails, 'timer', true);\n        let min = parseInt(that.songDetails.dt / 1000 / 60);\n        let sec = parseInt(that.songDetails.dt / 1000 % 60);\n\n        if (min < 10) {\n          min = '0' + min;\n        }\n\n        if (sec < 10) {\n          sec = '0' + sec;\n        }\n\n        that.songDetails.dt = min + ':' + sec; // console.log(\"歌曲详情\", res.data.songs[0]);\n      });\n    },\n\n    //获取歌曲评论\n    getSongComment() {\n      var that = this;\n      let params = {\n        id: that.songId,\n        limit: 7,\n        offset: (that.currentPage - 1) * 7\n      };\n      getSongComment(params).then(res => {\n        that.songComment = res.data.comments;\n        that.commentCount = res.data.total; // console.log(\"歌曲评论：\", res.data);\n      });\n    },\n\n    //试听音乐\n    listenMusic(songDetails) {\n      console.log('歌曲信息---：', songDetails);\n\n      if (songDetails.timer) {\n        //获取播放音乐链接\n        if (songDetails.noCopyrightRcmd) {\n          this.$message({\n            message: \"这首歌暂无版权\",\n            type: \"error\"\n          });\n          songDetails.timer = false;\n          setTimeout(() => {\n            songDetails.timer = true;\n          }, 3000);\n          return;\n        }\n\n        if (songDetails.fee == 1) {\n          this.$message({\n            message: \"VIP歌曲 - 只能试听30s\",\n            type: \"warning\"\n          });\n        } // 获取歌词\n        // getSongLyric({\n        //   id: id,\n        // }).then((res) => {\n        //   songlrc = res.data.lrc.lyric;\n        // }),\n\n\n        this.$store.commit(\"aplayer/addAUDITION\", {\n          name: songDetails.name,\n          //歌曲名\n          artist: songDetails.ar[0].name,\n          //作者\n          // url: songUrlAdd,\n          url: `https://music.163.com/song/media/outer/url?id=${songDetails.id}.mp3`,\n          cover: songDetails.al.picUrl,\n          //   lrc: songlrc,\n          id: songDetails.id\n        });\n        songDetails.timer = false;\n        setTimeout(() => {\n          songDetails.timer = true;\n        }, 3000);\n      }\n    },\n\n    //添加歌曲到播放列表\n    playMusic(songDetails) {\n      if (songDetails.timer) {\n        //获取播放音乐链接\n        if (songDetails.noCopyrightRcmd) {\n          this.$message({\n            message: \"这首歌暂无版权\",\n            type: \"error\"\n          });\n          songDetails.timer = false;\n          setTimeout(() => {\n            songDetails.timer = true;\n          }, 3000);\n          return;\n        }\n\n        if (songDetails.fee == 1) {\n          this.$message({\n            message: \"VIP歌曲 - 只能试听30s\",\n            type: \"warning\"\n          });\n        } // 获取歌词\n        // getSongLyric({\n        //   id: id,\n        // }).then((res) => {\n        //   songlrc = res.data.lrc.lyric;\n        // }),\n\n\n        this.$store.commit(\"aplayer/addSONG\", {\n          name: songDetails.name,\n          //歌曲名\n          artist: songDetails.ar[0].name,\n          //作者\n          // url: songUrlAdd,\n          url: `https://music.163.com/song/media/outer/url?id=${songDetails.id}.mp3`,\n          cover: songDetails.al.picUrl,\n          //   lrc: songlrc,\n          id: songDetails.id\n        });\n        songDetails.timer = false;\n        setTimeout(() => {\n          songDetails.timer = true;\n        }, 3000);\n      }\n    },\n\n    playMV(mvId) {\n      //获取mv播放链接\n      this.$router.push({\n        name: \"mvPlay\",\n        params: {\n          mvId: mvId\n        }\n      });\n    },\n\n    //获取歌曲下载地址\n    getDownloadUrl(songId, songName) {\n      var that = this;\n      that.$message({\n        type: \"success\",\n        message: \"正在尝试下载\"\n      });\n      let params = {\n        id: songId\n      };\n      getDownloadUrl(params).then(res => {\n        // console.log('歌曲下载地址：', res.data)\n        // console.log(\"歌曲下载地址：\", res.data.data.url);\n        // download(res.data.data.url, songName)\n        download(res.data.data[0].url, songName);\n        that.$message({\n          type: \"success\",\n          message: \"开始下载了\"\n        });\n      });\n    },\n\n    playMV(mvId) {\n      //获取mv播放链接\n      this.$router.push({\n        name: 'mvPlay',\n        params: {\n          mvId: mvId\n        }\n      });\n    },\n\n    //根据主题更换播放器颜色\n    randomColor() {\n      return `#${(Math.random() * 0xffffff << 0).toString(16)}`;\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsFA,SACAA,cADA,EAEAC,cAFA,EAGAC,cAHA,QAIA,WAJA;AAKA;AACA;AACA;AACAC;AACA;AACA;AACAC,oBAFA;AAGAC,sBAHA;AAIAC,gBAJA;AAIA;AACAC;AAAAC;AAAAC;AAAA;AAAA,OALA;AAKA;AACAC,qBANA;AAOAC,qBAPA;AAQA;AACAC;AATA;AAWA,GAdA;;AAeAC;AACA;AACA;AACAC;AACA,KAJA,CAKA;;;AACA,gCACA,uCADA,GAEA,4CAFA;AAGA;AACA;AACA,GA1BA;;AA2BAC;AACA;AACAC;AACA;AACAC;AACAA;AACA,KANA;;AAOA;AACAhB;AACA;AACA;AACAiB;AADA;AAGAjB;AACAgB;AACAA;AACA;AACA;;AACA;AACAE;AACA;;AACA;AACAC;AACA;;AACAH,8CAXA,CAYA;AACA,OAbA;AAcA,KA3BA;;AA4BA;AACAf;AACA;AACA;AACAmB,uBADA;AAEAC,gBAFA;AAGAC;AAHA;AAKArB;AACAe;AACAA,2CAFA,CAGA;AACA,OAJA;AAKA,KAzCA;;AA0CA;AACAO;AACAC;;AACA;AACA;AACA;AACA;AACAC,8BADA;AAEAC;AAFA;AAIApB;AACAqB;AACArB;AACA,WAFA,EAEA,IAFA;AAGA;AACA;;AACA;AACA;AACAmB,sCADA;AAEAC;AAFA;AAIA,SAlBA,CAmBA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACAE,gCADA;AACA;AACAC,wCAFA;AAEA;AACA;AACAC,oFAJA;AAKAC,sCALA;AAMA;AACAX;AAPA;AASAd;AACAqB;AACArB;AACA,SAFA,EAEA,IAFA;AAGA;AACA,KApFA;;AAqFA;AACA0B;AACA;AACA;AACA;AACA;AACAP,8BADA;AAEAC;AAFA;AAIApB;AACAqB;AACArB;AACA,WAFA,EAEA,IAFA;AAGA;AACA;;AACA;AACA;AACAmB,sCADA;AAEAC;AAFA;AAIA,SAlBA,CAmBA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACAE,gCADA;AACA;AACAC,wCAFA;AAEA;AACA;AACAC,oFAJA;AAKAC,sCALA;AAMA;AACAX;AAPA;AASAd;AACAqB;AACArB;AACA,SAFA,EAEA,IAFA;AAGA;AACA,KA9HA;;AA+HA2B;AACA;AACA;AACAL,sBADA;AAEAM;AAAAC;AAAA;AAFA;AAIA,KArIA;;AAsIA;AACApC;AACA;AACAiB;AACAU,uBADA;AAEAD;AAFA;AAIA;AACAL;AADA;AAGArB;AACA;AACA;AACA;AACAqC;AACApB;AACAU,yBADA;AAEAD;AAFA;AAIA,OATA;AAUA,KA1JA;;AA2JAQ;AACA;AACA;AACAL,sBADA;AAEAM;AAAAC;AAAA;AAFA;AAIA,KAjKA;;AAkKA;AACAE;AACA;AACA;;AArKA;AA3BA","names":["getDownloadUrl","getSongDetails","getSongComment","data","currentPage","songUrlAdd","songId","songDetails","al","picUrl","songComment","commentCount","count","mounted","localStorage","methods","songhandleCurrentChange","that","ids","min","sec","id","limit","offset","listenMusic","console","message","type","setTimeout","name","artist","url","cover","playMusic","playMV","params","mvId","download","randomColor"],"sourceRoot":"src/views/songDetails","sources":["songDetails.vue"],"sourcesContent":["<template>\r\n  <div class=\"list-wrap\">\r\n    <h3>歌曲详情</h3>\r\n    <div class=\"descript\"></div>\r\n    <div>\r\n      <ul>\r\n        <div class=\"details\"\r\n             v-if=\"songId\">\r\n          <div class=\"details-img\">\r\n            <img :src=\"songDetails.al.picUrl\"\r\n                 alt=\"\" />\r\n          </div>\r\n          <div class=\"detailsRight\">\r\n            <h3 style=\"margin-left: 0px; text-align: left; font-size: 20px\">\r\n              {{ songDetails.name }}\r\n            </h3>\r\n            <div style=\"margin: 10px 0 10px 0; height: 30px; font-size: 14px\">\r\n              <span class=\"playListNickName\">{{ songDetails.ar[0].name }}</span><span><br />\r\n                时长&nbsp;&nbsp;-&nbsp;&nbsp;<span style=\"color: antiquewhite\">{{ songDetails.dt }}</span></span>\r\n              <div class=\"option\">\r\n                <div class=\"flexBetween\">\r\n                  <!-- 试听 -->\r\n                  <span class=\"inline-block\"\r\n                        style=\"margin-right: 5px\"\r\n                        @click=\"listenMusic(songDetails)\"><i class=\"el-icon-headset iconhover\"></i></span>\r\n                  <!-- 添加到播放列表 -->\r\n                  <span class=\"inline-block\"\r\n                        style=\"margin-right: 5px\"\r\n                        v-if=\"songDetails.fee == 0 || songDetails.fee == 8\"\r\n                        @click.stop=\"playMusic(songDetails)\"><i class=\"el-icon-folder-add iconhover\"></i>\r\n                  </span>\r\n                  <span class=\"inline-block\"\r\n                        style=\"\"\r\n                        v-if=\"Boolean(songDetails.mv)\"\r\n                        @click=\"playMV(songDetails.mv)\"><i class=\"el-icon-video-camera iconhover\"></i>&nbsp;\r\n                  </span>\r\n\r\n                  <span class=\"inline-block\"\r\n                        style=\"margin-right: 5px\"\r\n                        v-if=\"songDetails.fee == 0 || songDetails.fee == 8\"\r\n                        @click=\"getDownloadUrl(songDetails.id, songDetails.name)\"><i class=\"el-icon-download iconhover\"></i>&nbsp;</span><span v-if=\"songDetails.fee != 0\">&nbsp;&nbsp;&nbsp; </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div style=\"margin-top: 30px; font-size: 14px\">\r\n              <span>{{ songDetails.alia[0] }}</span>\r\n            </div>\r\n            <br />\r\n          </div>\r\n        </div>\r\n\r\n        <div style=\"padding: 0px 50px ;\">\r\n          <h3 style=\"margin: 5px 0 10px 0\">\r\n            <span v-if=\"commentCount\">评论({{ commentCount }}条)</span>\r\n          </h3>\r\n          <div class=\"hoverBackColor\"\r\n               v-for=\"item in songComment\"\r\n               :key=\"item.id\">\r\n            <img :src=\"item.user.avatarUrl\"\r\n                 style=\"width: 50px; border-radius: 25px\" />\r\n            <span style=\"display: inline-block; margin-left: 10px; font-size: 15px\">{{ item.user.nickname }}&nbsp;&nbsp;:&nbsp;&nbsp;</span>\r\n            <span style=\"margin-left: 20px; width: 750px\">\r\n              {{ item.content }}\r\n            </span>\r\n            <div style=\"height: 30px\">\r\n              <span style=\"float: right; width: 130px\">&nbsp;&nbsp;时间：{{ item.timeStr }}</span><span style=\"float: right\">{{ item.likedCount }} 赞&nbsp;&nbsp;&nbsp;</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"pagination\">\r\n            <el-pagination v-if=\"commentCount != 0\"\r\n                           @current-change=\"songhandleCurrentChange\"\r\n                           :current-page.sync=\"currentPage\"\r\n                           :page-size=\"7\"\r\n                           layout=\"prev, pager, next, jumper\"\r\n                           :total=\"commentCount\"\r\n                           :background=\"true\">\r\n            </el-pagination>\r\n          </div>\r\n        </div>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  getDownloadUrl,\r\n  getSongDetails,\r\n  getSongComment,\r\n} from '@/api/api'\r\nimport { download } from \"@/utils/commonApi\";\r\nexport default {\r\n  // props: ['songId'],\r\n  data() {\r\n    return {\r\n      //评论分页\r\n      currentPage: 1,\r\n      songUrlAdd: null,\r\n      songId: '', //接收的歌曲id\r\n      songDetails: { al: { picUrl: '' } }, //歌曲详情\r\n      songComment: [],\r\n      commentCount: 0,\r\n      //搜索歌曲总数\r\n      count: '',\r\n    }\r\n  },\r\n  mounted() {\r\n    ////缓存id,解决params数据在刷新页面后丢失，导致无法获取到歌手id\r\n    if (this.$route.params.songId) {\r\n      localStorage.setItem('songId', this.$route.params.songId)\r\n    }\r\n    //判断是否使用缓存\r\n    this.$route.params.songId\r\n      ? (this.songId = this.$route.params.songId)\r\n      : (this.songId = localStorage.getItem('songId'))\r\n    this.getSongDetails()\r\n    this.getSongComment()\r\n  },\r\n  methods: {\r\n    // 分页\r\n    songhandleCurrentChange(currentPage) {\r\n      var that = this\r\n      that.currentPage = currentPage\r\n      that.getSongComment()\r\n    },\r\n    //获取歌曲详情\r\n    getSongDetails() {\r\n      var that = this\r\n      let params = {\r\n        ids: that.songId,\r\n      }\r\n      getSongDetails(params).then((res) => {\r\n        that.songDetails = res.data.songs[0]\r\n        that.$set(that.songDetails, 'timer', true)\r\n        let min = parseInt(that.songDetails.dt / 1000 / 60)\r\n        let sec = parseInt((that.songDetails.dt / 1000) % 60)\r\n        if (min < 10) {\r\n          min = '0' + min\r\n        }\r\n        if (sec < 10) {\r\n          sec = '0' + sec\r\n        }\r\n        that.songDetails.dt = min + ':' + sec\r\n        // console.log(\"歌曲详情\", res.data.songs[0]);\r\n      })\r\n    },\r\n    //获取歌曲评论\r\n    getSongComment() {\r\n      var that = this\r\n      let params = {\r\n        id: that.songId,\r\n        limit: 7,\r\n        offset: (that.currentPage - 1) * 7,\r\n      }\r\n      getSongComment(params).then((res) => {\r\n        that.songComment = res.data.comments\r\n        that.commentCount = res.data.total\r\n        // console.log(\"歌曲评论：\", res.data);\r\n      })\r\n    },\r\n     //试听音乐\r\n    listenMusic(songDetails) {\r\n      console.log('歌曲信息---：',songDetails)\r\n      if (songDetails.timer) {\r\n      //获取播放音乐链接\r\n      if (songDetails.noCopyrightRcmd) {\r\n      this.$message({\r\n        message: \"这首歌暂无版权\",\r\n        type: \"error\",\r\n      });\r\n      songDetails.timer = false;\r\n      setTimeout(() => {\r\n        songDetails.timer = true;\r\n      }, 3000);\r\n      return;\r\n    }\r\n    if (songDetails.fee == 1) {\r\n      this.$message({\r\n        message: \"VIP歌曲 - 只能试听30s\",\r\n        type: \"warning\",\r\n      });\r\n    }\r\n    // 获取歌词\r\n    // getSongLyric({\r\n    //   id: id,\r\n    // }).then((res) => {\r\n    //   songlrc = res.data.lrc.lyric;\r\n    // }),\r\n    this.$store.commit(\"aplayer/addAUDITION\", {\r\n      name: songDetails.name, //歌曲名\r\n      artist: songDetails.ar[0].name, //作者\r\n      // url: songUrlAdd,\r\n      url: `https://music.163.com/song/media/outer/url?id=${songDetails.id}.mp3`,\r\n      cover: songDetails.al.picUrl,\r\n      //   lrc: songlrc,\r\n      id: songDetails.id,\r\n    });\r\n    songDetails.timer = false;\r\n    setTimeout(() => {\r\n      songDetails.timer = true;\r\n    }, 3000);\r\n      }\r\n    },\r\n    //添加歌曲到播放列表\r\n    playMusic(songDetails) {\r\n      if (songDetails.timer) {\r\n      //获取播放音乐链接\r\n      if (songDetails.noCopyrightRcmd) {\r\n      this.$message({\r\n        message: \"这首歌暂无版权\",\r\n        type: \"error\",\r\n      });\r\n      songDetails.timer = false;\r\n      setTimeout(() => {\r\n        songDetails.timer = true;\r\n      }, 3000);\r\n      return;\r\n    }\r\n    if (songDetails.fee == 1) {\r\n      this.$message({\r\n        message: \"VIP歌曲 - 只能试听30s\",\r\n        type: \"warning\",\r\n      });\r\n    }\r\n    // 获取歌词\r\n    // getSongLyric({\r\n    //   id: id,\r\n    // }).then((res) => {\r\n    //   songlrc = res.data.lrc.lyric;\r\n    // }),\r\n    this.$store.commit(\"aplayer/addSONG\", {\r\n      name: songDetails.name, //歌曲名\r\n      artist: songDetails.ar[0].name, //作者\r\n      // url: songUrlAdd,\r\n      url: `https://music.163.com/song/media/outer/url?id=${songDetails.id}.mp3`,\r\n      cover: songDetails.al.picUrl,\r\n      //   lrc: songlrc,\r\n      id: songDetails.id,\r\n    });\r\n    songDetails.timer = false;\r\n    setTimeout(() => {\r\n      songDetails.timer = true;\r\n    }, 3000);\r\n      }\r\n    },\r\n    playMV(mvId) {\r\n      //获取mv播放链接\r\n      this.$router.push({\r\n        name: \"mvPlay\",\r\n        params: { mvId: mvId },\r\n      });\r\n    },\r\n    //获取歌曲下载地址\r\n    getDownloadUrl(songId, songName) {\r\n      var that = this;\r\n      that.$message({\r\n        type: \"success\",\r\n        message: \"正在尝试下载\",\r\n      });\r\n      let params = {\r\n        id: songId,\r\n      };\r\n      getDownloadUrl(params).then((res) => {\r\n        // console.log('歌曲下载地址：', res.data)\r\n        // console.log(\"歌曲下载地址：\", res.data.data.url);\r\n        // download(res.data.data.url, songName)\r\n        download(res.data.data[0].url, songName);\r\n        that.$message({\r\n          type: \"success\",\r\n          message: \"开始下载了\",\r\n        });\r\n      });\r\n    },\r\n    playMV(mvId) {\r\n      //获取mv播放链接\r\n      this.$router.push({\r\n        name: 'mvPlay',\r\n        params: { mvId: mvId },\r\n      })\r\n    },\r\n    //根据主题更换播放器颜色\r\n    randomColor() {\r\n      return `#${((Math.random() * 0xffffff) << 0).toString(16)}`\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\nh3 {\r\n  height: 30px;\r\n  line-height: 30px;\r\n  text-align: center;\r\n}\r\n.descript {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  color: aliceblue;\r\n  font-weight: bolder;\r\n  padding: 10px 20px;\r\n  border-radius: 20px 20px 0 0;\r\n  background: rgba(221, 239, 243, 0.05);\r\n  box-sizing: border-box;\r\n}\r\n.list-wrap {\r\n  margin: 10px auto 0;\r\n  padding: 0 20px 10px;\r\n  width: 1120px;\r\n  height: 730px;\r\n  border-radius: 20px;\r\n  background: rgba(221, 239, 243, 0.05);\r\n  box-sizing: border-box;\r\n\r\n  ul {\r\n    height: 630px;\r\n    border-radius: 0 0 10px 10px;\r\n    background: rgba(221, 239, 243, 0.05);\r\n    overflow-x: hidden;\r\n\r\n    &::-webkit-scrollbar {\r\n      display: none;\r\n    }\r\n    .details {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      margin: 0 auto;\r\n      padding: 10px;\r\n      width: 98%;\r\n      height: 200px;\r\n      // border: 1px solid rgb(97, 226, 183);\r\n      border-radius: 10px;\r\n      // background: rgba(109, 109, 109, 0);\r\n      box-sizing: border-box;\r\n\r\n      .details-img {\r\n        display: inline-block;\r\n        // width: 180px;\r\n        // height: 180px;\r\n        border-radius: 10px;\r\n\r\n        img {\r\n          width: 180px;\r\n          height: 180px;\r\n          border-radius: 10px;\r\n          transition: 0.2s;\r\n\r\n          &:hover {\r\n            transform: scale(1.03);\r\n          }\r\n        }\r\n      }\r\n\r\n      .detailsRight {\r\n        width: 820px;\r\n        height: 180px;\r\n        // background: rgb(181, 209, 152);\r\n\r\n        .option {\r\n          display: inline-block;\r\n\r\n          margin-left: 50px;\r\n\r\n          .flexBetween {\r\n            .inline-block {\r\n              display: inline-block;\r\n              transition: 0.2s;\r\n\r\n              &:hover {\r\n                cursor: pointer;\r\n                color: rgb(246, 255, 119);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        .songTns {\r\n          margin: 10px 0 10px 0;\r\n          width: 100%;\r\n          max-height: 75px;\r\n          font-size: 14px;\r\n          overflow-x: hidden;\r\n\r\n          &::-webkit-scrollbar {\r\n            display: none;\r\n          }\r\n        }\r\n        .playListNickName {\r\n          display: inline-block;\r\n          margin-bottom: 10px;\r\n          color: antiquewhite;\r\n        }\r\n      }\r\n    }\r\n\r\n    .music-list {\r\n      display: flex;\r\n      padding: 10px 10px;\r\n      width: 1080px;\r\n      overflow: hidden;\r\n      color: rgba(255, 255, 255, 1);\r\n      font-weight: bolder;\r\n      -o-text-overflow: ellipsis;\r\n      text-overflow: ellipsis;\r\n      background: rgba(221, 239, 243, 0.11);\r\n      transition: 0.2s;\r\n\r\n      .music-list-span {\r\n        display: inline-block;\r\n        width: 270px;\r\n        text-align: center;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        white-space: nowrap;\r\n      }\r\n      .option {\r\n        display: inline-block;\r\n        width: 250px;\r\n        text-align: center;\r\n\r\n        span {\r\n          display: inline-block;\r\n          width: 30px;\r\n          &:hover {\r\n            cursor: pointer;\r\n          }\r\n        }\r\n      }\r\n\r\n      &:hover {\r\n        background: rgba(76, 152, 155, 0.527);\r\n      }\r\n    }\r\n  }\r\n}\r\n.pagination {\r\n  text-align: center;\r\n  background: none !important;\r\n}\r\n/deep/ .el-pager {\r\n  height: 30px !important;\r\n  background: none !important;\r\n}\r\n/deep/ .number,\r\n/deep/ .btn-prev,\r\n/deep/ .btn-quicknext,\r\n/deep/ .btn-next,\r\n/deep/ .el-input__inner,\r\n/deep/ .more {\r\n  color: #f2fff7 !important;\r\n  background: transparent !important;\r\n}\r\n/deep/ .number:hover,\r\n/deep/ .btn-prev:hover,\r\n/deep/ .btn-quicknext:hover,\r\n/deep/ .btn-next:hover,\r\n/deep/ .el-input__inner:hover,\r\n/deep/ .more:hover {\r\n  color: #f7a588 !important;\r\n}\r\n/deep/ .active {\r\n  color: #f7a588 !important;\r\n}\r\n/deep/ .el-input__inner {\r\n  border: none;\r\n}\r\n/deep/ .el-pagination__jump {\r\n  color: #f7dd88 !important;\r\n}\r\n/deep/ .el-pagination {\r\n  height: 30px !important;\r\n}\r\n.iconhover {\r\n  transition: 0.2s;\r\n  &:hover {\r\n    color: rgb(247, 243, 45);\r\n  }\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}