{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.fill.js\";\n//\n//\n//\n//\nexport default {\n  name: \"MaskCanvas\",\n  data: function data() {\n    return {\n      width: \"\",\n      height: \"\",\n      data: [],\n      num: 200,\n      date: 0,\n      newDate: new Date()\n    };\n  },\n  mounted: function mounted() {\n    var canvas = this.$refs.canvas;\n    this.cxt = canvas.getContext(\"2d\");\n    this.initCanvas(canvas);\n    window.onresize = this.initCanvas.bind(null, canvas);\n  },\n  methods: {\n    // 启动canvas\n    initCanvas: function initCanvas(canvas) {\n      this.newDate = new Date(); // 设置节流 小于1秒 不执行\n\n      if (this.newDate - this.date >= 200) {\n        clearInterval(this.time);\n        this.date = this.newDate;\n        this.data = [];\n        canvas.width = this.width = document.documentElement.clientWidth;\n        canvas.height = this.height = document.documentElement.clientHeight;\n        this.init(); //初始化\n      }\n    },\n    init: function init() {\n      // 存储 星星各个位置\n      this.handle(); // 画圆\n\n      this.time = setInterval(this.circre.bind(this), 60);\n    },\n    handle: function handle() {\n      for (var i = 0; i < this.num; i++) {\n        this.data.push({\n          x: Math.floor(Math.random() * this.width),\n          y: Math.floor(Math.random() * this.height),\n          r: Math.random() * 4 + 1,\n          moveX: Math.random() - 0.5,\n          // 用于星星移动步数\n          moveY: Math.random() - 0.5 // 用于星星移动步数\n\n        });\n      }\n    },\n    circre: function circre() {\n      var _this = this;\n\n      this.cxt.clearRect(0, 0, this.width, this.height); // 清除画布区域  清除了上一次画布的所有内容\n\n      this.cxt.fillStyle = \"skyblue\";\n      this.data.forEach(function (item, index) {\n        _this.cxt.arc(item.x, item.y, item.r, 0 * Math.PI, 2 * Math.PI);\n\n        _this.cxt.fill();\n\n        _this.cxt.beginPath(); // 在原有的基础进行 添加 或减少 从而进行移动\n\n\n        item.x += item.moveX;\n        item.y += item.moveY; // console.log(this.data[index+1].x);\n        // 判断两点之间线段距离   同时需要和每个圆点进行比较\n\n        for (var i = index + 1; i < _this.data.length; i++) {\n          _this.line(item.x, item.y, i);\n        } // 反弹\n\n\n        if (item.x < 0 || item.x > _this.width - 17) {\n          item.moveX = -item.moveX;\n        }\n\n        if (item.y < 0 || item.y > _this.height) {\n          item.moveY = -item.moveY;\n        }\n      });\n    },\n    line: function line(x, y, i) {\n      var x1 = this.data[i].x;\n      var y1 = this.data[i].y;\n\n      if (Math.pow(x - x1, 2) + Math.pow(y - y1, 2) <= 400 * 5) {\n        this.cxt.moveTo(x, y);\n        this.cxt.lineTo(x1, y1);\n        var add = this.cxt.createLinearGradient(x, y, x1, y1);\n        add.addColorStop(0, \"#fff\");\n        add.addColorStop(0.5, \"skyblue\");\n        add.addColorStop(1, \"pink\");\n        this.cxt.strokeStyle = add;\n        this.cxt.lineWidth = 2;\n        this.cxt.stroke();\n        this.cxt.beginPath();\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;AAKA;AACAA,oBADA;AAEAC,MAFA,kBAEA;AACA;AACAC,eADA;AAEAC,gBAFA;AAGAF,cAHA;AAIAG,cAJA;AAKAC,aALA;AAMAC;AANA;AAQA,GAXA;AAYAC,SAZA,qBAYA;AACA;AACA;AACA;AACAC;AAEA,GAlBA;AAmBAC;AACA;AACAC,cAFA,sBAEAC,MAFA,EAEA;AACA,gCADA,CAEA;;AACA;AACAC;AACA;AACA;AACAD;AACAA;AACA,oBANA,CAMA;AACA;AACA,KAbA;AAcAE,QAdA,kBAcA;AACA;AACA,oBAFA,CAGA;;AACA;AACA,KAnBA;AAoBAC,UApBA,oBAoBA;AACA;AACA;AACAC,mDADA;AAEAC,oDAFA;AAGAC,kCAHA;AAIAC,oCAJA;AAIA;AACAC,oCALA,CAKA;;AALA;AAOA;AACA,KA9BA;AA+BAC,UA/BA,oBA+BA;AAAA;;AACA,wDADA,CAEA;;AACA;AACA;AACA;;AACA;;AACA,8BAHA,CAIA;;;AACAC;AACAA,6BANA,CAOA;AACA;;AACA;AACA;AACA,SAXA,CAYA;;;AACA;AACAA;AACA;;AACA;AACAA;AACA;AACA,OAnBA;AAuBA,KA1DA;AA2DAC,QA3DA,gBA2DAP,CA3DA,EA2DAC,CA3DA,EA2DAO,CA3DA,EA2DA;AACA;AACA;;AACA;AACA;AACA;AACA;AACAC;AACAA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AA1EA;AAnBA","names":["name","data","width","height","num","date","newDate","mounted","window","methods","initCanvas","canvas","clearInterval","init","handle","x","y","r","moveX","moveY","circre","item","line","i","add"],"sourceRoot":"src/components","sources":["maskCanvas.vue"],"sourcesContent":["<template>\r\n  <canvas ref=\"canvas\" class=\"canvas\"></canvas>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n name:\"MaskCanvas\",\r\n  data(){\r\n    return {\r\n        width: \"\",\r\n        height: \"\",\r\n        data : [],\r\n        num: 200,\r\n        date:0,\r\n        newDate:new Date(),\r\n    }\r\n  },\r\n  mounted(){\r\n    let canvas = this.$refs.canvas\r\n    this.cxt = canvas.getContext(\"2d\");\r\n    this.initCanvas(canvas)\r\n    window.onresize = this.initCanvas.bind(null,canvas);\r\n\r\n  },\r\n  methods:{\r\n    // 启动canvas\r\n    initCanvas(canvas){\r\n        this.newDate = new Date()\r\n        // 设置节流 小于1秒 不执行\r\n        if(this.newDate - this.date   >= 200){\r\n            clearInterval(this.time)\r\n            this.date = this.newDate \r\n            this.data  = []\r\n            canvas.width = this.width  = document.documentElement.clientWidth;\r\n            canvas.height = this.height =document.documentElement.clientHeight;\r\n            this.init(); //初始化\r\n        }\r\n    },\r\n    init(){\r\n      // 存储 星星各个位置\r\n      this.handle();\r\n      // 画圆\r\n      this.time = setInterval(this.circre.bind(this),60)\r\n    },\r\n    handle(){\r\n      for (let i=0;i<this.num;i++){\r\n        this.data.push({\r\n          x:Math.floor(Math.random() *this.width),\r\n          y:Math.floor(Math.random()*this.height),\r\n          r:Math.random() * 4 + 1,\r\n          moveX:  Math.random() - 0.5, // 用于星星移动步数\r\n          moveY:  Math.random() - 0.5 // 用于星星移动步数\r\n        });\r\n      }\r\n    },\r\n    circre(){\r\n      this.cxt.clearRect(0,0,this.width,this.height)\r\n      // 清除画布区域  清除了上一次画布的所有内容\r\n      this.cxt.fillStyle = \"skyblue\";\r\n      this.data.forEach((item,index)=>{\r\n        this.cxt.arc( item.x, item.y,item.r, 0 * Math.PI,2 * Math.PI,);\r\n        this.cxt.fill();\r\n        this.cxt.beginPath();\r\n        // 在原有的基础进行 添加 或减少 从而进行移动\r\n        item.x += item.moveX;\r\n        item.y += item.moveY;\r\n        // console.log(this.data[index+1].x);\r\n        // 判断两点之间线段距离   同时需要和每个圆点进行比较\r\n        for (let i=index+1;i<this.data.length;i++){\r\n          this.line(item.x,item.y,i)\r\n        }\r\n        // 反弹\r\n        if (item.x < 0 || item.x > this.width-17){\r\n          item.moveX = -item.moveX\r\n        }\r\n        if (item.y < 0 || item.y > this.height){\r\n          item.moveY = -item.moveY\r\n        }\r\n      })\r\n\r\n       \r\n\r\n    },\r\n    line(x,y,i){\r\n      let x1 =  this.data[i].x;\r\n      let y1 =  this.data[i].y;\r\n      if(Math.pow(x - x1,2)+ Math.pow(y - y1,2)  <= 400 * 5 ){\r\n        this.cxt.moveTo(x,y);\r\n        this.cxt.lineTo(x1,y1);\r\n        let add =this.cxt.createLinearGradient(x,y,x1,y1);\r\n        add.addColorStop(0,\"#fff\");\r\n        add.addColorStop(0.5,\"skyblue\");\r\n        add.addColorStop(1,\"pink\");\r\n        this.cxt.strokeStyle = add;\r\n        this.cxt.lineWidth = 2;\r\n        this.cxt.stroke();\r\n        this.cxt.beginPath();\r\n      }\r\n    }\r\n  },\r\n} \r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n .canvas{\r\n    position: fixed;\r\n    z-index: -1;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}