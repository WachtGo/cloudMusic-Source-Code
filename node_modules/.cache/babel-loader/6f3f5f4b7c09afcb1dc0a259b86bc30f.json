{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.fill.js\";\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    point: {\n      type: Number,\n      default: 100 // 生成的星星（点）的个数, 默认25个\n\n    },\n    lineColor: {\n      type: String,\n      default: \"rgba(45,140,210,0.2)\" // 线的颜色\n\n    },\n    roundColor: {\n      type: String,\n      default: \"rgba(45,140,210,0.1)\" // 星星的颜色\n\n    }\n  },\n  data: function data() {\n    return {\n      docWidth: 0,\n      // 画布宽\n      docHeight: 0,\n      // 画布高\n      context: null,\n      // canvasDom的执行上下文\n      circleArr: [],\n      // 圆点数组\n      timer: null // 定时器对象\n\n    };\n  },\n  mounted: function mounted() {\n    var canvasDom = this.$refs.canvas; // 取画布的高宽来设置显示分辨率\n\n    this.docWidth = canvasDom.offsetWidth;\n    this.docHeight = canvasDom.offsetHeight; // 设置画布分辨率\n\n    canvasDom.width = canvasDom.offsetWidth;\n    canvasDom.height = canvasDom.offsetHeight; // 初始化canvas上下文\n\n    this.context = canvasDom.getContext(\"2d\"); // 设置线条和星星颜色\n\n    this.context.strokeStyle = this.lineColor;\n    this.context.lineWidth = 1;\n    this.context.fillStyle = this.roundColor; // 初始化\n\n    this.createCircleArr(); // 设置星星数组\n\n    this.draw(); // 首屏绘制\n\n    this.cycleDraw(); // 循环绘制\n  },\n  methods: {\n    /**\r\n     * 生成min和max之间随机数\r\n     */\n    rangeRadom: function rangeRadom(max, min) {\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    },\n\n    /**\r\n     * 绘制原点\r\n     */\n    drawCircle: function drawCircle(context, x, y, r, moveX, moveY) {\n      var circle = {\n        x: x,\n        y: y,\n        r: r,\n        moveX: moveX,\n        moveY: moveY\n      };\n      context.beginPath();\n      context.arc(circle.x, circle.y, circle.r, 0, 2 * Math.PI);\n      context.closePath();\n      context.fill();\n      return circle;\n    },\n\n    /**\r\n     * 绘制线条\r\n     */\n    drawLine: function drawLine(context, beginX, beginY, closeX, closeY, opacity) {\n      context.beginPath();\n      context.strokeStyle = \"rgba(0, 0, 0, \".concat(opacity, \")\");\n      context.moveTo(beginX, beginY);\n      context.lineTo(closeX, closeY);\n      context.closePath();\n      context.stroke();\n    },\n\n    /**\r\n     * 生成圆点数组\r\n     */\n    createCircleArr: function createCircleArr() {\n      for (var i = 0; i < this.point; i++) {\n        this.circleArr.push(this.drawCircle(this.context, this.rangeRadom(this.docWidth, 0), this.rangeRadom(this.docHeight, 0), this.rangeRadom(15, 2), this.rangeRadom(10, -10) / 40, this.rangeRadom(10, -10) / 40));\n      }\n    },\n\n    /**\r\n     * 每一帧绘制\r\n     */\n    draw: function draw() {\n      var circleArr = this.circleArr;\n      this.context.clearRect(0, 0, this.docWidth, this.docHeight); // 循环绘制点\n\n      for (var i = 0; i < this.point; i++) {\n        this.drawCircle(this.context, circleArr[i].x, circleArr[i].y, circleArr[i].r);\n      } // 循环绘制线\n\n\n      for (var _i = 0; _i < this.point; _i++) {\n        for (var j = 0; j < this.point; j++) {\n          if (_i + j < this.point) {\n            var A = Math.abs(circleArr[_i + j].x - circleArr[_i].x);\n            var B = Math.abs(circleArr[_i + j].y - circleArr[_i].y);\n            var lineLength = Math.sqrt(A * A + B * B);\n            var C = 1 / lineLength * 7 - 0.009;\n            var lineOpacity = C > 0.03 ? 0.03 : C;\n\n            if (lineOpacity > 0) {\n              this.drawLine(this.context, circleArr[_i].x, circleArr[_i].y, circleArr[_i + j].x, circleArr[_i + j].y, lineOpacity);\n            }\n          }\n        }\n      }\n    },\n\n    /**\r\n     * 循环绘制\r\n     */\n    cycleDraw: function cycleDraw() {\n      var _this = this;\n\n      this.timer = setInterval(function () {\n        for (var i = 0; i < _this.point; i++) {\n          var cir = _this.circleArr[i];\n          cir.x += cir.moveX;\n          cir.y += cir.moveY;\n\n          if (cir.x > _this.docWidth) {\n            cir.x = 0;\n          } else if (cir.x < 0) {\n            cir.x = _this.docWidth;\n          }\n\n          if (cir.y > _this.docHeight) {\n            cir.y = 0;\n          } else if (cir.y < 0) {\n            cir.y = _this.docHeight;\n          }\n        }\n\n        _this.draw();\n      }, 10);\n    }\n  },\n  beforeDestory: function beforeDestory() {\n    // 记得摧毁定时器\n    clearInterval(this.timer);\n  }\n};","map":{"version":3,"mappings":";;;;;;;;AAOA;AACAA;AACAC;AACAC,kBADA;AAEAC,kBAFA,CAEA;;AAFA,KADA;AAKAC;AACAF,kBADA;AAEAC,qCAFA,CAEA;;AAFA,KALA;AASAE;AACAH,kBADA;AAEAC,qCAFA,CAEA;;AAFA;AATA,GADA;AAeAG,MAfA,kBAeA;AACA;AACAC,iBADA;AACA;AACAC,kBAFA;AAEA;AACAC,mBAHA;AAGA;AACAC,mBAJA;AAIA;AACAC,iBALA,CAKA;;AALA;AAOA,GAvBA;AAwBAC,SAxBA,qBAwBA;AACA,sCADA,CAGA;;AACA;AACA,4CALA,CAOA;;AACAC;AACAA,8CATA,CAWA;;AACA,8CAZA,CAcA;;AACA;AACA;AACA,6CAjBA,CAmBA;;AACA,2BApBA,CAoBA;;AACA,gBArBA,CAqBA;;AACA,qBAtBA,CAsBA;AACA,GA/CA;AAgDAC;AACA;AACA;AACA;AACAC,cAJA,sBAIAC,GAJA,EAIAC,GAJA,EAIA;AACA;AACA,KANA;;AAOA;AACA;AACA;AACAC,cAVA,sBAUAT,OAVA,EAUAU,CAVA,EAUAC,CAVA,EAUAC,CAVA,EAUAC,KAVA,EAUAC,KAVA,EAUA;AACA;AACAJ,YADA;AAEAC,YAFA;AAGAC,YAHA;AAIAC,oBAJA;AAKAC;AALA;AAOAd;AACAA;AACAA;AACAA;AACA;AACA,KAvBA;;AAwBA;AACA;AACA;AACAe,YA3BA,oBA2BAf,OA3BA,EA2BAgB,MA3BA,EA2BAC,MA3BA,EA2BAC,MA3BA,EA2BAC,MA3BA,EA2BAC,OA3BA,EA2BA;AACApB;AACAA;AACAA;AACAA;AACAA;AACAA;AACA,KAlCA;;AAmCA;AACA;AACA;AACAqB,mBAtCA,6BAsCA;AACA;AACA,4BACA,gBACA,YADA,EAEA,iCAFA,EAGA,kCAHA,EAIA,sBAJA,EAKA,6BALA,EAMA,6BANA,CADA;AAUA;AACA,KAnDA;;AAoDA;AACA;AACA;AACAC,QAvDA,kBAuDA;AACA;AACA,kEAFA,CAGA;;AACA;AACA,wBACA,YADA,EAEArB,cAFA,EAGAA,cAHA,EAIAA,cAJA;AAMA,OAXA,CAYA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,4BACA,YADA,EAEAA,eAFA,EAGAA,eAHA,EAIAA,mBAJA,EAKAA,mBALA,EAMAsB,WANA;AAQA;AACA;AACA;AACA;AACA,KAzFA;;AA0FA;AACA;AACA;AACAC,aA7FA,uBA6FA;AAAA;;AACA;AACA;AACA;AACAC;AACAA;;AACA;AACAA;AACA,WAFA,MAEA;AACAA;AACA;;AACA;AACAA;AACA,WAFA,MAEA;AACAA;AACA;AACA;;AACA;AACA,OAjBA,EAiBA,EAjBA;AAkBA;AAhHA,GAhDA;AAkKAC,eAlKA,2BAkKA;AACA;AACAC;AACA;AArKA","names":["props","point","type","default","lineColor","roundColor","data","docWidth","docHeight","context","circleArr","timer","mounted","canvasDom","methods","rangeRadom","max","min","drawCircle","x","y","r","moveX","moveY","drawLine","beginX","beginY","closeX","closeY","opacity","createCircleArr","draw","lineOpacity","cycleDraw","cir","beforeDestory","clearInterval"],"sourceRoot":"src/components","sources":["maskCanvas.vue"],"sourcesContent":["<template>\r\n  <div class=\"starry-sky\">\r\n    <canvas ref=\"canvas\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    point: {\r\n      type: Number,\r\n      default: 100, // 生成的星星（点）的个数, 默认25个\r\n    },\r\n    lineColor: {\r\n      type: String,\r\n      default: \"rgba(45,140,210,0.2)\", // 线的颜色\r\n    },\r\n    roundColor: {\r\n      type: String,\r\n      default: \"rgba(45,140,210,0.1)\", // 星星的颜色\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      docWidth: 0, // 画布宽\r\n      docHeight: 0, // 画布高\r\n      context: null, // canvasDom的执行上下文\r\n      circleArr: [], // 圆点数组\r\n      timer: null, // 定时器对象\r\n    };\r\n  },\r\n  mounted() {\r\n    const canvasDom = this.$refs.canvas;\r\n\r\n    // 取画布的高宽来设置显示分辨率\r\n    this.docWidth = canvasDom.offsetWidth;\r\n    this.docHeight = canvasDom.offsetHeight;\r\n\r\n    // 设置画布分辨率\r\n    canvasDom.width = canvasDom.offsetWidth;\r\n    canvasDom.height = canvasDom.offsetHeight;\r\n\r\n    // 初始化canvas上下文\r\n    this.context = canvasDom.getContext(\"2d\");\r\n\r\n    // 设置线条和星星颜色\r\n    this.context.strokeStyle = this.lineColor;\r\n    this.context.lineWidth = 1;\r\n    this.context.fillStyle = this.roundColor;\r\n\r\n    // 初始化\r\n    this.createCircleArr(); // 设置星星数组\r\n    this.draw(); // 首屏绘制\r\n    this.cycleDraw(); // 循环绘制\r\n  },\r\n  methods: {\r\n    /**\r\n     * 生成min和max之间随机数\r\n     */\r\n    rangeRadom(max, min) {\r\n      return Math.floor(Math.random() * (max - min + 1) + min);\r\n    },\r\n    /**\r\n     * 绘制原点\r\n     */\r\n    drawCircle(context, x, y, r, moveX, moveY) {\r\n      let circle = {\r\n        x,\r\n        y,\r\n        r,\r\n        moveX,\r\n        moveY,\r\n      };\r\n      context.beginPath();\r\n      context.arc(circle.x, circle.y, circle.r, 0, 2 * Math.PI);\r\n      context.closePath();\r\n      context.fill();\r\n      return circle;\r\n    },\r\n    /**\r\n     * 绘制线条\r\n     */\r\n    drawLine(context, beginX, beginY, closeX, closeY, opacity) {\r\n      context.beginPath();\r\n      context.strokeStyle = `rgba(0, 0, 0, ${opacity})`;\r\n      context.moveTo(beginX, beginY);\r\n      context.lineTo(closeX, closeY);\r\n      context.closePath();\r\n      context.stroke();\r\n    },\r\n    /**\r\n     * 生成圆点数组\r\n     */\r\n    createCircleArr() {\r\n      for (let i = 0; i < this.point; i++) {\r\n        this.circleArr.push(\r\n          this.drawCircle(\r\n            this.context,\r\n            this.rangeRadom(this.docWidth, 0),\r\n            this.rangeRadom(this.docHeight, 0),\r\n            this.rangeRadom(15, 2),\r\n            this.rangeRadom(10, -10) / 40,\r\n            this.rangeRadom(10, -10) / 40\r\n          )\r\n        );\r\n      }\r\n    },\r\n    /**\r\n     * 每一帧绘制\r\n     */\r\n    draw() {\r\n      const circleArr = this.circleArr;\r\n      this.context.clearRect(0, 0, this.docWidth, this.docHeight);\r\n      // 循环绘制点\r\n      for (let i = 0; i < this.point; i++) {\r\n        this.drawCircle(\r\n          this.context,\r\n          circleArr[i].x,\r\n          circleArr[i].y,\r\n          circleArr[i].r\r\n        );\r\n      }\r\n      // 循环绘制线\r\n      for (let i = 0; i < this.point; i++) {\r\n        for (let j = 0; j < this.point; j++) {\r\n          if (i + j < this.point) {\r\n            let A = Math.abs(circleArr[i + j].x - circleArr[i].x);\r\n            let B = Math.abs(circleArr[i + j].y - circleArr[i].y);\r\n            let lineLength = Math.sqrt(A * A + B * B);\r\n            let C = (1 / lineLength) * 7 - 0.009;\r\n            let lineOpacity = C > 0.03 ? 0.03 : C;\r\n            if (lineOpacity > 0) {\r\n              this.drawLine(\r\n                this.context,\r\n                circleArr[i].x,\r\n                circleArr[i].y,\r\n                circleArr[i + j].x,\r\n                circleArr[i + j].y,\r\n                lineOpacity\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    /**\r\n     * 循环绘制\r\n     */\r\n    cycleDraw() {\r\n      this.timer = setInterval(() => {\r\n        for (let i = 0; i < this.point; i++) {\r\n          let cir = this.circleArr[i];\r\n          cir.x += cir.moveX;\r\n          cir.y += cir.moveY;\r\n          if (cir.x > this.docWidth) {\r\n            cir.x = 0;\r\n          } else if (cir.x < 0) {\r\n            cir.x = this.docWidth;\r\n          }\r\n          if (cir.y > this.docHeight) {\r\n            cir.y = 0;\r\n          } else if (cir.y < 0) {\r\n            cir.y = this.docHeight;\r\n          }\r\n        }\r\n        this.draw();\r\n      }, 10);\r\n    },\r\n  },\r\n  beforeDestory() {\r\n    // 记得摧毁定时器\r\n    clearInterval(this.timer);\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.starry-sky {\r\n  position: absolute;\r\n\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: -99;\r\n  canvas {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}