{"ast":null,"code":"import _asyncToGenerator from \"D:/data/\\u684C\\u9762/\\u4EE3\\u7801\\u6587\\u4EF6\\u5939/git/cloudMusic-Source-Code-main/cloudMusic-Source-Code-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport QRCode from \"qrcode\";\nimport { getqrKey, getqrImg, getqrStatus as _getqrStatus, getloginStatus as _getloginStatus, loginOut as _loginOut } from \"@/api/login\";\nimport { cookieParser, getTimestamp } from \"@/utils/commonApi\";\nexport default {\n  name: \"Login\",\n  data: function data() {\n    return {\n      loginWrapShow: false,\n      //展示登录窗口\n      qrStatus: \"\",\n      qrtimer: null,\n      qrshowed: false,\n      key: \"\",\n      qrloading: false //点击判断是否已经授权时的加载图标状态\n\n    };\n  },\n  computed: {\n    user: function user() {\n      return this.$store.state.user;\n    }\n  },\n  created: function created() {// if (localStorage.getItem(\"user\")) {\n    //   this.user = JSON.parse(localStorage.getItem(\"user\"));\n    // }\n    // this.getloginStatus();\n  },\n  methods: {\n    goLogin: function goLogin() {\n      //点击登录，获取二维码\n      // this.loginWrapOnOff(true);\n      this.loginWrapShow = true;\n      this.refreshQr();\n    },\n    //生成二维码\n    getQRCode: function getQRCode(qrurl) {\n      var opts = {\n        errorCorrectionLevel: \"H\",\n        //容错级别\n        type: \"image/png\",\n        //生成的二维码类型\n        quality: 0.3,\n        //二维码质量\n        margin: 5,\n        //二维码留白边距\n        width: 180,\n        //宽\n        height: 180,\n        //高\n        text: \"\",\n        //二维码内容\n        color: {\n          dark: \"#333333\",\n          //前景色\n          light: \"#fff\" //背景色\n\n        }\n      };\n      this.QRCodeMsg = qrurl; //生成的二维码为URL地址js\n\n      var msg = document.getElementById(\"QRCode_header\"); // 将获取到的数据（val）画到msg（canvas）上\n\n      QRCode.toCanvas(msg, qrurl, opts, function (error) {// console.log(error)\n      });\n      this.qrshowed = true;\n    },\n    //  获取/刷新二维码\n    refreshQr: function refreshQr() {\n      var _this = this;\n\n      this.qrshowed = false;\n      var params = {\n        timestamp: getTimestamp()\n      }; // console.log(params.timestamp)\n\n      getqrKey(params).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(res) {\n          var params;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return res.data.data.unikey;\n\n                case 2:\n                  _this.key = _context.sent;\n                  params = {\n                    key: res.data.data.unikey\n                  };\n                  getqrImg(params).then(function (res) {\n                    _this.getQRCode(res.data.data.qrurl);\n                  });\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    // 二维码状态\n    getqrStatus: function getqrStatus() {\n      var _this2 = this;\n\n      this.qrloading = true;\n      var params = {\n        key: this.key\n      };\n\n      _getqrStatus(params).then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(res) {\n          var cookies;\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return res.data.message;\n\n                case 2:\n                  _this2.qrStatus = _context2.sent;\n\n                  if (res.data.code === 803) {\n                    // clearInterval(this.qrtimer);\n                    // console.log(\"扫码登录成功\");\n                    cookies = cookieParser(res.data.cookie);\n\n                    _this2.$store.commit(\"setTOKEN\", cookies[1]); //设置好了token\n\n\n                    setTimeout(function () {\n                      _this2.loginWrapShow = false; //关闭登录窗口\n\n                      _this2.$message.success(\"已登录\");\n                    }, 500);\n\n                    _this2.getloginStatus();\n                  } else if (res.data.code === 800) {\n                    _this2.qrStatus += \",请刷新获取\";\n                  } else if (res.data.code === 400) {\n                    _this2.qrStatus = \"请求错误\";\n                  }\n\n                  _this2.qrloading = false;\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n    //获取登录状态\n    getloginStatus: function getloginStatus() {\n      var _this3 = this;\n\n      _getloginStatus().then( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(res) {\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  // console.log(res.data.data.profile);\n                  if (res.data.data.profile) {\n                    _this3.$store.commit(\"setUSER\", {\n                      avatarUrl: res.data.data.profile.avatarUrl,\n                      nickname: res.data.data.profile.nickname,\n                      userId: res.data.data.profile.userId,\n                      userType: res.data.data.profile.userType\n                    });\n                  }\n\n                case 1:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    },\n    //退出登录\n    loginOut: function loginOut() {\n      var _this4 = this;\n\n      var loading = this.$loading({\n        background: \"rgba(255,255,255,0.1)\"\n      });\n\n      _loginOut().then(function (res) {\n        _this4.$nextTick(function () {\n          loading.close();\n        });\n\n        _this4.$store.commit(\"removeTOKEN\");\n\n        _this4.$message.success(\"已退出登录\"); // this.getloginStatus(); //获取登陆状态\n\n      }).catch(function (err) {\n        _this4.$nextTick(function () {\n          loading.close();\n        });\n      });\n    },\n    golike: function golike() {\n      console.log(this.user);\n      this.$router.push({\n        name: \"myPlayList\",\n        params: {\n          id: this.user.userId\n        }\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}