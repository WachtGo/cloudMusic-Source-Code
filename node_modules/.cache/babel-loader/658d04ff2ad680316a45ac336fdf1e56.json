{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getSuggestPlayList } from \"@/api/api\";\nimport { transPlayCount } from \"@/utils/commonApi\";\nexport default {\n  data() {\n    return {\n      limit: 10,\n      recPlayList: []\n    };\n  },\n\n  async mounted() {\n    await this.getSuggestPlayList(); // await this.$nextTick(()=>{\n    //   // console.log(6)\n    // })\n  },\n\n  methods: {\n    async getSuggestPlayList() {\n      //获取推荐歌单\n      var that = this;\n      let params = {\n        limit: that.limit\n      };\n      await getSuggestPlayList(params).then(res => {\n        // console.log(\"推荐歌单：---\",res.data);\n        that.recPlayList = res.data.result; // console.log(\"推荐歌单：--\", res.data.result);\n        //将播放量转成亿,万单位\n\n        transPlayCount(that.recPlayList, \"playCount\");\n      });\n    },\n\n    goSongList(songListId) {\n      //传入歌单id进入歌曲列表\n      var that = this;\n      that.$router.push({\n        name: \"playListDetails\",\n        params: {\n          songListId: songListId\n        }\n      });\n    },\n\n    goSongList(songListDetail) {\n      //传入歌单id进入歌曲列表\n      var that = this;\n      that.$router.push({\n        name: \"playListDetails\",\n        params: {\n          songListDetail: songListDetail\n        }\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACAA;AACA;AACAC,eADA;AAEAC;AAFA;AAIA,GANA;;AAOA;AACA,oCADA,CAEA;AACA;AACA;AACA,GAZA;;AAaAC;AACA;AACA;AACA;AACA;AACAF;AADA;AAGA;AACA;AACAG,2CAFA,CAGA;AACA;;AACAC;AACA,OANA;AAOA,KAdA;;AAeAC;AACA;AACA;AACAF;AACAG,+BADA;AAEAC;AAAAC;AAAA;AAFA;AAIA,KAtBA;;AAuBAH;AACA;AACA;AACAF;AACAG,+BADA;AAEAC;AAAAE;AAAA;AAFA;AAIA;;AA9BA;AAbA","names":["data","limit","recPlayList","methods","that","transPlayCount","goSongList","name","params","songListId","songListDetail"],"sourceRoot":"src/views/recommend","sources":["RecPlaylist.vue"],"sourcesContent":["<template>\r\n  <!-- 推荐歌单 -->\r\n  <div>\r\n    <h3 class=\"h2title\">推荐歌单 :</h3>\r\n    <div class=\"recPlay Ocenter\">\r\n      <ul class=\"recPlaywrap\">\r\n        <li\r\n          class=\"recPlayList\"\r\n          v-for=\"(item, index) in recPlayList\"\r\n          :key=\"index\"\r\n        >\r\n          <div class=\"image\">\r\n            <img :src=\"item.picUrl\" alt=\"\" title=\"\" @click=\"goSongList(item)\" />\r\n            <span class=\"playCount\"\r\n              ><i class=\"el-icon-video-play\" style=\"margin-right: 1px\"></i\r\n              >{{ item.playCount }}</span\r\n            >\r\n          </div>\r\n          <p class=\"List-title\" @click=\"goSongList(item)\">\r\n            <span>{{ item.name }}</span>\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getSuggestPlayList } from \"@/api/api\";\r\nimport { transPlayCount } from \"@/utils/commonApi\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      limit: 10,\r\n      recPlayList: [],\r\n    };\r\n  },\r\n  async mounted() {\r\n    await this.getSuggestPlayList();\r\n    // await this.$nextTick(()=>{\r\n    //   // console.log(6)\r\n    // })\r\n  },\r\n  methods: {\r\n    async getSuggestPlayList() {\r\n      //获取推荐歌单\r\n      var that = this;\r\n      let params = {\r\n        limit: that.limit,\r\n      };\r\n      await getSuggestPlayList(params).then((res) => {\r\n        // console.log(\"推荐歌单：---\",res.data);\r\n        that.recPlayList = res.data.result;\r\n        // console.log(\"推荐歌单：--\", res.data.result);\r\n        //将播放量转成亿,万单位\r\n        transPlayCount(that.recPlayList, \"playCount\");\r\n      });\r\n    },\r\n    goSongList(songListId) {\r\n      //传入歌单id进入歌曲列表\r\n      var that = this;\r\n      that.$router.push({\r\n        name: \"playListDetails\",\r\n        params: { songListId: songListId },\r\n      });\r\n    },\r\n    goSongList(songListDetail) {\r\n      //传入歌单id进入歌曲列表\r\n      var that = this;\r\n      that.$router.push({\r\n        name: \"playListDetails\",\r\n        params: { songListDetail: songListDetail },\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.recPlay {\r\n  // max-height: 550px;\r\n  overflow-x: hidden;\r\n  // background: rgba(95, 158, 160, 0.11);\r\n  // &::-webkit-scrollbar {\r\n  //   display: none;\r\n  // }\r\n\r\n  .recPlaywrap {\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    flex-wrap: wrap; //根据宽度限制一行的盒子个数\r\n    margin: 10px 0;\r\n    width: 100%;\r\n    // overflow-x: hidden;\r\n\r\n    .recPlayList {\r\n      // margin-bottom: 10px;\r\n      width: 205px;\r\n      height: 260px;\r\n      box-sizing: border-box;\r\n\r\n      .image {\r\n        position: relative;\r\n        margin-bottom: 10px;\r\n        width: 200px;\r\n        height: 200px;\r\n        border-radius: 10px;\r\n        overflow: hidden;\r\n        transition: 0.2s;\r\n\r\n        &:hover {\r\n          transform: scale(1.05);\r\n          cursor: pointer;\r\n          // height: 210px;\r\n        }\r\n        img {\r\n          position: absolute;\r\n          width: 100%;\r\n          height: 100%;\r\n        }\r\n\r\n        .playCount {\r\n          position: absolute;\r\n          z-index: 99;\r\n          right: 10px;\r\n          background: transparent;\r\n        }\r\n      }\r\n\r\n      p {\r\n        font-size: 15px;\r\n        padding: 0 10px;\r\n        // width: 100%;\r\n        transition: 0.2s;\r\n        overflow: hidden; /*必须结合的属性,当内容溢出元素框时发生的事情*/\r\n        text-overflow: ellipsis; /*可以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本 。*/\r\n        display: -webkit-box; /*必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。*/\r\n        -webkit-line-clamp: 2; /*用来限制在一个块元素显示的文本的行数。*/\r\n        -webkit-box-orient: vertical; /*必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。*/\r\n        span {\r\n          &:hover {\r\n            color: rgb(145, 245, 228);\r\n            cursor: pointer;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n.h2title {\r\n  margin-top: 10px;\r\n  text-align: left;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}