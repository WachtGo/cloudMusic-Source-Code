{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Wacht/Desktop/git/cloudMusic-Source-Code/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport createPersistedState from \"vuex-persistedstate\";\nexport default {\n  namespaced: true,\n  state: {\n    // 歌曲生成周期\n    plugins: [createPersistedState({\n      key: 'aplayer',\n      storage: window.localStorage,\n      whiteList: ['audio', 'audition', 'musicAudioStatu', 'alplayShow']\n    })],\n    audio: [],\n    //播放列表音乐\n    audition: [{\n      name: '卡农（经典钢琴版）',\n      //歌曲名\n      artist: 'dylanf',\n      //作者\n      // url: songUrlAdd,\n      url: \"https://music.163.com/song/media/outer/url?id=478507889.mp3\",\n      cover: 'http://p2.music.126.net/fL7FAeRby1s7JreBqoOKjg==/109951165175371079.jpg',\n      // lrc: songlrc,\n      id: 478507889,\n      timer: true //试听中添加，防止用户连点消耗性能，在添加播放列表方法中可使用到\n\n    }],\n    //试听歌曲\n    musicAudioStatu: 1,\n    //控制audio,audition两个播放器显示\n    currentPlayMusic: {},\n    //当前正在播放的音乐\n    alplayShow: true\n  },\n  actions: {},\n  mutations: {\n    //播放器添加歌曲\n    addSONG: function addSONG(state, song) {\n      var _iterator = _createForOfIteratorHelper(state.audio),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n\n          if (item.id === song.id) {\n            this._vm.$message(\"播放列表已存在这首歌\");\n\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      state.audio.push(song); //将歌曲添加\n\n      this._vm.$message({\n        type: \"success\",\n        message: \"歌曲已添加到播放列表\"\n      });\n    },\n    //删除歌曲\n    deleteMUSIC: function deleteMUSIC(state, index) {\n      state.audio.splice(index, 1);\n\n      this._vm.$message({\n        type: \"success\",\n        message: \"歌曲已移出播放列表\"\n      });\n    },\n    //添加试听\n    addAUDITION: function addAUDITION(state, song) {\n      var _iterator2 = _createForOfIteratorHelper(state.audition),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n\n          if (item.id === song.id) {\n            this._vm.$message(\"正在试听这首歌\");\n\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      state.musicAudioStatu = 1;\n      state.audition.splice(0, 1);\n      state.audition[0] = song; //将歌曲添加\n\n      this._vm.$message({\n        type: \"success\",\n        message: \"歌曲已添加到试听\"\n      });\n    },\n    // 删除试听\n    deleteAUDITION: function deleteAUDITION(state, index) {\n      state.audition.splice(index, 1);\n\n      this._vm.$message({\n        type: \"success\",\n        message: \"歌曲已移出试听列表\"\n      });\n    },\n    //更换播放器\n    changeAPLAYER: function changeAPLAYER(state, statu) {\n      statu === 1 ? state.musicAudioStatu = 1 : state.musicAudioStatu = 0;\n    },\n    //更换当前正在播放的歌曲\n    changeCurrentPlayMusic: function changeCurrentPlayMusic(state, currentMusic) {\n      state.currentPlayMusic = currentMusic;\n      console.log(\"state.currentPlayMusic\");\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Wacht/Desktop/git/cloudMusic-Source-Code/src/store/aplayer.js"],"names":["createPersistedState","namespaced","state","plugins","key","storage","window","localStorage","whiteList","audio","audition","name","artist","url","cover","id","timer","musicAudioStatu","currentPlayMusic","alplayShow","actions","mutations","addSONG","song","item","_vm","$message","push","type","message","deleteMUSIC","index","splice","addAUDITION","deleteAUDITION","changeAPLAYER","statu","changeCurrentPlayMusic","currentMusic","console","log"],"mappings":"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","sourcesContent":["import createPersistedState from \"vuex-persistedstate\"\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    // 歌曲生成周期\r\n    plugins: [createPersistedState({\r\n      key: 'aplayer',\r\n      storage: window.localStorage,\r\n      whiteList: ['audio', 'audition', 'musicAudioStatu', 'alplayShow'],\r\n    })],\r\n    audio: [], //播放列表音乐\r\n    audition: [\r\n     {\r\n        name: '卡农（经典钢琴版）', //歌曲名\r\n        artist: 'dylanf', //作者\r\n        // url: songUrlAdd,\r\n        url: `https://music.163.com/song/media/outer/url?id=478507889.mp3`,\r\n        cover: 'http://p2.music.126.net/fL7FAeRby1s7JreBqoOKjg==/109951165175371079.jpg',\r\n        // lrc: songlrc,\r\n        id: 478507889,\r\n        timer: true, //试听中添加，防止用户连点消耗性能，在添加播放列表方法中可使用到\r\n      }\r\n    ], //试听歌曲\r\n    musicAudioStatu: 1, //控制audio,audition两个播放器显示\r\n    currentPlayMusic:{},//当前正在播放的音乐\r\n    alplayShow: true,\r\n  },\r\n  actions: {},\r\n  mutations: {\r\n    //播放器添加歌曲\r\n    addSONG(state, song) {\r\n      for (let item of state.audio) {\r\n        if (item.id === song.id) {\r\n          this._vm.$message(\"播放列表已存在这首歌\");\r\n          return;\r\n        }\r\n      }\r\n      state.audio.push(song); //将歌曲添加\r\n      this._vm.$message({\r\n        type: \"success\",\r\n        message: \"歌曲已添加到播放列表\",\r\n      });\r\n    },\r\n    //删除歌曲\r\n    deleteMUSIC(state, index) {\r\n      state.audio.splice(index, 1);\r\n      this._vm.$message({\r\n        type: \"success\",\r\n        message: \"歌曲已移出播放列表\",\r\n      });\r\n    },\r\n    //添加试听\r\n    addAUDITION(state, song) {\r\n      for (let item of state.audition) {\r\n        if (item.id === song.id) {\r\n          this._vm.$message(\"正在试听这首歌\");\r\n          return;\r\n        }\r\n      }\r\n      state.musicAudioStatu = 1;\r\n      state.audition.splice(0, 1);\r\n      state.audition[0] = song; //将歌曲添加\r\n      this._vm.$message({\r\n        type: \"success\",\r\n        message: \"歌曲已添加到试听\",\r\n      });\r\n    },\r\n    // 删除试听\r\n    deleteAUDITION(state, index) {\r\n      state.audition.splice(index, 1);\r\n      this._vm.$message({\r\n        type: \"success\",\r\n        message: \"歌曲已移出试听列表\",\r\n      });\r\n    },\r\n    //更换播放器\r\n    changeAPLAYER(state, statu) {\r\n      statu === 1 ? (state.musicAudioStatu = 1) : (state.musicAudioStatu = 0);\r\n    },\r\n    //更换当前正在播放的歌曲\r\n    changeCurrentPlayMusic(state,currentMusic) {\r\n      state.currentPlayMusic = currentMusic\r\n      console.log(\"state.currentPlayMusic\")\r\n    }\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}