{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport QRCode from \"qrcode\";\nimport { getqrKey, getqrImg, getqrStatus, getloginStatus, loginOut } from \"@/api/login\"; // import { mapMutations, mapState } from \"vuex\";\n// import { getuserDetail, getAccount } from \"@/api/user\";\n\nimport { cookieParser, getTimestamp } from \"@/utils/commonApi\";\nimport { getCookie, removeCookie, setCookie } from \"@/utils/cookie\";\nexport default {\n  name: \"Login\",\n\n  data() {\n    return {\n      loginWrapShow: false,\n      //展示登录窗口\n      qrStatus: \"\",\n      qrtimer: null,\n      key: \"\",\n      user: {\n        avatarUrl: \"\",\n        nickname: \"\",\n        userId: \"\",\n        userType: \"\"\n      },\n      loginStatus: false,\n      //登录状态\n      qrloading: false //点击判断是否已经授权时的加载图标状态\n\n    };\n  },\n\n  computed: {},\n\n  created() {\n    if (localStorage.getItem(\"user\")) {\n      this.user = JSON.parse(localStorage.getItem(\"user\"));\n    }\n\n    this.getloginStatus();\n  },\n\n  methods: {\n    goLogin() {\n      //点击登录，获取二维码\n      // this.loginWrapOnOff(true);\n      this.loginWrapShow = true;\n      this.refreshQr();\n    },\n\n    //生成二维码\n    getQRCode(qrurl) {\n      let opts = {\n        errorCorrectionLevel: \"H\",\n        //容错级别\n        type: \"image/png\",\n        //生成的二维码类型\n        quality: 0.3,\n        //二维码质量\n        margin: 5,\n        //二维码留白边距\n        width: 180,\n        //宽\n        height: 180,\n        //高\n        text: \"\",\n        //二维码内容\n        color: {\n          dark: \"#333333\",\n          //前景色\n          light: \"#fff\" //背景色\n\n        }\n      };\n      this.QRCodeMsg = qrurl; //生成的二维码为URL地址js\n\n      let msg = document.getElementById(\"QRCode_header\"); // 将获取到的数据（val）画到msg（canvas）上\n\n      QRCode.toCanvas(msg, qrurl, opts, function (error) {// console.log(error)\n      });\n    },\n\n    //  获取/刷新二维码\n    refreshQr() {\n      let params = {\n        timestamp: getTimestamp()\n      }; // console.log(params.timestamp)\n\n      getqrKey(params).then(async res => {\n        this.key = await res.data.data.unikey;\n        let params = {\n          key: res.data.data.unikey\n        };\n        getqrImg(params).then(res => {\n          this.getQRCode(res.data.data.qrurl);\n        });\n      });\n    },\n\n    // 二维码状态\n    getqrStatus() {\n      this.qrloading = true;\n      let params = {\n        key: this.key\n      };\n      getqrStatus(params).then(async res => {\n        this.qrStatus = await res.data.message;\n\n        if (res.data.code === 803) {\n          // clearInterval(this.qrtimer);\n          // console.log(\"扫码登录成功\");\n          let cookies = cookieParser(res.data.cookie);\n          setCookie(\"__csrf\", cookies[1]);\n          setTimeout(() => {\n            this.loginWrapShow = false; //关闭登录窗口\n\n            this.$message({\n              type: \"success\",\n              message: \"已登录\"\n            });\n          }, 500);\n          this.getloginStatus();\n        } else if (res.data.code === 800) {\n          this.qrStatus += \",请刷新获取\";\n        } else if (res.data.code === 400) {\n          this.qrStatus = \"请求错误\";\n        }\n\n        this.qrloading = false;\n      });\n    },\n\n    //获取登录状态\n    getloginStatus() {\n      getloginStatus().then(async res => {\n        // console.log(res.data.data.profile);\n        if (res.data.data.profile) {\n          this.loginStatus = true;\n          this.user = {\n            avatarUrl: res.data.data.profile.avatarUrl,\n            nickname: res.data.data.profile.nickname,\n            userId: res.data.data.profile.userId,\n            userType: res.data.data.profile.userType\n          }; // console.log(this.user);\n\n          localStorage.setItem(\"user\", JSON.stringify(this.user));\n        } else {\n          this.loginStatus = false;\n          localStorage.removeItem(\"user\");\n        }\n      });\n    },\n\n    //退出登录\n    loginOut() {\n      const loading = this.$loading({\n        background: \"rgba(255,255,255,0.1)\"\n      });\n      loginOut().then(res => {\n        this.$nextTick(() => {\n          loading.close();\n        });\n        this.loginStatus = false;\n        this.user = {};\n        localStorage.removeItem(\"user\");\n        this.$message.success(\"已退出登录\"); // this.getloginStatus(); //获取登陆状态\n      }).catch(err => {\n        this.$nextTick(() => {\n          loading.close();\n        });\n      });\n    },\n\n    golike() {\n      this.$router.push({\n        name: \"myPlayList\",\n        params: {\n          id: this.user.userId\n        }\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;AACA,SACAA,QADA,EAEAC,QAFA,EAGAC,WAHA,EAIAC,cAJA,EAKAC,QALA,QAMA,aANA,C,CAOA;AACA;;AACA;AACA;AAEA;AACAC,eADA;;AAEAC;AACA;AACAC,0BADA;AACA;AACAC,kBAFA;AAGAC,mBAHA;AAIAC,aAJA;AAKAC;AACAC,qBADA;AAEAC,oBAFA;AAGAC,kBAHA;AAIAC;AAJA,OALA;AAWAC,wBAXA;AAWA;AACAC,sBAZA,CAYA;;AAZA;AAcA,GAjBA;;AAkBAC,cAlBA;;AAmBAC;AACA;AACA;AACA;;AACA;AACA,GAxBA;;AAyBAC;AACAC;AACA;AACA;AACA;AACA;AACA,KANA;;AAOA;AACAC;AACA;AACAC,iCADA;AACA;AACAC,yBAFA;AAEA;AACAC,oBAHA;AAGA;AACAC,iBAJA;AAIA;AACAC,kBALA;AAKA;AACAC,mBANA;AAMA;AACAC,gBAPA;AAOA;AACAC;AACAC,yBADA;AACA;AACAC,uBAFA,CAEA;;AAFA;AARA;AAaA,6BAdA,CAcA;;AACA,yDAfA,CAgBA;;AACAC,0DACA;AACA,OAFA;AAGA,KA5BA;;AA6BA;AACAC;AACA;AACAC;AADA,QADA,CAIA;;AACAnC;AACA;AACA;AACAU;AADA;AAGAT;AACA;AACA,SAFA;AAGA,OARA;AASA,KA5CA;;AA6CA;AACAC;AACA;AACA;AACAQ;AADA;AAGAR;AACA;;AACA;AACA;AACA;AACA;AACAkC;AACAC;AACA,uCADA,CACA;;AACA;AACAb,6BADA;AAEAc;AAFA;AAIA,WANA,EAMA,GANA;AAOA;AACA,SAbA,MAaA;AACA;AACA,SAFA,MAEA;AACA;AACA;;AACA;AACA,OArBA;AAsBA,KAzEA;;AA2EA;AACAnC;AACAA;AACA;AACA;AACA;AACA;AACAS,sDADA;AAEAC,oDAFA;AAGAC,gDAHA;AAIAC;AAJA,YAFA,CAQA;;AACAwB;AACA,SAVA,MAUA;AACA;AACAA;AACA;AACA,OAhBA;AAiBA,KA9FA;;AA+FA;AACAnC;AACA;AACAoC;AADA;AAGApC,iBACAqC,IADA,CACAC;AACA;AACAC;AACA,SAFA;AAGA;AACA;AACAJ;AACA,uCAPA,CAQA;AACA,OAVA,EAWAK,KAXA,CAWAC;AACA;AACAF;AACA,SAFA;AAGA,OAfA;AAgBA,KApHA;;AAqHAG;AACA;AACAzC,0BADA;AAEA0C;AACAC;AADA;AAFA;AAMA;;AA5HA;AAzBA","names":["getqrKey","getqrImg","getqrStatus","getloginStatus","loginOut","name","data","loginWrapShow","qrStatus","qrtimer","key","user","avatarUrl","nickname","userId","userType","loginStatus","qrloading","computed","created","methods","goLogin","getQRCode","errorCorrectionLevel","type","quality","margin","width","height","text","color","dark","light","QRCode","refreshQr","timestamp","setCookie","setTimeout","message","localStorage","background","then","res","loading","catch","err","golike","params","id"],"sourceRoot":"src/components/login","sources":["index.vue"],"sourcesContent":["<template>\n  <!-- 暂时开启该功能 -->\n  <div>\n    <div v-if=\"!loginStatus\" class=\"login\" @click=\"goLogin\">登录</div>\n    <div v-if=\"loginStatus\" class=\"user\">\n      <img class=\"userAvatar\" :src=\"user.avatarUrl\" alt=\"\" /><span\n        class=\"nickName\"\n        >{{ user.nickname }}</span\n      >\n      <ul>\n        <li class=\"logined-li\" @click=\"golike\">我的歌单</li>\n        <li class=\"logined-li\" @click=\"loginOut\">退出登录</li>\n      </ul>\n    </div>\n    <!-- <li class=\"logined-li\" @click=\"loginOut\">退出登录</li> -->\n    <!-- <el-button style=\"color: black\" @click=\"getloginStatus\"\n      >登录状态获取</el-button\n    >\n    <button @click=\"ceshi\">登录,测试</button>\n    <el-button style=\"color: black\" @click=\"getuserDetail\"\n      >获取用户详情</el-button\n    > -->\n    <!-- <el-button style=\"color: black\" @click=\"getAccount\">获取账号信息</el-button> -->\n    <div class=\"loginWrap\" v-show=\"loginWrapShow\">\n      <p class=\"loginClose\" @click=\"loginWrapShow = false\">\n        <i class=\"el-icon-close\"></i>\n      </p>\n      <div class=\"imgWrap\">\n        <canvas id=\"QRCode_header\"></canvas>\n      </div>\n      <p class=\"refreshQr\">\n        <span @click=\"refreshQr\">刷新二维码</span>\n      </p>\n      <p id=\"qrStatus\">\n        {{ qrStatus }}<i v-if=\"qrloading\" class=\"el-icon-loading\"></i>\n      </p>\n      <p\n        class=\"enter\"\n        @click=\"\n          getqrStatus();\n          qrloading = true;\n        \"\n      >\n        <span\n          >使用网易云音乐app进行扫码,可能会有所延迟,不用多次扫码,手动点击此处进入</span\n        >\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport QRCode from \"qrcode\";\nimport {\n  getqrKey,\n  getqrImg,\n  getqrStatus,\n  getloginStatus,\n  loginOut,\n} from \"@/api/login\";\n// import { mapMutations, mapState } from \"vuex\";\n// import { getuserDetail, getAccount } from \"@/api/user\";\nimport { cookieParser, getTimestamp } from \"@/utils/commonApi\";\nimport { getCookie, removeCookie, setCookie } from \"@/utils/cookie\";\n\nexport default {\n  name: \"Login\",\n  data() {\n    return {\n      loginWrapShow: false, //展示登录窗口\n      qrStatus: \"\",\n      qrtimer: null,\n      key: \"\",\n      user: {\n        avatarUrl: \"\",\n        nickname: \"\",\n        userId: \"\",\n        userType: \"\",\n      },\n      loginStatus: false, //登录状态\n      qrloading: false, //点击判断是否已经授权时的加载图标状态\n    };\n  },\n  computed: {},\n  created() {\n    if (localStorage.getItem(\"user\")) {\n      this.user = JSON.parse(localStorage.getItem(\"user\"));\n    }\n    this.getloginStatus();\n  },\n  methods: {\n    goLogin() {\n      //点击登录，获取二维码\n      // this.loginWrapOnOff(true);\n      this.loginWrapShow = true;\n      this.refreshQr();\n    },\n    //生成二维码\n    getQRCode(qrurl) {\n      let opts = {\n        errorCorrectionLevel: \"H\", //容错级别\n        type: \"image/png\", //生成的二维码类型\n        quality: 0.3, //二维码质量\n        margin: 5, //二维码留白边距\n        width: 180, //宽\n        height: 180, //高\n        text: \"\", //二维码内容\n        color: {\n          dark: \"#333333\", //前景色\n          light: \"#fff\", //背景色\n        },\n      };\n      this.QRCodeMsg = qrurl; //生成的二维码为URL地址js\n      let msg = document.getElementById(\"QRCode_header\");\n      // 将获取到的数据（val）画到msg（canvas）上\n      QRCode.toCanvas(msg, qrurl, opts, function (error) {\n        // console.log(error)\n      });\n    },\n    //  获取/刷新二维码\n    refreshQr() {\n      let params = {\n        timestamp: getTimestamp(),\n      };\n      // console.log(params.timestamp)\n      getqrKey(params).then(async (res) => {\n        this.key = await res.data.data.unikey;\n        let params = {\n          key: res.data.data.unikey,\n        };\n        getqrImg(params).then((res) => {\n          this.getQRCode(res.data.data.qrurl);\n        });\n      });\n    },\n    // 二维码状态\n    getqrStatus() {\n      this.qrloading = true;\n      let params = {\n        key: this.key,\n      };\n      getqrStatus(params).then(async (res) => {\n        this.qrStatus = await res.data.message;\n        if (res.data.code === 803) {\n          // clearInterval(this.qrtimer);\n          // console.log(\"扫码登录成功\");\n          let cookies = cookieParser(res.data.cookie);\n          setCookie(\"__csrf\", cookies[1]);\n          setTimeout(() => {\n            this.loginWrapShow = false; //关闭登录窗口\n            this.$message({\n              type: \"success\",\n              message: \"已登录\",\n            });\n          }, 500);\n          this.getloginStatus();\n        } else if (res.data.code === 800) {\n          this.qrStatus += \",请刷新获取\";\n        } else if (res.data.code === 400) {\n          this.qrStatus = \"请求错误\";\n        }\n        this.qrloading = false;\n      });\n    },\n\n    //获取登录状态\n    getloginStatus() {\n      getloginStatus().then(async (res) => {\n        // console.log(res.data.data.profile);\n        if (res.data.data.profile) {\n          this.loginStatus = true;\n          this.user = {\n            avatarUrl: res.data.data.profile.avatarUrl,\n            nickname: res.data.data.profile.nickname,\n            userId: res.data.data.profile.userId,\n            userType: res.data.data.profile.userType,\n          };\n          // console.log(this.user);\n          localStorage.setItem(\"user\", JSON.stringify(this.user));\n        } else {\n          this.loginStatus = false;\n          localStorage.removeItem(\"user\");\n        }\n      });\n    },\n    //退出登录\n    loginOut() {\n      const loading = this.$loading({\n        background: \"rgba(255,255,255,0.1)\",\n      });\n      loginOut()\n        .then((res) => {\n          this.$nextTick(() => {\n            loading.close();\n          });\n          this.loginStatus = false;\n          this.user = {};\n          localStorage.removeItem(\"user\");\n          this.$message.success(\"已退出登录\");\n          // this.getloginStatus(); //获取登陆状态\n        })\n        .catch((err) => {\n          this.$nextTick(() => {\n            loading.close();\n          });\n        });\n    },\n    golike() {\n      this.$router.push({\n        name: \"myPlayList\",\n        params: {\n          id: this.user.userId,\n        },\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"less\" scoped>\n.login,\n.user {\n  position: absolute;\n  // width: 150px;\n  height: 30px;\n  top: 0;\n  right: 10px;\n  color: rgba(238, 238, 238, 0.61);\n  text-align: center;\n  overflow: hidden;\n  transition: 0.2s;\n  // background: rgb(161, 145, 139);\n  &:hover {\n    height: 96px; //每次添加一个列表这里加32px\n    transform: scale(1.01);\n  }\n\n  .userAvatar {\n    vertical-align: top;\n    margin-right: 10px;\n    width: 28px;\n    height: 28px;\n    border-radius: 50%;\n  }\n  .nickName {\n    display: inline-block;\n    font-size: 13px;\n    height: 30px;\n    line-height: 30px;\n  }\n  .logined-li {\n    height: 32px;\n    line-height: 32px;\n    font-size: 13px;\n    transition: 0.2s;\n    padding: 0 10px;\n    background: rgba(160, 160, 160, 0.041);\n\n    &:hover {\n      cursor: pointer;\n      color: rgb(39, 177, 131);\n      transform: scale(1.01);\n    }\n  }\n}\n.login {\n  &:hover {\n    cursor: pointer;\n    color: rgb(187, 145, 90);\n  }\n}\n.loginWrap {\n  z-index: 999;\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n  width: 500px;\n  height: 300px;\n  border-radius: 15px;\n  background: url(@/static/img/background8.jpeg);\n\n  .loginClose {\n    position: absolute;\n    height: 20px;\n    top: 15px;\n    right: 15px;\n\n    color: rgb(221, 191, 151);\n    transition: 0.2s;\n    /deep/ .el-icon-close {\n      font-size: 20px;\n\n      &:hover {\n        cursor: pointer;\n        color: rgb(187, 145, 90);\n      }\n    }\n  }\n  .imgWrap {\n    // display: inline-block;\n    margin: 45px auto 0;\n    width: 180px;\n    height: 180px;\n    #QRCode_header {\n      margin: auto;\n    }\n  }\n  #qrStatus {\n    color: #eee;\n    text-align: center;\n    // background-color: #eee;\n  }\n  .refreshQr {\n    padding: 5px;\n    color: rgba(255, 255, 255, 0.808);\n\n    text-align: center;\n    transition: 0.2s;\n    span {\n      font-size: 15px;\n      transition: 0.2s;\n      &:hover {\n        color: rgba(221, 191, 152);\n        cursor: pointer;\n      }\n    }\n  }\n  .enter {\n    position: absolute;\n    bottom: 5px;\n    right: 5px;\n    font-size: 14px;\n    color: rgba(221, 191, 152, 0.788);\n    transition: 0.2s;\n    &:hover {\n      color: rgba(221, 191, 152);\n      cursor: pointer;\n    }\n  }\n}\n</style>"]},"metadata":{},"sourceType":"module"}