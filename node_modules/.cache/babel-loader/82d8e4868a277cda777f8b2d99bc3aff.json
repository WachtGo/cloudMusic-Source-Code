{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Desktop/git/cloudMusic-Source-Code/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport createPersistedState from \"vuex-persistedstate\"; // import {getToken,setToken,removeToken} from \"@/utils/auth\"\n// import {getStorage, setStorage,removeStorage} from \"@/utils/storage\"\n\nVue.use(Vuex);\nexport default new Vuex.Store({\n  // 歌曲生成周期\n  plugins: [createPersistedState({\n    storage: window.sessionStorage\n  })],\n  state: {// 获取token\n    // token:getToken(),\n    //获取本地token\n    // token_storage:getStorage(),\n  },\n  //mutations用于修改state\n  //Async 异步\n  mutations: {\n    //将方法名改成大写，防止在其他组件中出现同名冲突（无法生效）\n    //将token保存在本地存储\n    // setSTORAGE(state,tokenName,tokenContent){\n    //   setStorage(tokenName,tokenContent)\n    // }\n    // ,\n    // //保存token\n    // setTOKEN(state,token){\n    //   setToken(token)\n    //   this._vm.$message({\n    //     type: 'success',\n    //     message: 'cookie设置成功',\n    //   });\n    // },\n    // removeTOKEN(state){\n    //   state.token = null\n    //   removeToken()\n    //   this._vm.$message({\n    //     type: 'success',\n    //     message: '成功退出登录',\n    //   });\n    // },\n    //播放器添加歌曲\n    addSONG: function addSONG(state, song) {\n      var _iterator = _createForOfIteratorHelper(state.audio),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n\n          // if (item.url === song.url) {\n          //   this._vm.$message('播放列表已存在这首歌');\n          //   return\n          // }\n          if (item.id === song.id) {\n            this._vm.$message('播放列表已存在这首歌');\n\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      state.audio.push(song); //将歌曲添加\n\n      this._vm.$message({\n        type: 'success',\n        message: '歌曲已添加到播放列表'\n      });\n    },\n    //删除歌曲\n    deleteMUSIC: function deleteMUSIC(state, index) {\n      state.audio.splice(index, 1);\n\n      this._vm.$message({\n        type: 'success',\n        message: '歌曲已移出播放列表'\n      });\n    },\n    //更换搜索项\n    tagSelect: function tagSelect(state, tag) {\n      for (var key in state.tagSwitch) {\n        if (key != tag) {\n          state.tagSwitch[key] = false;\n        }\n      }\n\n      state.tagSwitch[tag] = true; // console.log('state.tagSwitch----------------', state.tagSwitch)\n    } // //刷新音频播放器\n    // alplayReload(state,change){\n    //   if(change){\n    //      state.alplayShow = false\n    //   setTimeout(()=>{\n    //     state.alplayShow = true\n    //   },1000)\n    //   }\n    // }\n\n  },\n  //actions专门用来做异步处理\n  actions: {}\n});","map":{"version":3,"sources":["D:/Desktop/git/cloudMusic-Source-Code/src/store/index.js"],"names":["Vue","Vuex","createPersistedState","use","Store","plugins","storage","window","sessionStorage","state","mutations","addSONG","song","audio","item","id","_vm","$message","push","type","message","deleteMUSIC","index","splice","tagSelect","tag","key","tagSwitch","actions"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,oBAAP,MAAiC,qBAAjC,C,CACA;AACA;;AACAF,GAAG,CAACG,GAAJ,CAAQF,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACG,KAAT,CAAe;AAC5B;AACAC,EAAAA,OAAO,EAAE,CAACH,oBAAoB,CAAC;AAC7BI,IAAAA,OAAO,EAAEC,MAAM,CAACC;AADa,GAAD,CAArB,CAFmB;AAM5BC,EAAAA,KAAK,EAAE,CACL;AACA;AACA;AACA;AAJK,GANqB;AAY5B;AACA;AACAC,EAAAA,SAAS,EAAE;AAAC;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,OAxBS,mBAwBDF,KAxBC,EAwBMG,IAxBN,EAwBY;AAAA,iDACFH,KAAK,CAACI,KADJ;AAAA;;AAAA;AACnB,4DAA8B;AAAA,cAArBC,IAAqB;;AAC5B;AACA;AACA;AACA;AACA,cAAIA,IAAI,CAACC,EAAL,KAAYH,IAAI,CAACG,EAArB,EAAyB;AACvB,iBAAKC,GAAL,CAASC,QAAT,CAAkB,YAAlB;;AACA;AACD;AACF;AAVkB;AAAA;AAAA;AAAA;AAAA;;AAWnBR,MAAAA,KAAK,CAACI,KAAN,CAAYK,IAAZ,CAAiBN,IAAjB,EAXmB,CAWG;;AACtB,WAAKI,GAAL,CAASC,QAAT,CAAkB;AAChBE,QAAAA,IAAI,EAAE,SADU;AAEhBC,QAAAA,OAAO,EAAE;AAFO,OAAlB;AAID,KAxCQ;AAyCT;AACAC,IAAAA,WA1CS,uBA0CGZ,KA1CH,EA0CSa,KA1CT,EA0CgB;AACvBb,MAAAA,KAAK,CAACI,KAAN,CAAYU,MAAZ,CAAmBD,KAAnB,EAAyB,CAAzB;;AACA,WAAKN,GAAL,CAASC,QAAT,CAAkB;AAChBE,QAAAA,IAAI,EAAE,SADU;AAEhBC,QAAAA,OAAO,EAAE;AAFO,OAAlB;AAID,KAhDQ;AAiDT;AACAI,IAAAA,SAlDS,qBAkDCf,KAlDD,EAkDQgB,GAlDR,EAkDa;AACpB,WAAK,IAAIC,GAAT,IAAgBjB,KAAK,CAACkB,SAAtB,EAAiC;AAC/B,YAAID,GAAG,IAAID,GAAX,EAAgB;AACdhB,UAAAA,KAAK,CAACkB,SAAN,CAAgBD,GAAhB,IAAuB,KAAvB;AACD;AACF;;AACDjB,MAAAA,KAAK,CAACkB,SAAN,CAAgBF,GAAhB,IAAuB,IAAvB,CANoB,CAOpB;AACD,KA1DQ,CA4DT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AApES,GAdiB;AAqF5B;AACAG,EAAAA,OAAO,EAAE;AAtFmB,CAAf,CAAf","sourcesContent":["import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\nimport createPersistedState from \"vuex-persistedstate\"\r\n// import {getToken,setToken,removeToken} from \"@/utils/auth\"\r\n// import {getStorage, setStorage,removeStorage} from \"@/utils/storage\"\r\nVue.use(Vuex)\r\n\r\nexport default new Vuex.Store({\r\n  // 歌曲生成周期\r\n  plugins: [createPersistedState({\r\n    storage: window.sessionStorage\r\n  })],\r\n\r\n  state: {\r\n    // 获取token\r\n    // token:getToken(),\r\n    //获取本地token\r\n    // token_storage:getStorage(),\r\n  },\r\n  //mutations用于修改state\r\n  //Async 异步\r\n  mutations: {//将方法名改成大写，防止在其他组件中出现同名冲突（无法生效）\r\n\r\n    //将token保存在本地存储\r\n    // setSTORAGE(state,tokenName,tokenContent){\r\n    //   setStorage(tokenName,tokenContent)\r\n    // }\r\n    // ,\r\n    // //保存token\r\n    // setTOKEN(state,token){\r\n    //   setToken(token)\r\n    //   this._vm.$message({\r\n    //     type: 'success',\r\n    //     message: 'cookie设置成功',\r\n    //   });\r\n    // },\r\n    // removeTOKEN(state){\r\n    //   state.token = null\r\n    //   removeToken()\r\n    //   this._vm.$message({\r\n    //     type: 'success',\r\n    //     message: '成功退出登录',\r\n    //   });\r\n    // },\r\n    //播放器添加歌曲\r\n    addSONG(state, song) {\r\n      for (let item of state.audio) {\r\n        // if (item.url === song.url) {\r\n        //   this._vm.$message('播放列表已存在这首歌');\r\n        //   return\r\n        // }\r\n        if (item.id === song.id) {\r\n          this._vm.$message('播放列表已存在这首歌');\r\n          return\r\n        }\r\n      }\r\n      state.audio.push(song)//将歌曲添加\r\n      this._vm.$message({\r\n        type: 'success',\r\n        message: '歌曲已添加到播放列表',\r\n      });\r\n    },\r\n    //删除歌曲\r\n    deleteMUSIC(state,index) {\r\n      state.audio.splice(index,1)\r\n      this._vm.$message({\r\n        type: 'success',\r\n        message: '歌曲已移出播放列表',\r\n      });\r\n    },\r\n    //更换搜索项\r\n    tagSelect(state, tag) {\r\n      for (let key in state.tagSwitch) {\r\n        if (key != tag) {\r\n          state.tagSwitch[key] = false;\r\n        }\r\n      }\r\n      state.tagSwitch[tag] = true;\r\n      // console.log('state.tagSwitch----------------', state.tagSwitch)\r\n    },\r\n   \r\n    // //刷新音频播放器\r\n    // alplayReload(state,change){\r\n    //   if(change){\r\n    //      state.alplayShow = false\r\n    //   setTimeout(()=>{\r\n    //     state.alplayShow = true\r\n    //   },1000)\r\n    //   }\r\n    // }\r\n   \r\n  },\r\n  //actions专门用来做异步处理\r\n  actions: {\r\n\r\n  }\r\n})"]},"metadata":{},"sourceType":"module"}