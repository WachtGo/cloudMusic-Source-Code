{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getSearchDefault, getSearchSuggest } from \"@/api/api\";\nimport { deepFreeze, randomNum } from \"@/utils/commonApi\";\nexport default {\n  data() {\n    return {\n      searchSwitch: false,\n      //搜索窗口开关\n      searchTerms: \"\",\n      //输入框内容\n      searchCorrela: \"\",\n      placeholder: \"\",\n      musicList: {},\n      //搜索列表\n      inputTimer: null,\n      //搜索节流\n      reloadShow: true,\n      //是否在请求数据\n      // page: 1, //搜索列表页数\n      // limit: 30, //搜索每次请求的数\n      // count: 15, //最后一次搜索请求的数量，用于判断是否全部加载完毕\n      // 搜索框随机推荐列表\n      searchSuggest: ['卡农', '空山新雨', '天空之城', '迪迦奥特曼 人类的光', ' 分分钟需要你', '斑马', '江南', '周杰伦', '林俊杰', 'Childhood Memory', '星尘']\n    };\n  },\n\n  directives: {// drag(el, binding) {\n    //   // console.log(el)\n    //   // let dragBox = el.parentElement.parentElement; //获取app元素\n    //   let dragBox = document.getElementById(\"app\");\n    //   // 鼠标事件\n    //   el.onmousedown = (e) => {\n    //     //鼠标点击时鼠标的的位置\n    //     // console.log(e)\n    //     // console.log(el.parentElement)\n    //     let downX = e.clientX;\n    //     let downY = e.clientY;\n    //     //元素位置\n    //     let left = dragBox.offsetLeft;\n    //     let top = dragBox.offsetTop;\n    //     // console.log(e.clientX,e.clientY)\n    //     // console.log('app位置：',dragBox.offsetLeft,dragBox.offsetTop)\n    //     document.onmousemove = (e) => {\n    //       //鼠标移动的距离\n    //       let moveX = e.clientX - downX;\n    //       let moveY = e.clientY - downY;\n    //       // console.log('鼠标移动:',moveX,moveY)\n    //       //移动当前元素\n    //       dragBox.style.left = left + moveX + \"px\";\n    //       dragBox.style.top = top + moveY + \"px\";\n    //     };\n    //     document.onmouseup = (e) => {\n    //       //鼠标弹起来的时候不再移动\n    //       document.onmousemove = null;\n    //       //预防鼠标弹起来后还会循环（即预防鼠标放上去的时候还会移动）\n    //       document.onmouseup = null;\n    //     };\n    //   };\n    //   //手指触屏事件\n    //   el.ontouchstart = (e) => {\n    //     //鼠标点击时鼠标的的位置\n    //     // console.log(e)\n    //     // console.log(el.parentElement)\n    //     let downX = e.clientX;\n    //     let downY = e.clientY;\n    //     //元素位置\n    //     let left = dragBox.offsetLeft;\n    //     let top = dragBox.offsetTop;\n    //     // console.log(e.clientX,e.clientY)\n    //     // console.log('app位置：',dragBox.offsetLeft,dragBox.offsetTop)\n    //     document.ontouchmove = (e) => {\n    //       //鼠标移动的距离\n    //       let moveX = e.clientX - downX;\n    //       let moveY = e.clientY - downY;\n    //       // console.log('鼠标移动:',moveX,moveY)\n    //       //移动当前元素\n    //       dragBox.style.left = left + moveX + \"px\";\n    //       dragBox.style.top = top + moveY + \"px\";\n    //     };\n    //     document.ontouchend = (e) => {\n    //       //鼠标弹起来的时候不再移动\n    //       document.touchmove = null;\n    //       //预防鼠标弹起来后还会循环（即预防鼠标放上去的时候还会移动）\n    //       document.touchend = null;\n    //     };\n    //   };\n    // },\n  },\n  watch: {\n    searchTerms: function () {\n      this.search();\n    }\n  },\n\n  mounted() {\n    this.getSearchDefault();\n  },\n\n  methods: {\n    goBack(val) {\n      this.$router.go(val);\n    },\n\n    refreshPage() {\n      location.reload();\n    },\n\n    goHome() {\n      this.$router.push({\n        name: \"home\"\n      });\n    },\n\n    switchChange() {\n      //显示搜索列表\n      this.searchSwitch = true;\n\n      if (this.searchTerms.trim()) {\n        this.getSearchSuggest(this.searchTerms);\n      } else {\n        this.getSearchSuggest(this.placeholder);\n      }\n    },\n\n    stopSearch() {\n      this.searchSwitch = false;\n      clearTimeout(this.inputTimer);\n    },\n\n    selectMusic(keywords, artist) {\n      this.placeholder = `${keywords}      ${artist}`; // console.log(this.placeholder, \"---placeholde\");\n\n      this.searchTerms = \"\"; //选择歌曲进入列表\n\n      this.$router.push({\n        name: \"emptyPage\",\n        query: {\n          keywords: keywords,\n          reload: true\n        }\n      });\n      this.searchSwitch = false;\n    },\n\n    //进入歌曲详情\n    goSongDetails(id) {\n      //路由配置\n      let routerInfo = {\n        name: \"songDetails\",\n        params: {\n          id: id\n        }\n      };\n      this.$router.push({\n        name: \"emptyPage\",\n        params: routerInfo\n      });\n    },\n\n    //进入歌手详情\n    selectArtist(singerDetail) {\n      let params = {\n        id: singerDetail.id,\n        img1v1Url: singerDetail.img1v1Url,\n        name: singerDetail.name,\n        alias: singerDetail.alias,\n        musicSize: null,\n        albumSize: singerDetail.albumSize,\n        mvSize: null,\n        briefDesc: \"\"\n      }; //路由配置\n\n      let routerInfo = {\n        name: \"singerDetail\",\n        params: {\n          artist: params\n        }\n      };\n      this.$router.push({\n        name: \"emptyPage\",\n        params: routerInfo\n      });\n    },\n\n    // 进入专辑详情\n    selectAlbum(albumDesc) {\n      let params = {\n        id: albumDesc.id,\n        name: albumDesc.name,\n        blurPicUrl: require('@/static/img/musicpic3.png'),\n        size: albumDesc.size,\n        artist: {\n          name: albumDesc.artist.name,\n          img1v1Url: albumDesc.artist.img1v1Url\n        }\n      }; //路由配置发送给空页面\n\n      let routerInfo = {\n        name: \"albumDetail\",\n        params: {\n          albumDesc: params\n        }\n      };\n      this.$router.push({\n        name: \"emptyPage\",\n        params: routerInfo\n      });\n    },\n\n    //进入歌单详情\n    goSongList(playListDetail) {\n      // console.log(playListDetail);\n      let params = {\n        id: playListDetail.id,\n        name: playListDetail.name,\n        coverImgUrl: playListDetail.coverImgUrl,\n        trackCount: playListDetail.trackCount,\n        creator: {\n          avatarUrl: \"\",\n          nickname: \"\",\n          signature: \"\"\n        },\n        tags: [],\n        description: playListDetail.description\n      }; //传入歌单id进入歌单详情\n\n      let routerInfo = {\n        name: \"playListDetails\",\n        params: {\n          playListDetail: params\n        }\n      };\n      this.$router.push({\n        name: \"emptyPage\",\n        params: routerInfo\n      });\n    },\n\n    //搜索进入搜索结果页面\n    enterSearch(searchwords) {\n      this.searchSwitch = false;\n      let keywords = \"\"; //按照搜索框内容进行搜索\n\n      if (searchwords == \"searchTerms\") {\n        if (!this.searchTerms.trim()) {\n          //搜索框为空时，搜索内容值为placeholder\n          this.searchTerms = this.placeholder;\n        }\n\n        keywords = this.searchTerms;\n      } else if (searchwords == \"searchCorrela\") {\n        //按照 搜索相关词 进行搜索\n        keywords = this.searchCorrela;\n      }\n\n      let routerInfo = {\n        //路由配置发送给空页面\n        name: \"MusicPlayList\",\n        query: {\n          keywords: keywords,\n          reload: true\n        }\n      };\n      this.$router.push({\n        name: \"emptyPage\",\n        params: routerInfo\n      });\n    },\n\n    search() {\n      //搜索列表\n      if (this.searchTerms.trim) {\n        if (this.inputTimer) {\n          clearTimeout(this.inputTimer);\n        }\n\n        this.inputTimer = setTimeout(() => {\n          this.musicList = {}; // this.page = 1;\n\n          this.getSearchSuggest(this.searchTerms);\n          clearTimeout(this.inputTimer);\n        }, 500);\n      }\n    },\n\n    //搜索\n    getSearchSuggest(keywords) {\n      this.reloadShow = true;\n      this.searchCorrela = keywords; //获取歌曲列表\n\n      let params = {\n        keywords: keywords // type: \"\",\n\n      };\n      getSearchSuggest(params).then(async res => {\n        if (res.data.code == 200) {\n          // console.log(\"搜索建议\", res.data.result);\n          this.musicList = res.data.result;\n        } else {\n          this.musicList = {};\n        }\n\n        this.reloadShow = false; //加载的开关\n      });\n    },\n\n    getSearchDefault() {\n      //随机从searchSuggest数组中的歌曲放在搜索框推荐中，例如[0,2]则为：0，1，2\n      this.placeholder = this.searchSuggest[randomNum(0, this.searchSuggest.length - 1)]; //默认搜索关键字\n      // getSearchDefault().then(async (res) => {\n      //   this.placeholder = res.data.data.realkeyword;\n      // console.log(\"搜索关键字：\", res.data.data);\n      // });\n    } //搜索懒加载\n    // searchScroll() {\n    //   //获取现在滚动高度\n    //   let scrollTop = document.getElementById(\"search-box\").scrollTop;\n    //   // console.log('滚动高度----:',scrollTop)\n    //   // 获取可视区域高度\n    //   let clientHeight = document.getElementById(\"search-box\").clientHeight;\n    //   // 获取文档总高度\n    //   let scrollHeight = document.getElementById(\"search-box\").scrollHeight;\n    //   // 滚动到底部\n    //   if (scrollTop + clientHeight === scrollHeight) {\n    //     // console.log('到底部了');\n    //     // console.log(this.reloadShow,this.count)\n    //     if (this.reloadShow || this.limit > this.count) return;\n    //     this.page += 1;\n    //     this.getSearchSuggest(this.searchTerms);\n    //   }\n    // },\n\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}