{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Desktop/git\\u5DE5\\u4F5C\\u533A/cloudMusic-Source-Code/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport createPersistedState from \"vuex-persistedstate\"; // import {getToken,setToken,removeToken} from \"@/utils/auth\"\n// import {getStorage, setStorage,removeStorage} from \"@/utils/storage\"\n\nVue.use(Vuex);\nexport default new Vuex.Store({\n  // 歌曲生成周期\n  plugins: [createPersistedState({\n    storage: window.sessionStorage\n  })],\n  state: {\n    // 获取token\n    // token:getToken(),\n    //获取本地token\n    // token_storage:getStorage(),\n    // 首页标签\n    homeTags: {\n      routerPage: 0,\n      tags: [{\n        page: 0,\n        pageName: '个性推荐'\n      }, {\n        page: 1,\n        pageName: '歌单'\n      }, {\n        page: 2,\n        pageName: '歌手'\n      }]\n    },\n    //歌曲，视频，歌单，歌手等标签开关\n    tagSwitch: {\n      songSwitch: true,\n      albumSwitch: false,\n      singerSwitch: false,\n      playListSwitch: false,\n      videoSwitch: false,\n      mvSwitch: false\n    },\n    audio: [],\n    //播放列表音乐\n    audition: [],\n    //试听歌曲\n    musicAudioStatu: 0,\n    //控制audio,audition两个播放器显示\n    alplayShow: true\n  },\n  //mutations用于修改state\n  //Async 异步\n  mutations: {\n    //将方法名改成大写，防止在其他组件中出现同名冲突（无法生效）\n    //将token保存在本地存储\n    // setSTORAGE(state,tokenName,tokenContent){\n    //   setStorage(tokenName,tokenContent)\n    // }\n    // ,\n    // //保存token\n    // setTOKEN(state,token){\n    //   setToken(token)\n    //   this._vm.$message({\n    //     type: 'success',\n    //     message: 'cookie设置成功',\n    //   });\n    // },\n    // removeTOKEN(state){\n    //   state.token = null\n    //   removeToken()\n    //   this._vm.$message({\n    //     type: 'success',\n    //     message: '成功退出登录',\n    //   });\n    // },\n    //播放器添加歌曲\n    addSONG: function addSONG(state, song) {\n      var _iterator = _createForOfIteratorHelper(state.audio),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n\n          // if (item.url === song.url) {\n          //   this._vm.$message('播放列表已存在这首歌');\n          //   return\n          // }\n          if (item.id === song.id) {\n            this._vm.$message('播放列表已存在这首歌');\n\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      state.audio.push(song); //将歌曲添加\n\n      this._vm.$message({\n        type: 'success',\n        message: '歌曲已添加到播放列表'\n      });\n    },\n    //删除歌曲\n    deleteMUSIC: function deleteMUSIC(state, index) {\n      state.audio.splice(index, 1);\n\n      this._vm.$message({\n        type: 'success',\n        message: '歌曲已移出播放列表'\n      });\n    },\n    //更换搜索项\n    tagSelect: function tagSelect(state, tag) {\n      for (var key in state.tagSwitch) {\n        if (key != tag) {\n          state.tagSwitch[key] = false;\n        }\n      }\n\n      state.tagSwitch[tag] = true; // console.log('state.tagSwitch----------------', state.tagSwitch)\n    },\n    addAUDITION: function addAUDITION(state, song) {\n      var _iterator2 = _createForOfIteratorHelper(state.audition),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n\n          if (item.id === song.id) {\n            this._vm.$message('正在试听这首歌');\n\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      state.musicAudioStatu = 1;\n      state.audition.splice(0, 1);\n      state.audition[0] = song; //将歌曲添加\n\n      this._vm.$message({\n        type: 'success',\n        message: '歌曲已添加到试听'\n      });\n    },\n    deleteAUDITION: function deleteAUDITION(state, index) {\n      state.audition.splice(index, 1);\n\n      this._vm.$message({\n        type: 'success',\n        message: '歌曲已移出试听列表'\n      });\n    },\n    //更换播放器\n    changeAPLAYER: function changeAPLAYER(state, statu) {\n      statu === 1 ? state.musicAudioStatu = 1 : state.musicAudioStatu = 0;\n    },\n    // //刷新音频播放器\n    // alplayReload(state,change){\n    //   if(change){\n    //      state.alplayShow = false\n    //   setTimeout(()=>{\n    //     state.alplayShow = true\n    //   },1000)\n    //   }\n    // }\n    //首页标签更改\n    changehomeTAG: function changehomeTAG(state, page) {\n      state.routerPage = page;\n    }\n  },\n  //actions专门用来做异步处理\n  actions: {}\n});","map":{"version":3,"sources":["D:/Desktop/git工作区/cloudMusic-Source-Code/src/store/index.js"],"names":["Vue","Vuex","createPersistedState","use","Store","plugins","storage","window","sessionStorage","state","homeTags","routerPage","tags","page","pageName","tagSwitch","songSwitch","albumSwitch","singerSwitch","playListSwitch","videoSwitch","mvSwitch","audio","audition","musicAudioStatu","alplayShow","mutations","addSONG","song","item","id","_vm","$message","push","type","message","deleteMUSIC","index","splice","tagSelect","tag","key","addAUDITION","deleteAUDITION","changeAPLAYER","statu","changehomeTAG","actions"],"mappings":"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","sourcesContent":["import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\nimport createPersistedState from \"vuex-persistedstate\"\r\n// import {getToken,setToken,removeToken} from \"@/utils/auth\"\r\n// import {getStorage, setStorage,removeStorage} from \"@/utils/storage\"\r\nVue.use(Vuex)\r\n\r\nexport default new Vuex.Store({\r\n  // 歌曲生成周期\r\n  plugins: [createPersistedState({\r\n    storage: window.sessionStorage\r\n  })],\r\n\r\n  state: {\r\n    // 获取token\r\n    // token:getToken(),\r\n    //获取本地token\r\n    // token_storage:getStorage(),\r\n    // 首页标签\r\n    homeTags:{\r\n      routerPage:0,\r\n     tags: [{page:0,pageName:'个性推荐'},{page:1,pageName:'歌单'},{page:2,pageName:'歌手'},],\r\n    },\r\n    \r\n    //歌曲，视频，歌单，歌手等标签开关\r\n    tagSwitch: {\r\n      songSwitch: true,\r\n      albumSwitch: false,\r\n      singerSwitch: false,\r\n      playListSwitch: false,\r\n      videoSwitch: false,\r\n      mvSwitch: false,\r\n    },\r\n    audio: [],//播放列表音乐\r\n    audition:[],//试听歌曲\r\n    musicAudioStatu:0,//控制audio,audition两个播放器显示\r\n    alplayShow:true\r\n  },\r\n  //mutations用于修改state\r\n  //Async 异步\r\n  mutations: {//将方法名改成大写，防止在其他组件中出现同名冲突（无法生效）\r\n\r\n    //将token保存在本地存储\r\n    // setSTORAGE(state,tokenName,tokenContent){\r\n    //   setStorage(tokenName,tokenContent)\r\n    // }\r\n    // ,\r\n    // //保存token\r\n    // setTOKEN(state,token){\r\n    //   setToken(token)\r\n    //   this._vm.$message({\r\n    //     type: 'success',\r\n    //     message: 'cookie设置成功',\r\n    //   });\r\n    // },\r\n    // removeTOKEN(state){\r\n    //   state.token = null\r\n    //   removeToken()\r\n    //   this._vm.$message({\r\n    //     type: 'success',\r\n    //     message: '成功退出登录',\r\n    //   });\r\n    // },\r\n    //播放器添加歌曲\r\n    addSONG(state, song) {\r\n      for (let item of state.audio) {\r\n        // if (item.url === song.url) {\r\n        //   this._vm.$message('播放列表已存在这首歌');\r\n        //   return\r\n        // }\r\n        if (item.id === song.id) {\r\n          this._vm.$message('播放列表已存在这首歌');\r\n          return\r\n        }\r\n      }\r\n      state.audio.push(song)//将歌曲添加\r\n      this._vm.$message({\r\n        type: 'success',\r\n        message: '歌曲已添加到播放列表',\r\n      });\r\n    },\r\n    //删除歌曲\r\n    deleteMUSIC(state,index) {\r\n      state.audio.splice(index,1)\r\n      this._vm.$message({\r\n        type: 'success',\r\n        message: '歌曲已移出播放列表',\r\n      });\r\n    },\r\n    //更换搜索项\r\n    tagSelect(state, tag) {\r\n      for (let key in state.tagSwitch) {\r\n        if (key != tag) {\r\n          state.tagSwitch[key] = false;\r\n        }\r\n      }\r\n      state.tagSwitch[tag] = true;\r\n      // console.log('state.tagSwitch----------------', state.tagSwitch)\r\n    },\r\n    addAUDITION(state,song) {\r\n      for (let item of state.audition) {\r\n        if (item.id === song.id) {\r\n          this._vm.$message('正在试听这首歌');\r\n          return\r\n        }\r\n      }\r\n      state.musicAudioStatu = 1\r\n      state.audition.splice(0,1)\r\n      state.audition[0] = song//将歌曲添加\r\n      this._vm.$message({\r\n        type: 'success',\r\n        message: '歌曲已添加到试听',\r\n      });\r\n    },\r\n    deleteAUDITION(state,index) {\r\n      state.audition.splice(index,1)\r\n      this._vm.$message({\r\n        type: 'success',\r\n        message: '歌曲已移出试听列表',\r\n      });\r\n    },\r\n    //更换播放器\r\n    changeAPLAYER(state,statu) {\r\n      statu === 1 ? state.musicAudioStatu = 1 : state.musicAudioStatu = 0\r\n    },\r\n    // //刷新音频播放器\r\n    // alplayReload(state,change){\r\n    //   if(change){\r\n    //      state.alplayShow = false\r\n    //   setTimeout(()=>{\r\n    //     state.alplayShow = true\r\n    //   },1000)\r\n    //   }\r\n    // }\r\n    //首页标签更改\r\n    changehomeTAG(state,page){\r\n      state.routerPage = page\r\n    }\r\n  },\r\n  //actions专门用来做异步处理\r\n  actions: {\r\n\r\n  }\r\n})"]},"metadata":{},"sourceType":"module"}