{"ast":null,"code":"require(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.regexp.to-string.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/web.url.js\");\n\nrequire(\"core-js/modules/web.url-search-params.js\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.string.trim.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nrequire(\"core-js/modules/es.object.get-own-property-names.js\");\n\nrequire(\"core-js/modules/es.object.freeze.js\");\n\n//随机颜色\nvar randomColor = function randomColor() {\n  return \"#\".concat((Math.random() * 0xffffff << 0).toString(16));\n};\n\nvar randomNum = function randomNum(min, max) {\n  if (min > max) {\n    var _ref = [max, min];\n    min = _ref[0];\n    max = _ref[1];\n  }\n\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}; //转换成年月日\n\n\nvar transtime = function transtime(millisecond) {\n  if (!millisecond) {\n    return;\n  }\n\n  var year = new Date(millisecond).getFullYear();\n  var month = new Date(millisecond).getMonth() + 1;\n  var date = new Date(millisecond).getDate();\n  return year + '-' + month + '-' + date;\n}; //将歌曲列表歌曲时长转化成分秒\n\n\nvar transMusicTime = function transMusicTime(arr, dt) {\n  for (var i = 0; i < arr.length; i++) {\n    var min = parseInt(arr[i][dt] / 1000 / 60);\n    var sec = parseInt(arr[i][dt] / 1000 % 60);\n\n    if (min < 10) {\n      min = \"0\" + min;\n    }\n\n    if (sec < 10) {\n      sec = \"0\" + sec;\n    }\n\n    arr[i][dt] = min + \":\" + sec;\n  }\n}; //将播放量转换成亿万单位\n\n\nvar transPlayCount = function transPlayCount(arr, playCount) {\n  for (var i = 0; i < arr.length; i++) {\n    if (String(arr[i][playCount]).length > 5 && String(arr[i][playCount]).length < 9) {\n      arr[i][playCount] = String(arr[i][playCount]).substr(0, String(arr[i][playCount]).length - 4) + \"万\";\n    } else if (String(arr[i][playCount]).length == 5) {\n      arr[i][playCount] = String(arr[i][playCount]).substr(0, 1) + \".\" + String(arr[i][playCount]).substr(1, 2) + \"万\";\n    } else if (String(arr[i][playCount]).length == 9) {\n      arr[i][playCount] = String(arr[i][playCount]).substr(0, 1) + \".\" + String(arr[i][playCount]).substr(1, 2) + \"亿\";\n    } else if (String(arr[i][playCount]).length > 9) {\n      arr[i][playCount] = String(arr[i][playCount]).substr(0, String(arr[i][playCount]).length - 8) + \"亿\";\n    }\n  }\n}; //歌曲下载\n\n\nvar download = function download(src, filename) {\n  //将http改成https，因为前端部署后，https请求http下载时会出现报错和无法下载，但本地前端请求时却可以下载的问题。\n  var httpssrc = src.replace(/^http:\\/\\//i, \"https://\"); //  先下载完成后再弹出浏览器窗口2\n\n  fetch(httpssrc).then(function (res) {\n    return res.blob();\n  }).then(function (blob) {\n    var a = document.createElement('a');\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    var url = window.URL.createObjectURL(blob);\n    a.href = url; //下载地址\n\n    a.download = \"\".concat(filename, \".mp3\"); //下载文件名\n\n    a.click(); //模拟点击，自动下载\n\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  });\n}; //获取当前时间戳\n\n\nvar getTimestamp = function getTimestamp() {\n  return new Date().getTime();\n}; //生成(min,max)之间的随机整数（包含min,不包含max）\n\n\nvar randomRange = function randomRange(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}; // Cookie Parser    将cookie解析\n\n\nvar cookieParser = function cookieParser(cookie) {\n  var parserData = {};\n  (cookie || '').split(/;\\s+|(?<!\\s)\\s+$/g).forEach(function (pair) {\n    var crack = pair.indexOf('=');\n    if (crack < 1 || crack == pair.length - 1) return;\n    parserData[decodeURIComponent(pair.slice(0, crack)).trim()] = decodeURIComponent(pair.slice(crack + 1)).trim();\n  });\n  return [parserData['HTTPOnly;MUSIC_U'], parserData['HTTPOnly;__csrf']];\n  /* \r\n  // console.log(parserData)\r\n  {\r\n    Expires: \"Sat, 17 Mar 2091 18:24:35 GMT\"\r\n    HTTPOnly;MUSIC_A_T: \"1481119727062\"\r\n    HTTPOnly;MUSIC_R_T: \"1481119757789\"\r\n    HTTPOnly;MUSIC_U: \"6bf80db2682091e66db7c358940e6034f555d03d999284f42033476c98e45796993166e004087dd3e30340b48322c4fd7a82616b73ff591e0195ea446a99c0ab92386fc4f57b0915a0d2166338885bd7\"\r\n    HTTPOnly;__csrf: \"a7ae33e29d089a9e30774e67bfd99367\"\r\n    MUSIC_A_T: \"1481119727062\"\r\n    Max-Age: \"2147483647\"\r\n    Path: \"/api/clientlog\"\r\n  }\r\n   */\n  //6bf80db2682091e66db7c358940e6034f555d03d999284f42033476c98e45796993166e004087dd3e30340b48322c4fd7a82616b73ff591e0195ea446a99c0ab92386fc4f57b0915a0d2166338885bd7\n}; //深冻结\n\n\nvar deepFreeze = function deepFreeze(obj) {\n  // 获取所有属性\n  var propNames = Object.getOwnPropertyNames(obj); // 遍历\n\n  propNames.forEach(function (item) {\n    var prop = obj[item]; // 如果某个属性的属性值是对象，则递归调用\n\n    if (prop instanceof Object && prop !== null) {\n      deepFreeze(prop);\n    }\n  }); // 冻结自身\n\n  return Object.freeze(obj);\n};\n/**\r\n * 将 source 对象中的非空属性值复制到 destination 对象中。\r\n * @param {Object} source - 包含属性和对应值的源对象。\r\n * @param {Object} destination - 目标对象，用于接收复制后的非空属性值。\r\n */\n\n\nvar copyNonEmptyValues = function copyNonEmptyValues(source, destination) {\n  for (var key in source) {\n    var value = source[key]; // 检查 value 是否为非空值（不为 null、undefined 和空字符串）。\n\n    if (value !== null && value !== undefined && value !== '') {\n      // 复制非空值到 destination 对象中的同名属性。\n      destination[key] = value;\n    }\n  }\n};\n\nmodule.exports = {\n  randomColor: randomColor,\n  randomNum: randomNum,\n  transtime: transtime,\n  transMusicTime: transMusicTime,\n  transPlayCount: transPlayCount,\n  download: download,\n  getTimestamp: getTimestamp,\n  randomRange: randomRange,\n  cookieParser: cookieParser,\n  deepFreeze: deepFreeze,\n  copyNonEmptyValues: copyNonEmptyValues\n};","map":{"version":3,"sources":["C:/Users/Wacht/Desktop/git/cloudMusic-Source-Code/src/utils/commonApi.js"],"names":["randomColor","Math","random","toString","randomNum","min","max","floor","transtime","millisecond","year","Date","getFullYear","month","getMonth","date","getDate","transMusicTime","arr","dt","i","length","parseInt","sec","transPlayCount","playCount","String","substr","download","src","filename","httpssrc","replace","fetch","then","res","blob","a","document","createElement","body","appendChild","style","display","url","window","URL","createObjectURL","href","click","removeChild","revokeObjectURL","getTimestamp","getTime","randomRange","cookieParser","cookie","parserData","split","forEach","pair","crack","indexOf","decodeURIComponent","slice","trim","deepFreeze","obj","propNames","Object","getOwnPropertyNames","item","prop","freeze","copyNonEmptyValues","source","destination","key","value","undefined","module","exports"],"mappings":"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","sourcesContent":["//随机颜色\r\nconst randomColor = () => {\r\n  return `#${((Math.random() * 0xffffff) << 0).toString(16)}`;\r\n}\r\n\r\nconst randomNum = (min, max) => {\r\n  if (min > max) {\r\n    [min, max] = [max, min]; // 交换 min 和 max 值，确保 min <= max\r\n  }\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n//转换成年月日\r\nconst transtime = (millisecond) => {\r\n  if (!millisecond) {\r\n    return\r\n  }\r\n  let year = new Date(millisecond).getFullYear();\r\n  let month = new Date(millisecond).getMonth() + 1;\r\n  let date = new Date(millisecond).getDate()\r\n  return year + '-' + month + '-' + date\r\n}\r\n//将歌曲列表歌曲时长转化成分秒\r\nconst transMusicTime = (arr, dt) => {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    let min = parseInt(arr[i][dt] / 1000 / 60);\r\n    let sec = parseInt((arr[i][dt] / 1000) % 60);\r\n    if (min < 10) {\r\n      min = \"0\" + min;\r\n    }\r\n    if (sec < 10) {\r\n      sec = \"0\" + sec;\r\n    }\r\n    arr[i][dt] = min + \":\" + sec;\r\n  }\r\n}\r\n\r\n\r\n\r\n//将播放量转换成亿万单位\r\n\r\nconst transPlayCount = (arr, playCount) => {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (\r\n      String(arr[i][playCount]).length > 5 &&\r\n      String(arr[i][playCount]).length < 9\r\n    ) {\r\n      arr[i][playCount] =\r\n        String(arr[i][playCount]).substr(\r\n          0,\r\n          String(arr[i][playCount]).length - 4\r\n        ) + \"万\";\r\n    } else if (String(arr[i][playCount]).length == 5) {\r\n      arr[i][playCount] =\r\n        String(arr[i][playCount]).substr(0, 1) +\r\n        \".\" +\r\n        String(arr[i][playCount]).substr(1, 2) +\r\n        \"万\";\r\n    } else if (String(arr[i][playCount]).length == 9) {\r\n      arr[i][playCount] =\r\n        String(arr[i][playCount]).substr(0, 1) +\r\n        \".\" +\r\n        String(arr[i][playCount]).substr(1, 2) +\r\n        \"亿\";\r\n    } else if (String(arr[i][playCount]).length > 9) {\r\n      arr[i][playCount] =\r\n        String(arr[i][playCount]).substr(\r\n          0,\r\n          String(arr[i][playCount]).length - 8\r\n        ) + \"亿\";\r\n    }\r\n  }\r\n}\r\n\r\n//歌曲下载\r\nconst download = (src, filename) => {\r\n\r\n  //将http改成https，因为前端部署后，https请求http下载时会出现报错和无法下载，但本地前端请求时却可以下载的问题。\r\n  let httpssrc = src.replace(/^http:\\/\\//i, \"https://\");\r\n  //  先下载完成后再弹出浏览器窗口2\r\n  fetch(httpssrc).then(res => res.blob()).then(blob => {\r\n    const a = document.createElement('a');\r\n    document.body.appendChild(a)\r\n    a.style.display = 'none'\r\n    const url = window.URL.createObjectURL(blob);\r\n    a.href = url;//下载地址\r\n    a.download = `${filename}.mp3`;//下载文件名\r\n    a.click();//模拟点击，自动下载\r\n    document.body.removeChild(a)\r\n    window.URL.revokeObjectURL(url);\r\n  });\r\n\r\n}\r\n//获取当前时间戳\r\nconst getTimestamp = () => {\r\n  return new Date().getTime()\r\n}\r\n//生成(min,max)之间的随机整数（包含min,不包含max）\r\nconst randomRange = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n// Cookie Parser    将cookie解析\r\nconst cookieParser = (cookie) => {\r\n  let parserData = {};\r\n  (cookie || '').split(/;\\s+|(?<!\\s)\\s+$/g).forEach((pair) => {\r\n    let crack = pair.indexOf('=')\r\n    if (crack < 1 || crack == pair.length - 1) return\r\n    parserData[decodeURIComponent(pair.slice(0, crack)).trim()] = decodeURIComponent(\r\n      pair.slice(crack + 1),\r\n    ).trim()\r\n  })\r\n  return [parserData['HTTPOnly;MUSIC_U'], parserData['HTTPOnly;__csrf']]\r\n  /* \r\n  // console.log(parserData)\r\n  {\r\n    Expires: \"Sat, 17 Mar 2091 18:24:35 GMT\"\r\n    HTTPOnly;MUSIC_A_T: \"1481119727062\"\r\n    HTTPOnly;MUSIC_R_T: \"1481119757789\"\r\n    HTTPOnly;MUSIC_U: \"6bf80db2682091e66db7c358940e6034f555d03d999284f42033476c98e45796993166e004087dd3e30340b48322c4fd7a82616b73ff591e0195ea446a99c0ab92386fc4f57b0915a0d2166338885bd7\"\r\n    HTTPOnly;__csrf: \"a7ae33e29d089a9e30774e67bfd99367\"\r\n    MUSIC_A_T: \"1481119727062\"\r\n    Max-Age: \"2147483647\"\r\n    Path: \"/api/clientlog\"\r\n  }\r\n   */\r\n  //6bf80db2682091e66db7c358940e6034f555d03d999284f42033476c98e45796993166e004087dd3e30340b48322c4fd7a82616b73ff591e0195ea446a99c0ab92386fc4f57b0915a0d2166338885bd7\r\n}\r\n\r\n//深冻结\r\nconst deepFreeze = (obj) => {\r\n  // 获取所有属性\r\n  var propNames = Object.getOwnPropertyNames(obj)\r\n\r\n  // 遍历\r\n  propNames.forEach(item => {\r\n    var prop = obj[item]\r\n    // 如果某个属性的属性值是对象，则递归调用\r\n    if (prop instanceof Object && prop !== null) {\r\n      deepFreeze(prop)\r\n    }\r\n  })\r\n  // 冻结自身\r\n  return Object.freeze(obj)\r\n}\r\n\r\n\r\n/**\r\n * 将 source 对象中的非空属性值复制到 destination 对象中。\r\n * @param {Object} source - 包含属性和对应值的源对象。\r\n * @param {Object} destination - 目标对象，用于接收复制后的非空属性值。\r\n */\r\nconst  copyNonEmptyValues = (source, destination)=> {\r\n  for (const key in source) {\r\n    const value = source[key];\r\n    // 检查 value 是否为非空值（不为 null、undefined 和空字符串）。\r\n    if (value !== null && value !== undefined && value !== '') {\r\n      // 复制非空值到 destination 对象中的同名属性。\r\n      destination[key] = value;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n  randomColor,\r\n  randomNum,\r\n  transtime,\r\n  transMusicTime,\r\n  transPlayCount,\r\n  download,\r\n  getTimestamp,\r\n  randomRange,\r\n  cookieParser,\r\n  deepFreeze,\r\n  copyNonEmptyValues,\r\n}"]},"metadata":{},"sourceType":"script"}