{"ast":null,"code":"import _objectSpread from \"D:/data/\\u684C\\u9762/\\u4EE3\\u7801\\u6587\\u4EF6\\u5939/git/cloudMusic-Source-Code-main/cloudMusic-Source-Code-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport axios from 'axios';\nimport { Message } from 'element-ui';\nimport loginUrl from './needLogin/loginUrl';\nimport { getToken } from '@/utils/token'; // import { MessageBox, Message } from 'element-ui'\n//可以创建多个axois实例，需要用哪个就引入使用哪个\n\nvar cloudMusic = axios.create({\n  baseURL: 'https://wacht.fun/',\n  // baseURL: 'https://biejuanle.icu/',\n  // baseURL: 'http://localhost:3000/',\n  // changeOrigin: true,  //解决跨域\n  withCredentials: true\n});\nvar cloudMusic2 = axios.create({// baseURL: 'https://biejuanle.icu/',\n  // baseURL:'http://localhost:3000/'\n  // changeOrigin: true,  //解决跨域\n  // withCredentials: true,\n}); //配置全局的axios默认值\n// axios.defaults.baseURL = '你的基础域名'\n\naxios.defaults.timeout = 5000; // 在全局请求和响应拦截器中添加请求状态\n// Add a request interceptor\n\ncloudMusic.interceptors.request.use(function (config) {\n  if (loginUrl.includes(config.url) && !getToken()) {\n    //当请求的url需要登录，并且此时未登录时，进入此处\n    Message.error('该操作需要登录');\n    return false;\n  } // console.log(config)\n  //判断请求的类型：如果是post请求就把默认参数拼到data里面；如果是get请求就拼到params里面\n\n\n  if (config.method === 'post') {\n    config.data = _objectSpread({\n      'csrf_token': getToken()\n    }, config.data);\n  } else if (config.method === 'get') {\n    config.params = _objectSpread({\n      'csrf_token': getToken()\n    }, config.params);\n  } // console.log(config)\n  // config.data.csrf_token = getToken()\n\n\n  return config;\n}, function (error) {\n  // Do something with request error\n  return Promise.reject(error);\n}); // Add a response interceptor\n\ncloudMusic.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  if (loginUrl.includes(config.url) && !localStorage.getItem(\"user\")) {\n    //当请求的url需要登录，并且此时未登录时，进入此处\n    Message.error('请求错误');\n    return false;\n  }\n\n  return Promise.reject(error);\n});\nexport { cloudMusic, cloudMusic2 }; //其他文件可通过import { cloudMusic, cloudMusic2 } from  ...导入使用\n// export default cloudMusic2;//default只能导出一个","map":{"version":3,"sources":["D:/data/桌面/代码文件夹/git/cloudMusic-Source-Code-main/cloudMusic-Source-Code-main/src/api/request.js"],"names":["axios","Message","loginUrl","getToken","cloudMusic","create","baseURL","withCredentials","cloudMusic2","defaults","timeout","interceptors","request","use","config","includes","url","error","method","data","params","Promise","reject","response","localStorage","getItem"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,QAAT,QAAyB,eAAzB,C,CACA;AAIA;;AACA,IAAMC,UAAU,GAAGJ,KAAK,CAACK,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAE,oBADmB;AAE5B;AACA;AACA;AACAC,EAAAA,eAAe,EAAE;AALW,CAAb,CAAnB;AAOA,IAAMC,WAAW,GAAGR,KAAK,CAACK,MAAN,CAAa,CAC7B;AACA;AACA;AACA;AAJ6B,CAAb,CAApB,C,CAOA;AACA;;AACAL,KAAK,CAACS,QAAN,CAAeC,OAAf,GAAyB,IAAzB,C,CAEA;AACA;;AACAN,UAAU,CAACO,YAAX,CAAwBC,OAAxB,CAAgCC,GAAhC,CAAoC,UAAAC,MAAM,EAAI;AAE1C,MAAIZ,QAAQ,CAACa,QAAT,CAAkBD,MAAM,CAACE,GAAzB,KAAiC,CAACb,QAAQ,EAA9C,EAAkD;AAAC;AAC/CF,IAAAA,OAAO,CAACgB,KAAR,CAAc,SAAd;AACA,WAAO,KAAP;AACH,GALyC,CAM1C;AACA;;;AACA,MAAIH,MAAM,CAACI,MAAP,KAAkB,MAAtB,EAA8B;AAC1BJ,IAAAA,MAAM,CAACK,IAAP;AAEI,oBAAchB,QAAQ;AAF1B,OAEiCW,MAAM,CAACK,IAFxC;AAIH,GALD,MAKO,IAAIL,MAAM,CAACI,MAAP,KAAkB,KAAtB,EAA6B;AAChCJ,IAAAA,MAAM,CAACM,MAAP;AAEI,oBAAcjB,QAAQ;AAF1B,OAEiCW,MAAM,CAACM,MAFxC;AAIH,GAlByC,CAmB1C;AACA;;;AACA,SAAON,MAAP;AACH,CAtBD,EAsBG,UAAAG,KAAK,EAAI;AACR;AACA,SAAOI,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACH,CAzBD,E,CA0BA;;AACAb,UAAU,CAACO,YAAX,CAAwBY,QAAxB,CAAiCV,GAAjC,CAAqC,UAAAU,QAAQ,EAAI;AAE7C,SAAOA,QAAP;AACH,CAHD,EAGG,UAAAN,KAAK,EAAI;AACR,MAAIf,QAAQ,CAACa,QAAT,CAAkBD,MAAM,CAACE,GAAzB,KAAiC,CAACQ,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAtC,EAAoE;AAAC;AACjExB,IAAAA,OAAO,CAACgB,KAAR,CAAc,MAAd;AACA,WAAO,KAAP;AACH;;AAED,SAAOI,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACH,CAVD;AAWA,SAASb,UAAT,EAAqBI,WAArB,G,CAAmC;AACnC","sourcesContent":["import axios from 'axios'\nimport { Message } from 'element-ui'\nimport loginUrl from './needLogin/loginUrl';\nimport { getToken } from '@/utils/token'\n// import { MessageBox, Message } from 'element-ui'\n\n\n\n//可以创建多个axois实例，需要用哪个就引入使用哪个\nconst cloudMusic = axios.create({\n    baseURL: 'https://wacht.fun/',\n    // baseURL: 'https://biejuanle.icu/',\n    // baseURL: 'http://localhost:3000/',\n    // changeOrigin: true,  //解决跨域\n    withCredentials: true,\n});\nconst cloudMusic2 = axios.create({\n    // baseURL: 'https://biejuanle.icu/',\n    // baseURL:'http://localhost:3000/'\n    // changeOrigin: true,  //解决跨域\n    // withCredentials: true,\n});\n\n//配置全局的axios默认值\n// axios.defaults.baseURL = '你的基础域名'\naxios.defaults.timeout = 5000\n\n// 在全局请求和响应拦截器中添加请求状态\n// Add a request interceptor\ncloudMusic.interceptors.request.use(config => {\n\n    if (loginUrl.includes(config.url) && !getToken()) {//当请求的url需要登录，并且此时未登录时，进入此处\n        Message.error('该操作需要登录')\n        return false\n    }\n    // console.log(config)\n    //判断请求的类型：如果是post请求就把默认参数拼到data里面；如果是get请求就拼到params里面\n    if (config.method === 'post') {\n        config.data = {\n\n            'csrf_token': getToken(), ...config.data,\n        }\n    } else if (config.method === 'get') {\n        config.params = {\n\n            'csrf_token': getToken(), ...config.params,\n        }\n    }\n    // console.log(config)\n    // config.data.csrf_token = getToken()\n    return config\n}, error => {\n    // Do something with request error\n    return Promise.reject(error);\n});\n// Add a response interceptor\ncloudMusic.interceptors.response.use(response => {\n\n    return response;\n}, error => {\n    if (loginUrl.includes(config.url) && !localStorage.getItem(\"user\")) {//当请求的url需要登录，并且此时未登录时，进入此处\n        Message.error('请求错误')\n        return false\n    }\n\n    return Promise.reject(error);\n});\nexport { cloudMusic, cloudMusic2 };//其他文件可通过import { cloudMusic, cloudMusic2 } from  ...导入使用\n// export default cloudMusic2;//default只能导出一个\n\n\n"]},"metadata":{},"sourceType":"module"}