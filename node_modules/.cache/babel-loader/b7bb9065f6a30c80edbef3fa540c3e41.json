{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/data/\\u684C\\u9762/\\u4EE3\\u7801\\u6587\\u4EF6\\u5939/git/cloudMusic-Source-Code-main/cloudMusic-Source-Code-main/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"D:/data/\\u684C\\u9762/\\u4EE3\\u7801\\u6587\\u4EF6\\u5939/git/cloudMusic-Source-Code-main/cloudMusic-Source-Code-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"D:/data/\\u684C\\u9762/\\u4EE3\\u7801\\u6587\\u4EF6\\u5939/git/cloudMusic-Source-Code-main/cloudMusic-Source-Code-main/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getDownloadUrl, getSingerDetail as _getSingerDetail, // getSingerDesc,\ngetSingerSongList as _getSingerSongList, getSingerMvList as _getSingerMvList, getSingerAlbum as _getSingerAlbum } from \"@/api/api\";\nimport { transMusicTime, transPlayCount, download } from \"@/utils/commonApi\";\nimport songlist from \"@/components/songlist.vue\";\nexport default {\n  components: {\n    songlist: songlist\n  },\n  // props: ['artist.id'],\n  data: function data() {\n    var _artist;\n\n    return {\n      //歌手信息\n      artist: (_artist = {\n        alias: [],\n        musicSize: \"\",\n        id: \"\",\n        img1v1Url: \"\",\n        name: \"\"\n      }, _defineProperty(_artist, \"alias\", [\"\", \"\"]), _defineProperty(_artist, \"musicSize\", \"\"), _defineProperty(_artist, \"albumSize\", \"\"), _defineProperty(_artist, \"mvSize\", \"\"), _defineProperty(_artist, \"briefDesc\", \"\"), _artist),\n      songList: [],\n      albumList: [],\n      mvList: [],\n      tagSwitch: {\n        detailSwitch: true,\n        songSwitch: false,\n        albumSwitch: false,\n        mvSwitch: false\n      },\n      songcurrentPage: 1,\n      albumcurrentPage: 1,\n      mvcurrentPage: 1\n    };\n  },\n  created: function created() {\n    // 判断路由传入了歌手信息还是歌手id\n    if (this.$route.params.artist) {\n      //路由传入的是歌手详情\n      this.artist = this.$route.params.artist;\n      this.getSingerDetail(this.$route.params.artist.id);\n    } else {\n      //当路由传入的是id时\n      this.$route.params.id ? //传入id，把之前的缓存清掉\n      this.getSingerDetail(this.$route.params.id) : this.artist = JSON.parse(localStorage.getItem(\"artist\")); //刷新页面会走向这，可以直接从缓存获取\n    }\n  },\n  methods: {\n    //显示歌手单曲、专辑、mv列表开关\n    switchChange: function switchChange(tag) {\n      var that = this;\n\n      for (var key in that.tagSwitch) {\n        if (key != tag) {\n          that.tagSwitch[key] = false;\n        }\n      }\n\n      that.tagSwitch[tag] = true;\n    },\n    //获取歌手详情\n    getSingerDetail: function getSingerDetail(id) {\n      var _this = this;\n\n      // id:4292 李荣浩\n      _getSingerDetail({\n        id: id\n      }).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(res) {\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!(res.data.code === 200)) {\n                    _context.next = 5;\n                    break;\n                  }\n\n                  _context.next = 3;\n                  return res.data.artist;\n\n                case 3:\n                  _this.artist = _context.sent;\n                  // console.log(\"歌手详情--\", res.data.artist);\n                  localStorage.setItem(\"artist\", JSON.stringify(res.data.artist));\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()).catch(function (res) {});\n    },\n    //获取歌手单曲列表\n    getSingerSongList: function getSingerSongList(tag) {\n      var that = this;\n      var params = {\n        id: that.artist.id,\n        limit: 30,\n        offset: (that.songcurrentPage - 1) * 30\n      };\n      that.detailShow = false;\n      that.songList = [];\n\n      _getSingerSongList(params).then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(res) {\n          var _iterator, _step, item, dt;\n\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return res.data.songs;\n\n                case 2:\n                  that.songList = _context2.sent;\n                  // that.songCount = res.data.total\n                  //给每首曲子添加防抖\n                  _iterator = _createForOfIteratorHelper(that.songList);\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      item = _step.value;\n                      that.$set(item, \"timer\", true);\n                    } //转换时间\n\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n\n                  dt = \"dt\";\n                  transMusicTime(that.songList, dt);\n\n                case 7:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n\n      that.switchChange(tag);\n    },\n    //获取歌手专辑列表\n    getSingerAlbum: function getSingerAlbum(tag) {\n      var that = this;\n      var params = {\n        id: that.artist.id,\n        limit: 6,\n        offset: (that.albumcurrentPage - 1) * 6\n      };\n      that.detailShow = false;\n      that.albumList = [];\n\n      _getSingerAlbum(params).then(function (res) {\n        // console.log(\"歌手专辑列表\", res.data.hotAlbums);\n        that.albumList = res.data.hotAlbums;\n      });\n\n      that.switchChange(tag);\n    },\n    //获取歌手mv\n    getSingerMvList: function getSingerMvList(tag) {\n      var that = this;\n      var params = {\n        id: that.artist.id,\n        limit: 8,\n        offset: (that.mvcurrentPage - 1) * 8\n      };\n      that.mvList = [];\n\n      _getSingerMvList(params).then( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(res) {\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return res.data.mvs;\n\n                case 2:\n                  that.mvList = _context3.sent;\n                  // 转换时间单位\n                  transMusicTime(that.mvList, \"duration\"); //转换播放量单位\n\n                  transPlayCount(that.mvList, \"playCount\");\n\n                case 5:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n\n      that.switchChange(tag);\n    },\n    ////获取歌手描述\n    // getSingerDesc() {\n    //   // console.log(Boolean(this.artist))\n    //   var that = this;\n    //   let params = {\n    //     id: that.artist.id,\n    //   };\n    //   getSingerDesc(params).then((res) => {\n    //     console.log(\"歌手描述\", res.data);\n    //     that.artist = res.data.artist;\n    //   });\n    // },\n    //跳转到专辑详情\n    goAlbumDetail: function goAlbumDetail(albumId) {\n      this.$router.push({\n        name: \"albumDetail\",\n        params: {\n          albumId: albumId\n        }\n      });\n    },\n    //跳转到播放MV页面\n    playMV: function playMV(mvId) {\n      //获取mv播放链接\n      this.$router.push({\n        name: \"mvPlay\",\n        params: {\n          mvId: mvId\n        }\n      });\n    },\n    //歌手歌曲分页\n    songHandleCurrentChange: function songHandleCurrentChange(currentPage) {\n      // console.log(`当前页: ${currentPage}`);\n      var that = this;\n      that.songcurrentPage = currentPage;\n      that.getSingerSongList(\"songSwitch\");\n    },\n    //歌手专辑分页\n    albumHandleCurrentChange: function albumHandleCurrentChange(currentPage) {\n      // console.log(`当前页: ${currentPage}`);\n      var that = this;\n      that.albumcurrentPage = currentPage;\n      that.getSingerAlbum(\"albumSwitch\");\n    },\n    // 歌手mv分页\n    mvHandleCurrentChange: function mvHandleCurrentChange(currentPage) {\n      // console.log(`当前页: ${currentPage}`);\n      var that = this;\n      that.mvcurrentPage = currentPage;\n      that.getSingerMvList(\"mvSwitch\");\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}