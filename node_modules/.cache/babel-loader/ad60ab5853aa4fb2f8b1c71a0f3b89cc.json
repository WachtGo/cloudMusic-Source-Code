{"ast":null,"code":"// import createPersistedState from \"vuex-persistedstate\"\nexport default {\n  namespaced: true,\n  state: {\n    // 歌曲生成周期\n    // plugins: [createPersistedState({\n    // \tstorage: window.sessionStorage\n    // })],\n    audio: [],\n    //播放列表音乐\n    audition: [],\n    //试听歌曲\n    musicAudioStatu: 0,\n    //控制audio,audition两个播放器显示\n    alplayShow: true\n  },\n  actions: {},\n  mutations: {\n    //播放器添加歌曲\n    addSONG(state, song) {\n      for (let item of state.audio) {\n        if (item.id === song.id) {\n          this._vm.$message(\"播放列表已存在这首歌\");\n\n          return;\n        }\n      }\n\n      state.audio.push(song); //将歌曲添加\n\n      this._vm.$message({\n        type: \"success\",\n        message: \"歌曲已添加到播放列表\"\n      });\n    },\n\n    //删除歌曲\n    deleteMUSIC(state, index) {\n      state.audio.splice(index, 1);\n\n      this._vm.$message({\n        type: \"success\",\n        message: \"歌曲已移出播放列表\"\n      });\n    },\n\n    //添加试听\n    addAUDITION(state, song) {\n      for (let item of state.audition) {\n        if (item.id === song.id) {\n          this._vm.$message(\"正在试听这首歌\");\n\n          return;\n        }\n      }\n\n      state.musicAudioStatu = 1;\n      state.audition.splice(0, 1);\n      state.audition[0] = song; //将歌曲添加\n\n      this._vm.$message({\n        type: \"success\",\n        message: \"歌曲已添加到试听\"\n      });\n    },\n\n    // 删除试听\n    deleteAUDITION(state, index) {\n      state.audition.splice(index, 1);\n\n      this._vm.$message({\n        type: \"success\",\n        message: \"歌曲已移出试听列表\"\n      });\n    },\n\n    //更换播放器\n    changeAPLAYER(state, statu) {\n      statu === 1 ? state.musicAudioStatu = 1 : state.musicAudioStatu = 0;\n    }\n\n  }\n};","map":{"version":3,"sources":["D:/data/桌面/git/cloudMusic-Source-Code/src/store/aplayer.js"],"names":["namespaced","state","audio","audition","musicAudioStatu","alplayShow","actions","mutations","addSONG","song","item","id","_vm","$message","push","type","message","deleteMUSIC","index","splice","addAUDITION","deleteAUDITION","changeAPLAYER","statu"],"mappings":"AAAA;AAEA,eAAe;AACbA,EAAAA,UAAU,EAAE,IADC;AAEbC,EAAAA,KAAK,EAAE;AACL;AACA;AACA;AACA;AACAC,IAAAA,KAAK,EAAE,EALF;AAKM;AACXC,IAAAA,QAAQ,EAAE,EANL;AAMS;AACdC,IAAAA,eAAe,EAAE,CAPZ;AAOe;AACpBC,IAAAA,UAAU,EAAE;AARP,GAFM;AAYbC,EAAAA,OAAO,EAAE,EAZI;AAabC,EAAAA,SAAS,EAAE;AACT;AACAC,IAAAA,OAAO,CAACP,KAAD,EAAQQ,IAAR,EAAc;AACnB,WAAK,IAAIC,IAAT,IAAiBT,KAAK,CAACC,KAAvB,EAA8B;AAC5B,YAAIQ,IAAI,CAACC,EAAL,KAAYF,IAAI,CAACE,EAArB,EAAyB;AACvB,eAAKC,GAAL,CAASC,QAAT,CAAkB,YAAlB;;AACA;AACD;AACF;;AACDZ,MAAAA,KAAK,CAACC,KAAN,CAAYY,IAAZ,CAAiBL,IAAjB,EAPmB,CAOK;;AACxB,WAAKG,GAAL,CAASC,QAAT,CAAkB;AAChBE,QAAAA,IAAI,EAAE,SADU;AAEhBC,QAAAA,OAAO,EAAE;AAFO,OAAlB;AAID,KAdQ;;AAeT;AACAC,IAAAA,WAAW,CAAChB,KAAD,EAAQiB,KAAR,EAAe;AACxBjB,MAAAA,KAAK,CAACC,KAAN,CAAYiB,MAAZ,CAAmBD,KAAnB,EAA0B,CAA1B;;AACA,WAAKN,GAAL,CAASC,QAAT,CAAkB;AAChBE,QAAAA,IAAI,EAAE,SADU;AAEhBC,QAAAA,OAAO,EAAE;AAFO,OAAlB;AAID,KAtBQ;;AAuBT;AACAI,IAAAA,WAAW,CAACnB,KAAD,EAAQQ,IAAR,EAAc;AACvB,WAAK,IAAIC,IAAT,IAAiBT,KAAK,CAACE,QAAvB,EAAiC;AAC/B,YAAIO,IAAI,CAACC,EAAL,KAAYF,IAAI,CAACE,EAArB,EAAyB;AACvB,eAAKC,GAAL,CAASC,QAAT,CAAkB,SAAlB;;AACA;AACD;AACF;;AACDZ,MAAAA,KAAK,CAACG,eAAN,GAAwB,CAAxB;AACAH,MAAAA,KAAK,CAACE,QAAN,CAAegB,MAAf,CAAsB,CAAtB,EAAyB,CAAzB;AACAlB,MAAAA,KAAK,CAACE,QAAN,CAAe,CAAf,IAAoBM,IAApB,CATuB,CASG;;AAC1B,WAAKG,GAAL,CAASC,QAAT,CAAkB;AAChBE,QAAAA,IAAI,EAAE,SADU;AAEhBC,QAAAA,OAAO,EAAE;AAFO,OAAlB;AAID,KAtCQ;;AAuCT;AACAK,IAAAA,cAAc,CAACpB,KAAD,EAAQiB,KAAR,EAAe;AAC3BjB,MAAAA,KAAK,CAACE,QAAN,CAAegB,MAAf,CAAsBD,KAAtB,EAA6B,CAA7B;;AACA,WAAKN,GAAL,CAASC,QAAT,CAAkB;AAChBE,QAAAA,IAAI,EAAE,SADU;AAEhBC,QAAAA,OAAO,EAAE;AAFO,OAAlB;AAID,KA9CQ;;AA+CT;AACAM,IAAAA,aAAa,CAACrB,KAAD,EAAQsB,KAAR,EAAe;AAC1BA,MAAAA,KAAK,KAAK,CAAV,GAAetB,KAAK,CAACG,eAAN,GAAwB,CAAvC,GAA6CH,KAAK,CAACG,eAAN,GAAwB,CAArE;AACD;;AAlDQ;AAbE,CAAf","sourcesContent":["// import createPersistedState from \"vuex-persistedstate\"\n\nexport default {\n  namespaced: true,\n  state: {\n    // 歌曲生成周期\n    // plugins: [createPersistedState({\n    // \tstorage: window.sessionStorage\n    // })],\n    audio: [], //播放列表音乐\n    audition: [], //试听歌曲\n    musicAudioStatu: 0, //控制audio,audition两个播放器显示\n    alplayShow: true,\n  },\n  actions: {},\n  mutations: {\n    //播放器添加歌曲\n    addSONG(state, song) {\n      for (let item of state.audio) {\n        if (item.id === song.id) {\n          this._vm.$message(\"播放列表已存在这首歌\");\n          return;\n        }\n      }\n      state.audio.push(song); //将歌曲添加\n      this._vm.$message({\n        type: \"success\",\n        message: \"歌曲已添加到播放列表\",\n      });\n    },\n    //删除歌曲\n    deleteMUSIC(state, index) {\n      state.audio.splice(index, 1);\n      this._vm.$message({\n        type: \"success\",\n        message: \"歌曲已移出播放列表\",\n      });\n    },\n    //添加试听\n    addAUDITION(state, song) {\n      for (let item of state.audition) {\n        if (item.id === song.id) {\n          this._vm.$message(\"正在试听这首歌\");\n          return;\n        }\n      }\n      state.musicAudioStatu = 1;\n      state.audition.splice(0, 1);\n      state.audition[0] = song; //将歌曲添加\n      this._vm.$message({\n        type: \"success\",\n        message: \"歌曲已添加到试听\",\n      });\n    },\n    // 删除试听\n    deleteAUDITION(state, index) {\n      state.audition.splice(index, 1);\n      this._vm.$message({\n        type: \"success\",\n        message: \"歌曲已移出试听列表\",\n      });\n    },\n    //更换播放器\n    changeAPLAYER(state, statu) {\n      statu === 1 ? (state.musicAudioStatu = 1) : (state.musicAudioStatu = 0);\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}